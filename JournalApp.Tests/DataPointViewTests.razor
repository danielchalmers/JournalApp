@namespace JournalApp.Tests
@inherits JaTestContext

@code {
    [Fact]
    public void Mood()
    {
        var category = new DataPointCategory
        {
            Guid = Guid.NewGuid(),
            Type = PointType.Mood,
        };

        var day = Day.Create(new(2024, 01, 01));
        var point = DataPoint.Create(day, category);
        point.Mood = "🤩";

        var layout = Render(
            @<MainLayout>
                <Body>
                    <DataPointView Point="point" />
                </Body>
            </MainLayout>);

        var cut = layout.FindComponent<DataPointView>();

        cut.Find(".mud-menu-activator").Click();

        layout.FindAll("div.mud-popover-open").Count.Should().Be(1);
        layout.FindAll(".mud-list .mud-menu-item")[0].Click();
        point.Mood.Should().Be("🤔");
    }

    [Fact]
    public void Mood_SobEmoji_ShowsMotivationalQuote()
    {
        var category = new DataPointCategory
        {
            Guid = Guid.NewGuid(),
            Type = PointType.Mood,
        };

        var day = Day.Create(new(2024, 01, 01));
        var point = DataPoint.Create(day, category);

        var layout = Render(
            @<MainLayout>
                <Body>
                    <DataPointView Point="point" />
                </Body>
            </MainLayout>);

        var cut = layout.FindComponent<DataPointView>();

        // Open the mood menu
        cut.Find(".mud-menu-activator").Click();

        // Find and click the sob emoji (😭 is the last item in DataPoint.Moods)
        var sobEmoji = DataPoint.Moods[^1];  // Get the last mood (sob emoji)
        sobEmoji.Should().Be("😭");  // Verify it's the sob emoji
        
        var menuItems = layout.FindAll(".mud-list .mud-menu-item");
        menuItems[^1].Click();  // Click the last menu item (sob emoji)

        // Verify mood was set
        point.Mood.Should().Be(sobEmoji);

        // Verify a snackbar was displayed (MudBlazor creates a snackbar container)
        layout.FindAll(".mud-snackbar").Count.Should().BeGreaterThan(0);
    }

    [Fact]
    public void Sleep()
    {
        var category = new DataPointCategory
        {
            Guid = Guid.NewGuid(),
            Type = PointType.Sleep,
        };

        var day = Day.Create(new(2024, 01, 01));
        var point = DataPoint.Create(day, category);
        point.SleepHours = 8.5m;

        var cut = RenderComponent<DataPointView>(p =>
            p.Add(x => x.Point, point)
        );

        cut.Find(".sleep-hours").TextContent.Should().Be("08.5");

        for (var i = 0; i < 50; i++)
            cut.Find(".less-sleep").Click();

        point.SleepHours.Should().Be(0);
        cut.Find(".sleep-hours").TextContent.Should().Be("00.0");
        cut.Find(".less-sleep").HasAttribute("disabled").Should().BeTrue();
        cut.Find(".more-sleep").HasAttribute("disabled").Should().BeFalse();

        for (var i = 0; i < 50; i++)
            cut.Find(".more-sleep").Click();

        point.SleepHours.Should().Be(24);
        cut.Find(".sleep-hours").TextContent.Should().Be("24.0");
        cut.Find(".more-sleep").HasAttribute("disabled").Should().BeTrue();
        cut.Find(".less-sleep").HasAttribute("disabled").Should().BeFalse();
    }

    [Fact]
    public void Scale()
    {
        var category = new DataPointCategory
        {
            Guid = Guid.NewGuid(),
            Type = PointType.Scale,
        };

        var day = Day.Create(new(2024, 01, 01));
        var point = DataPoint.Create(day, category);

        var cut = RenderComponent<DataPointView>(p =>
            p.Add(x => x.Point, point)
        );

        point.ScaleIndex.Should().Be(null);
        cut.FindAll(".mud-rating-item").Count.Should().Be(5);

        cut.FindAll(".mud-rating-item")[2].Click();
        point.ScaleIndex.Should().Be(3);

        cut.FindAll(".mud-rating-item")[2].Click();
        point.ScaleIndex.Should().Be(null);
    }

    [Theory]
    [InlineData(PointType.LowToHigh)]
    [InlineData(PointType.MildToSevere)]
    public void ScaleEnums(PointType type)
    {
        var category = new DataPointCategory
        {
            Guid = Guid.NewGuid(),
            Type = type,
        };

        var day = Day.Create(new(2024, 01, 01));
        var point = DataPoint.Create(day, category);

        var cut = RenderComponent<DataPointView>(p =>
            p.Add(x => x.Point, point)
        );

        point.ScaleIndex.Should().Be(null);
        cut.FindAll(".mud-toggle-item").Count.Should().Be(4);
        cut.FindAll(".mud-toggle-item-selected").Count.Should().Be(0);

        cut.FindAll(".mud-toggle-item")[1].Click();
        cut.FindAll(".mud-toggle-item")[1].ClassList.Should().Contain("mud-toggle-item-selected");
        point.ScaleIndex.Should().Be(1);

        cut.FindAll(".mud-toggle-item")[2].Click();
        cut.FindAll(".mud-toggle-item")[2].ClassList.Should().Contain("mud-toggle-item-selected");
        point.ScaleIndex.Should().Be(3);

        cut.FindAll(".mud-toggle-item")[3].Click();
        cut.FindAll(".mud-toggle-item")[3].ClassList.Should().Contain("mud-toggle-item-selected");
        point.ScaleIndex.Should().Be(5);

        cut.FindAll(".mud-toggle-item")[3].Click();
        cut.FindAll(".mud-toggle-item")[3].ClassList.Should().NotContain("mud-toggle-item-selected");
        point.ScaleIndex.Should().Be(null);
    }

    [Fact]
    public void Number()
    {
        var category = new DataPointCategory
        {
            Guid = Guid.NewGuid(),
            Type = PointType.Number,
        };

        var day = Day.Create(new(2024, 01, 01));
        var point = DataPoint.Create(day, category);

        var cut = RenderComponent<DataPointView>(p =>
            p.Add(x => x.Point, point)
        );

        point.Number.Should().Be(null);
        cut.Find("input").Input("321");
        point.Number.Should().Be(321);
    }

    [Fact]
    public void Text()
    {
        var category = new DataPointCategory
        {
            Guid = Guid.NewGuid(),
            Type = PointType.Text,
        };

        var day = Day.Create(new(2024, 01, 01));
        var point = DataPoint.Create(day, category);

        var cut = RenderComponent<DataPointView>(p =>
            p.Add(x => x.Point, point)
        );

        point.Text.Should().Be(null);
        cut.Find("input").Input("321");
        point.Text.Should().Be("321");
    }

    [Fact]
    public void Note()
    {
        var category = new DataPointCategory
        {
            Guid = Guid.NewGuid(),
            Type = PointType.Note,
        };

        var day = Day.Create(new(2024, 01, 01));
        var point = DataPoint.Create(day, category);
        point.Text = "Hello world";
        
        var layout = Render(
            @<MainLayout>
                <Body>
                    <DataPointView Point="point" />
                </Body>
            </MainLayout>);

        var cut = layout.FindComponent<DataPointView>();

        // Click the edit icon button
        cut.FindAll(".mud-icon-button")[0].Click();

        var noteEditor = layout.FindComponent<EditNoteDialog>();
        noteEditor.Find("textarea").Input("123");
        layout.Find(".submit-button").Click();

        point.Text.Should().Be("123");

        // Click the edit icon button again
        cut.FindAll(".mud-icon-button")[0].Click();

        noteEditor = layout.FindComponent<EditNoteDialog>();
        noteEditor.Find("textarea").Input("EXTRA TEXT THAT WILL BE DISCARDED");
        layout.Find(".cancel-button").Click();

        point.Text.Should().Be("123");
    }

    [Fact]
    public void Medication()
    {
        var category = new DataPointCategory
        {
            Guid = Guid.NewGuid(),
            Type = PointType.Medication,
            MedicationDose = 1,
        };

        var day = Day.Create(new(2024, 01, 01));
        var point = DataPoint.Create(day, category);
        point.Text = "Hello world";

        var layout = Render(
            @<MainLayout>
                <Body>
                    <DataPointView Point="point" />
                </Body>
            </MainLayout>);

        var cut = layout.FindComponent<DataPointView>();

        // Initial state.
        point.Bool.Should().Be(null);
        cut.FindAll(".mud-toggle-item").Count.Should().Be(2);
        cut.FindAll(".mud-toggle-item-selected").Count.Should().Be(0);

        // A changed dose should get reset to default when clicking No.
        point.MedicationDose--;

        cut.FindAll(".mud-toggle-item")[0].Click();
        cut.FindAll(".mud-toggle-item")[0].ClassList.Should().Contain("mud-toggle-item-selected");
        point.Bool.Should().Be(false);

        point.MedicationDose.Should().Be(point.Category.MedicationDose);

        cut.FindAll(".mud-toggle-item")[1].Click();
        cut.FindAll(".mud-toggle-item")[1].ClassList.Should().Contain("mud-toggle-item-selected");
        point.Bool.Should().Be(true);

        // A changed dose should get reset to default when unselecting.
        point.MedicationDose--;

        cut.FindAll(".mud-toggle-item")[1].Click();
        cut.FindAll(".mud-toggle-item")[1].ClassList.Should().NotContain("mud-toggle-item-selected");
        point.Bool.Should().Be(null);

        point.MedicationDose.Should().Be(point.Category.MedicationDose);
    }

    [Fact]
    public void MedicationEditDose()
    {
        var category = new DataPointCategory
        {
            Guid = Guid.NewGuid(),
            Type = PointType.Medication,
            MedicationUnit = "oz",
            MedicationDose = 11,
        };

        var day = Day.Create(new(2024, 01, 01));
        var point = DataPoint.Create(day, category);
        point.Text = "Hello world";
        point.MedicationDose = 22;

        var layout = Render(
           @<MainLayout>
                <Body>
                    <DataPointView Point="point" />
                </Body>
            </MainLayout>);

        var cut = layout.FindComponent<DataPointView>();

        // Initial state.
        point.Bool.Should().Be(null);
        cut.FindAll(".mud-toggle-item-selected").Count.Should().Be(0);

        // Change dose to empty via dialog.
        cut.Find(".mud-link").Click();
        var doseEditor = layout.FindComponent<EditDoseDialog>();
        doseEditor.Find("input").Input("");
        layout.Find(".submit-button").Click();

        // Empty dose resets to default and selects No.
        point.MedicationDose.Should().Be(point.Category.MedicationDose);
        cut.FindAll(".mud-toggle-item")[0].ClassList.Should().Contain("mud-toggle-item-selected");

        // Change dose via dialog.
        cut.Find(".mud-link").Click();
        doseEditor = layout.FindComponent<EditDoseDialog>();
        doseEditor.Find("input").Input("99");
        layout.Find(".submit-button").Click();

        // Submitting dose is the same as Yes.
        point.MedicationDose.Should().Be(99);
        cut.FindAll(".mud-toggle-item")[1].ClassList.Should().Contain("mud-toggle-item-selected");

        // Cancel dialog.
        cut.Find(".mud-link").Click();
        doseEditor = layout.FindComponent<EditDoseDialog>();
        doseEditor.Find("input").Input("88");
        layout.Find(".cancel-button").Click();

        // Same as before
        point.MedicationDose.Should().Be(99);
        cut.FindAll(".mud-toggle-item")[1].ClassList.Should().Contain("mud-toggle-item-selected");
    }

    [Fact]
    public void MedicationEditDoseDisabledWithNoUnit()
    {
        var category = new DataPointCategory
        {
            Guid = Guid.NewGuid(),
            Type = PointType.Medication,
            MedicationDose = 11,
        };

        var day = Day.Create(new(2024, 01, 01));
        var point = DataPoint.Create(day, category);

        var layout = Render(
           @<MainLayout>
                <Body>
                    <DataPointView Point="point" />
                </Body>
            </MainLayout>);

        var cut = layout.FindComponent<DataPointView>();

        cut.Find(".mud-link").ClassList.Should().Contain("mud-link-disabled");
    }

    [Fact]
    public void MedicationEditDoseDialogCloses()
    {
        var category = new DataPointCategory
        {
            Guid = Guid.NewGuid(),
            Type = PointType.Medication,
            MedicationUnit = "oz",
            MedicationDose = 11,
        };

        var day = Day.Create(new(2024, 01, 01));
        var point = DataPoint.Create(day, category);
        point.Text = "Hello world";
        point.MedicationDose = 22;

        var layout = Render(
            @<MainLayout>
                <Body>
                    <DataPointView Point="point" />
                </Body>
            </MainLayout>);

        var cut = layout.FindComponent<DataPointView>();

        layout.FindAll(".mud-dialog").Count.Should().Be(0);

        // Submit.
        cut.Find(".mud-link").Click();
        layout.FindAll(".mud-dialog").Count.Should().Be(1);
        layout.Find(".submit-button").Click();
        layout.FindAll(".mud-dialog").Count.Should().Be(0);

        // Cancel.
        cut.Find(".mud-link").Click();
        layout.FindAll(".mud-dialog").Count.Should().Be(1);
        layout.Find(".cancel-button").Click();
        layout.FindAll(".mud-dialog").Count.Should().Be(0);
    }

    [Fact]
    public void HeaderCategory()
    {
        var category = new DataPointCategory
        {
            Guid = Guid.NewGuid(),
            Name = "Hello World",
            Type = PointType.Text,
        };

        var day = Day.Create(new(2024, 01, 01));
        var point = DataPoint.Create(day, category);

        DataPointView.GetHeaderText(point).Should().Be("Hello World:");
    }

    [Fact]
    public void HeaderMedication()
    {
        var category = new DataPointCategory
        {
            Guid = Guid.NewGuid(),
            Name = "Hi",
            Type = PointType.Medication,
            MedicationUnit = "oz",
            MedicationDose = 10,
        };

        var day = Day.Create(new(2024, 01, 01));
        var point = DataPoint.Create(day, category);

        DataPointView.GetHeaderText(point).Should().Be("Hi 10oz:");
    }

    [Fact]
    public void HeaderMedication_ChangedDose()
    {
        var category = new DataPointCategory
        {
            Guid = Guid.NewGuid(),
            Name = "Hi",
            Type = PointType.Medication,
            MedicationUnit = "oz",
            MedicationDose = 10,
        };

        var day = Day.Create(new(2024, 01, 01));
        var point = DataPoint.Create(day, category);
        point.MedicationDose = 20;

        DataPointView.GetHeaderText(point).Should().Be("Hi 20oz*:");
    }

    [Fact]
    public void HeaderMedication_NoCategoryDose()
    {
        var category = new DataPointCategory
        {
            Guid = Guid.NewGuid(),
            Name = "Hi",
            Type = PointType.Medication,
            MedicationUnit = "oz",
            MedicationDose = null,
        };

        var day = Day.Create(new(2024, 01, 01));
        var point = DataPoint.Create(day, category);

        // No dose so don't show anything.
        DataPointView.GetHeaderText(point).Should().Be("Hi:");

        // If we specify a dose in the point it should show up in the header where the category's would have been.
        point.MedicationDose = 20;
        DataPointView.GetHeaderText(point).Should().Be("Hi 20oz*:");
    }

    [Fact]
    public void HeaderMedication_NoUnit()
    {
        var category = new DataPointCategory
        {
            Guid = Guid.NewGuid(),
            Name = "Hi",
            Type = PointType.Medication,
            MedicationUnit = null,
            MedicationDose = 10,
        };

        var day = Day.Create(new(2024, 01, 01));
        var point = DataPoint.Create(day, category);

        // No unit so don't show anything.
        DataPointView.GetHeaderText(point).Should().Be("Hi:");

        // If we specify a dose in the point it should still not show up.
        point.MedicationDose = 20;
        DataPointView.GetHeaderText(point).Should().Be("Hi:");
    }
}
