@namespace JournalApp.Tests
@inherits JaTestContext

@code {
    public override async Task InitializeAsync()
    {
        await base.InitializeAsync();

        AddDbContext();
        Services.GetService<AppDbSeeder>().SeedCategories();
    }

    [Fact]
    public void EditDialog_Open()
    {
        var dbf = Services.GetService<IDbContextFactory<AppDbContext>>();
        var guid = "0fb54aff-9ecc-4c17-bab5-b908b794cea9"; // Anxiety.

        var layout = Render(
    @<MainLayout>
        <Body>
            <ManageCategoriesPage />
        </Body>
    </MainLayout>
        );

        DataPointCategory Category()
        {
            using var db = dbf.CreateDbContext();
            return db.Categories.Single(c => c.Guid == new Guid(guid));
        }

        layout.Find($"#manage-category-{guid} > .manage-category-edit-button").Click();
        var editDialog = layout.FindComponent<EditCategoryDialog>();

        // Assert.
        Category().Name.Should().Be("Anxiety");
        editDialog.FindAll(".mud-input-text input")[0].GetAttribute("value").Should().Be("Anxiety");

        layout.Find(".submit-button").Click();
    }

    [Fact]
    public void EditDialog_UpdatesList()
    {
        var dbf = Services.GetService<IDbContextFactory<AppDbContext>>();
        var guid = "0fb54aff-9ecc-4c17-bab5-b908b794cea9"; // Anxiety.

        var layout = Render(
    @<MainLayout>
        <Body>
            <ManageCategoriesPage />
        </Body>
    </MainLayout>
        );

        DataPointCategory Category()
        {
            using var db = dbf.CreateDbContext();
            return db.Categories.Single(c => c.Guid == new Guid(guid));
        }

        layout.Find($"#manage-category-{guid} > .manage-category-edit-button").Click();

        Category().Name.Should().Be("Anxiety");
        layout.FindAll(".category-dialog .mud-input-text input")[0].Input("New name");

        // Submit changes and confirm they have changed on the main list.
        layout.Find(".category-dialog .submit-button").Click();
        layout.Find($"#manage-category-{guid} > .manage-category-edit-button").TextContent.Should().Be("New name");
    }

    [Fact(Skip = "Stub")]
    public void EditDialog_Delete() { }

    [Fact]
    public void AddNewCategory()
    {
        var layout = Render(
    @<MainLayout>
        <Body>
            <ManageCategoriesPage />
        </Body>
    </MainLayout>
        );

        // Initial state.
        layout.FindAll(".manage-category-edit-button").Count.Should().Be(13);

        // Open the dialog to create a new category.
        layout.Find(".add-category-button").Click();
        layout.Markup.Should().Contain("New category");

        // Set up the new category.
        layout.FindAll(".category-dialog .mud-input-text input")[0].Input("New name");

        // Submit changes and confirm there is a new category in the list.
        layout.Find(".category-dialog .submit-button").Click();
        layout.FindAll(".manage-category-edit-button").Count.Should().Be(14);
    }

    [Fact]
    public void AddNewMedication()
    {
        var layout = Render(
    @<MainLayout>
        <Body>
            <ManageCategoriesPage Group="Medications" />
        </Body>
    </MainLayout>
    );

        // Initial state.
        layout.FindAll(".manage-category-edit-button").Count.Should().Be(6);

        // Open the dialog to create a new category.
        layout.Find(".add-category-button").Click();
        layout.Markup.Should().Contain("New medication");

        // Set up the new category.
        layout.FindAll(".category-dialog .mud-input-text input")[0].Input("New name");

        // Submit changes and confirm there is a new category in the list.
        layout.Find(".category-dialog .submit-button").Click();
        layout.FindAll(".manage-category-edit-button").Count.Should().Be(7);
    }

    [Fact]
    public void ReadOnlyCannotBeEdited()
    {
        var guid = "d90d89fb-f5b9-47cf-ae4e-3ec0d635e783"; // Mood.

        var cut = Render(@<ManageCategoriesPage />);

        cut.Find($"#manage-category-{guid} > .manage-category-edit-button").HasAttribute("disabled").Should().BeTrue();
    }

    [Fact]
    public void CanChangeEnabled()
    {
        var dbf = Services.GetService<IDbContextFactory<AppDbContext>>();
        var guid = "0fb54aff-9ecc-4c17-bab5-b908b794cea9"; // Anxiety.

        DataPointCategory Category()
        {
            using var db = dbf.CreateDbContext();
            return db.Categories.Single(c => c.Guid == new Guid(guid));
        }

        var cut = Render(@<ManageCategoriesPage />);

        Category().Enabled.Should().BeFalse();
        cut.Find($"#manage-category-{guid} > .manage-category-enabled-switch input").Change(true);
        Category().Enabled.Should().BeTrue();
        cut.Find($"#manage-category-{guid} > .manage-category-enabled-switch input").Change(false);
        Category().Enabled.Should().BeFalse();
    }

    [Fact]
    public void MoveUpToTop()
    {
        var dbf = Services.GetService<IDbContextFactory<AppDbContext>>();
        var guid = "0fb54aff-9ecc-4c17-bab5-b908b794cea9"; // Anxiety.

        DataPointCategory Category()
        {
            using var db = dbf.CreateDbContext();
            return db.Categories.Single(c => c.Guid == new Guid(guid));
        }

        var cut = RenderComponent<ManageCategoriesPage>();

        for (int i = 6; i > 1; i--)
        {
            cut.Find($"#manage-category-{guid} > .manage-category-up-button").Click();
            Category().Index.Should().Be(i - 1);
        }

        cut.Find($"#manage-category-{guid} > .manage-category-up-button").HasAttribute("disabled").Should().BeTrue();
    }

    [Fact]
    [Description("Ensures the number of categories in the database per group match the number rendered")]
    public void ShowsCorrectCategoriesInGroup()
    {
        var dbf = Services.GetService<IDbContextFactory<AppDbContext>>();

        using var db = dbf.CreateDbContext();
        var categoryGuidsByGroup = db.Categories.Select(c => new { Group = c.Group, Guid = c.Guid }).GroupBy(x => x.Group).ToList();

        foreach (var x in categoryGuidsByGroup)
        {
            var cut = Render(@<ManageCategoriesPage Group="@x.Key" />);

            foreach (var y in x)
            {
                cut.FindAll($"#manage-category-{y.Guid}").Count.Should().Be(1);
            }
        }
    }
}
