@namespace JournalApp.Tests
@using Microsoft.Extensions.Logging.Abstractions
@inherits JaTestContext

@code {
    public override async Task InitializeAsync()
    {
        await base.InitializeAsync();

        AddDbContext();

        var dbf = Services.GetService<IDbContextFactory<AppDbContext>>();
        var appDbSeeder = new AppDbSeeder(new NullLogger<AppDbSeeder>(), dbf);

        var dates = new DateOnly(2023, 01, 01).DatesTo(new(2024, 01, 01));
        appDbSeeder.SeedCategories();
        appDbSeeder.SeedDays(dates);
    }

    [Fact]
    public void SwitchYear()
    {
        var cut = RenderComponent<CalendarPage>(p =>
        p.Add(x => x.OpenToDateString, "20000101")
    );

        cut.WaitForAssertion(() => cut.Find(".calendar-view"));

        // Back.
        var year = cut.Instance.SelectedYear;
        cut.Find(".switcher .previous-button").Click();
        cut.Instance.SelectedYear.Should().Be(year - 1);

        // Next.
        year = cut.Instance.SelectedYear;
        cut.Find(".switcher .next-button").Click();
        cut.Instance.SelectedYear.Should().Be(year + 1);

        // Current.
        cut.Instance.SelectedYear.Should().NotBe(DateTime.Now.Year);
        cut.Find(".year-button").Click();
        cut.Instance.SelectedYear.Should().Be(DateTime.Now.Year);

        // Can't go further.
        year = cut.Instance.SelectedYear;
        cut.Find(".switcher .next-button").HasAttribute("disabled").Should().BeTrue();
        cut.Find(".switcher .next-button").Click();
        cut.Instance.SelectedYear.Should().Be(year);
    }

    [Fact]
    public async Task CalendarViewMoodBlockCount()
    {
        var cut = RenderComponent<CalendarPage>(p =>
        p.Add(x => x.OpenToDateString, "20230101")
    );
        cut.Instance.SelectedYear.Should().Be(2023);

        // Wait for calendar to load.
        cut.WaitForAssertion(() => cut.Find(".calendar-view"));
        cut.FindAll(".calendar-month").Count.Should().Be(12);

        var db = Services.GetService<AppDbContext>();
        var calendarService = Services.GetService<CalendarService>();
        var gridYear = await calendarService.CreateGridYear(cut.Instance.SelectedYear);
        var filledDays = gridYear.GridMonths.Sum(m => m.GridDays.Count(d => d.Emoji != null)); // Random seeding skips some days and grid days include offsets.

        // 2023, fully filled out leap year.
        cut.FindAll(".calendar-view .calendar-day-cell > .calendar-day-with-mood").Count.Should().Be(filledDays);

        cut.Find(".switcher .previous-button").Click();
        cut.Instance.SelectedYear.Should().Be(2022);

        // 2022, none filled.
        cut.FindAll(".calendar-view .calendar-day-cell > .calendar-day-with-mood").Count.Should().Be(0);
    }

    [Fact]
    public void CalendarViewRespectsFirstDay()
    {
        var _culture = (CultureInfo)CultureInfo.CurrentCulture.Clone();
        _culture.DateTimeFormat.FirstDayOfWeek = DayOfWeek.Wednesday;
        Thread.CurrentThread.CurrentCulture = _culture;

        var cut = RenderComponent<CalendarPage>(p =>
        p.Add(x => x.OpenToDateString, "20230101")
    );
        cut.Instance.SelectedYear.Should().Be(2023);

        // Wait for calendar to load.
        cut.WaitForAssertion(() => cut.Find(".calendar-view"));

        var weekHeaders = cut.FindAll(".calendar-week-row > .calendar-day-cell");
        weekHeaders[0].TextContent.Should().Be("We");
        weekHeaders[1].TextContent.Should().Be("Th");
        weekHeaders[2].TextContent.Should().Be("Fr");
        weekHeaders[3].TextContent.Should().Be("Sa");
        weekHeaders[4].TextContent.Should().Be("Su");
        weekHeaders[5].TextContent.Should().Be("Mo");
        weekHeaders[6].TextContent.Should().Be("Tu");
    }

    [Fact]
    public void ChangePalette()
    {
        var layout = Render(
    @<MainLayout>
        <Body>
            <CalendarPage OpenToDateString="20230101" />
        </Body>
    </MainLayout>);

        var preferenceService = Services.GetService<PreferenceService>();
        var initialColor = preferenceService.PrimaryColor;

        layout.Find(".pick-palette").Click();

        // Click a color.
        var overlay = layout.Find(".color-picker .mud-dialog-content .mud-picker-color-overlay-black .mud-picker-color-overlay");
        overlay.PointerDown(new PointerEventArgs { OffsetX = 235, OffsetY = 18 });
        overlay.PointerUp(new PointerEventArgs { OffsetX = 235, OffsetY = 18 });

        // Close dialog.
        layout.Find(".mud-overlay-dialog").Click();
        layout.WaitForAssertion(() => layout.FindAll(".mud-overlay-dialog").Count.Should().Be(0));

        // Color should have changed.
        preferenceService.PrimaryColor.Should().NotBe(initialColor);
    }

    [Fact]
    [Description("Are the number of years, and months in the grid correct?")]
    public void YearsAndMonths()
    {
        const int year = 2023;
        var gridYear = new GridYear(year, CultureInfo.InvariantCulture, []);

        Assert.Equal(12, gridYear.GridMonths.Count);

        for (var i = 0; i < gridYear.GridMonths.Count; i++)
        {
            var gridMonth = gridYear.GridMonths[i];

            Assert.Equal(year, gridMonth.Year);
            Assert.Equal(i + 1, gridMonth.Month);
        }
    }

    [Fact]
    [Description("Are the number of days in the grid correct with no unnecessary rows?")]
    public void GridDays()
    {
        const int year = 2023;
        var gridYear = new GridYear(year, CultureInfo.InvariantCulture, []);

        var rowCounts = new List<int>()
        {
            35, // January.
            35, // February.
            35, // March.
            42, // April.
            35, // May.
            35, // June.
            42, // July.
            35, // August.
            35, // September.
            35, // October.
            35, // November
            42, // December.
        };

        Assert.Equal(rowCounts, gridYear.GridMonths.Select(m => m.GridDays.Count));
    }

    [Fact]
    [Description("Are the days in the week as expected on an invariant culture?")]
    public void DaysOfWeekInvariant()
    {
        var gridYear = new GridYear(2023, CultureInfo.InvariantCulture, []);

        for (var i = 0; i < gridYear.GridMonths.Count; i++)
        {
            var gridMonth = gridYear.GridMonths[i];

            Assert.Equal([
                DayOfWeek.Sunday,
            DayOfWeek.Monday,
            DayOfWeek.Tuesday,
            DayOfWeek.Wednesday,
            DayOfWeek.Thursday,
            DayOfWeek.Friday,
            DayOfWeek.Saturday,
        ], gridMonth.DaysOfWeek);
        }
    }
}
