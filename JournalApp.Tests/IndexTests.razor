@namespace JournalApp.Tests
@inherits JaTestContext

@code {
    public override async Task InitializeAsync()
    {
        await base.InitializeAsync();

        AddDbContext();
        Services.GetService<AppDbSeeder>().SeedCategories();
    }

    [Fact]
    public void CanSwitchDays()
    {
        var layout = Render(
    @<MainLayout>
        <Body>
            <Index />
        </Body>
    </MainLayout>
    );

        var nowDayNumber = DateOnly.FromDateTime(DateTime.Now).DayNumber;
        var selectedDayNumber = () => int.Parse(layout.Find(".switcher").GetAttribute("data-current-day"));

        selectedDayNumber().Should().Be(nowDayNumber);

        layout.Find(".day-switcher-back").Click();
        selectedDayNumber().Should().Be(nowDayNumber - 1);

        layout.Find(".day-switcher-forward").Click();
        selectedDayNumber().Should().Be(nowDayNumber);
    }

    [Fact]
    public void CannotGoPastTomorrow()
    {
        var layout = Render(
    @<MainLayout>
        <Body>
            <Index />
        </Body>
    </MainLayout>
        );

        var nowDayNumber = DateOnly.FromDateTime(DateTime.Now).DayNumber;
        var selectedDayNumber = () => int.Parse(layout.Find(".switcher").GetAttribute("data-current-day"));

        // We can go to tomorrow.
        layout.Find(".day-switcher-forward").HasAttribute("disabled").Should().BeFalse();
        layout.Find(".day-switcher-forward").Click();
        selectedDayNumber().Should().Be(nowDayNumber + 1);

        // We cannot go past tomorrow
        layout.Find(".day-switcher-forward").HasAttribute("disabled").Should().BeTrue();
        layout.Find(".day-switcher-forward").Click();
        selectedDayNumber().Should().Be(nowDayNumber + 1);
    }

    [Fact(Skip = "TBD")]
    public void DataIsSavedWhileSwitchingDays()
    {
        var layout = Render(
    @<MainLayout>
        <Body>
            <Index />
        </Body>
    </MainLayout>
    );

        // Set up the exact day, category, and point we will be asserting.
        // var dbf = Services.GetService<IDbContextFactory<AppDbContext>>();
        // using var db = dbf.CreateDbContext();
        // var day = db.Days.Single(d => d.Date == new DateOnly(2023, 01, 01));
        // var weightCategoryGuid = "480dc07d-1330-486f-9b30-ec83a3d4e6f0";
        // var weightPoint = db.Points.Single(p => p.Day == day && p.Category.Guid == new Guid(weightCategoryGuid));
        // var weightInput = () => layout.Find($".data-point-container[data-category-guid=\"{weightCategoryGuid}\"] .data-point-view input");
        // var initialWeight = weightInput().GetAttribute("value");

        var weightInput = () => layout.Find($".data-point-container[data-category-guid=\"480dc07d-1330-486f-9b30-ec83a3d4e6f0\"] .data-point-view input");

        var initialWeight = weightInput().GetAttribute("value");

        // Change the value so we can test if it is saved. -1 will never be chosen randomly.
        weightInput().Input("-1");
        weightInput().GetAttribute("value").Should().Be("-1");

        // Go back then forward to make sure the data is saved.
        layout.Find(".day-switcher-back").Click();
        weightInput().GetAttribute("value").Should().NotBe("-1");
        layout.Find(".day-switcher-forward").Click();

        // Assert that the weight is back to it's changed value from the original day.
        weightInput().GetAttribute("value").Should().Be("-1");
    }

    [Theory]
    [Description("Checks if the notes group is visible depending on the user's preference")]
    [InlineData(true)]
    [InlineData(false)]
    public void HideTodaysNotes(bool hideNotes)
    {
        var preferences = Services.GetService<PreferenceService>();
        preferences.HideNotes = hideNotes;

        var layout = Render(
    @<MainLayout>
        <Body>
            <Index />
        </Body>
    </MainLayout>
        );

        layout.FindAll(".data-point-group").Count.Should().Be(hideNotes ? 2 : 3);
    }

    [Fact]
    public async Task MedicationDoseHeaderLink_CanEditDose()
    {
        var dbf = Services.GetService<IDbContextFactory<AppDbContext>>();
        using var db = await dbf.CreateDbContextAsync();

        // Create a medication category with a unit
        var category = new DataPointCategory
        {
            Guid = Guid.NewGuid(),
            Name = "TestMed",
            Type = PointType.Medication,
            MedicationUnit = "mg",
            MedicationDose = 10,
            Enabled = true,
            Group = "Medications"
        };
        db.Categories.Add(category);
        await db.SaveChangesAsync();

        var layout = Render(
            @<MainLayout>
                <Body>
                    <Index />
                </Body>
            </MainLayout>);

        // Find the medication header link (the dose part should be clickable)
        var headerLinks = layout.FindAll(".data-point-header .mud-link");
        headerLinks.Count.Should().BeGreaterThan(0, "there should be at least one medication dose link");

        // Click the dose link to open the edit dialog
        headerLinks[0].Click();
        
        // Dialog should be open
        layout.FindAll(".mud-dialog").Count.Should().Be(1);
        
        var doseEditor = layout.FindComponent<EditDoseDialog>();
        doseEditor.Find("input").Input("25");
        layout.Find(".submit-button").Click();

        // Dialog should be closed
        layout.FindAll(".mud-dialog").Count.Should().Be(0);
    }

    [Fact]
    public async Task MedicationDoseHeaderLink_DialogCanBeCanceled()
    {
        var dbf = Services.GetService<IDbContextFactory<AppDbContext>>();
        using var db = await dbf.CreateDbContextAsync();

        var category = new DataPointCategory
        {
            Guid = Guid.NewGuid(),
            Name = "TestMed2",
            Type = PointType.Medication,
            MedicationUnit = "mg",
            MedicationDose = 10,
            Enabled = true,
            Group = "Medications"
        };
        db.Categories.Add(category);
        await db.SaveChangesAsync();

        var layout = Render(
            @<MainLayout>
                <Body>
                    <Index />
                </Body>
            </MainLayout>);

        var headerLinks = layout.FindAll(".data-point-header .mud-link");
        
        // Click to open dialog
        headerLinks[0].Click();
        layout.FindAll(".mud-dialog").Count.Should().Be(1);

        // Change value but cancel
        var doseEditor = layout.FindComponent<EditDoseDialog>();
        doseEditor.Find("input").Input("99");
        layout.Find(".cancel-button").Click();

        // Dialog should be closed
        layout.FindAll(".mud-dialog").Count.Should().Be(0);
    }

    [Fact]
    public async Task MedicationDoseHeaderLink_NotVisibleWithoutUnit()
    {
        var dbf = Services.GetService<IDbContextFactory<AppDbContext>>();
        using var db = await dbf.CreateDbContextAsync();

        // Create medication without a unit
        var category = new DataPointCategory
        {
            Guid = Guid.NewGuid(),
            Name = "TestMedNoUnit",
            Type = PointType.Medication,
            MedicationUnit = null, // No unit
            MedicationDose = 10,
            Enabled = true,
            Group = "Medications"
        };
        db.Categories.Add(category);
        await db.SaveChangesAsync();

        var layout = Render(
            @<MainLayout>
                <Body>
                    <Index />
                </Body>
            </MainLayout>);

        // Find all data point containers
        var containers = layout.FindAll(".data-point-container");
        
        // Find the one for our medication
        var medContainer = containers.FirstOrDefault(c => 
            c.GetAttribute("data-category-guid") == category.Guid.ToString());
        
        medContainer.Should().NotBeNull("medication container should exist");
        
        // The header should NOT have a link since there's no unit
        var headerLinks = medContainer.QuerySelectorAll(".data-point-header .mud-link");
        headerLinks.Count().Should().Be(0, "medication without unit should not have a clickable dose link");
    }
}
