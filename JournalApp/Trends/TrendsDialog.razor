@namespace JournalApp.Trends
@inject AppDbContext db
@inject ILogger<TrendsDialog> logger
@inject IDialogService DialogService
@inject KeycodeService KeycodeService

<MudDialog DefaultFocus="DefaultFocus.None">
	<TitleContent>
		<div class="page-header">
			<MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="Submit" />

			<MudText Typo="Typo.h6">Trends</MudText>
		</div>

		<TrendsSwitcher @bind-SelectedDate="SelectedDate" />
	</TitleContent>

	<DialogContent>
		<div class="trends-container">
			@foreach (var group in FilteredCategories.GroupBy(x => x.Type))
			{
				@foreach (var category in group)
				{
					<TrendView Category="category" DayPoints="_points[category]" />
				}
			}
		</div>
	</DialogContent>
</MudDialog>

@code {
	Dictionary<DataPointCategory, IReadOnlyDictionary<int, DataPoint>> _points;
	DateOnly _selectedDate;

	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	[Parameter]
	public DateOnly OpenToDate { get; set; }

	public IEnumerable<DataPointCategory> FilteredCategories => db.Categories.Where(x => x.Enabled && !x.IsDeleted);

	public DateOnly SelectedDate
	{
		get => _selectedDate;
		set
		{
			_selectedDate = value;

			// Organize data points by category and day of month.
			_points = new();
			foreach (var category in FilteredCategories)
			{
				var dayPoints = new Dictionary<int, DataPoint>();

				// Each day has either a matching data point or null.
				for (int day = 0; day < DateTime.DaysInMonth(value.Year, value.Month); day++)
				{
					var point = category.DataPoints.FirstOrDefault(p => p.Day.Date.Year == value.Year && p.Day.Date.Month == value.Month && p.Day.Date.Day == day);
					dayPoints.Add(day, point);
				}

				_points.Add(category, dayPoints);
			}
		}
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();

		KeycodeService.SubscribeOnceToBackButtonPressed(() => Submit());

		logger.LogInformation($"Opened to {OpenToDate}");
		SelectedDate = new(OpenToDate.Year, OpenToDate.Month, 1);
	}

	void Submit()
	{
		MudDialog.Close(DialogResult.Ok(true));
	}
}