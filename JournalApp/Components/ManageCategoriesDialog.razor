@namespace JournalApp
@inject ApplicationDbContext db
@inject IDialogService DialogService

<MudDialog OnBackdropClick="Submit">
	<DialogContent>
		<MudStack>
			@foreach (var c in db.Categories.Where(c => c.Group == Group).OrderBy(c => c.Index))
			{
				<div class="d-flex align-center" style="gap:1.5em;">
					<MudIconButton Icon="@Icons.Material.Filled.ArrowUpward" OnClick="async () => await MoveUp(c)" />

					<MudSwitch @bind-Checked="c.Enabled" Color="Color.Primary" Class="mr-n2" />

					<MudTextField T="string" Label="Name" @bind-Text="c.Name" />


					@if (Group == "Medications")
					{
						<MudTextField T="string" Label="Dose Unit" @bind-Text="c.MedicationUnit" />

						<MudSwitch Label="Every day" @bind-Checked="c.MedicationEveryDay" Color="Color.Primary" />
					}

					<MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async () => await Edit(c)" />
				</div>
			}
		</MudStack>
	</DialogContent>

	<DialogActions>
		<MudButton Color="Color.Secondary" OnClick="New">New...</MudButton>

		<MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
	</DialogActions>
</MudDialog>

@code {
	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	[Parameter]
	public string Group { get; set; }

	async Task MoveUp(DataPointCategory category)
	{
		var anyAbove = false;
		foreach (var replaced in db.Categories.Where(x => x.Index == category.Index - 1))
		{
			anyAbove = true;
			replaced.Index++;
			await db.SaveChangesAsync();
		}

		if (anyAbove)
			category.Index--;

		await db.SaveChangesAsync();
	}

	async Task Edit(DataPointCategory category)
	{
		var parameters = new DialogParameters<EditCategoryDialog> { { x => x.Group, Group }, { x => x.Category, category } };
		var result = await DialogService.Show<EditCategoryDialog>($"Edit {(Group == "Medications" ? "medication" : "category")}", parameters).Result;

		if (result.Canceled)
			return;

		category = (DataPointCategory)result.Data;
		await db.SaveChangesAsync();
	}

	async Task New()
	{
		var parameters = new DialogParameters<EditCategoryDialog> { { x => x.Group, Group } };
		var result = await DialogService.Show<EditCategoryDialog>($"New {(Group == "Medications" ? "medication" : "category")}", parameters).Result;

		if (result.Canceled)
			return;

		var newCategory = (DataPointCategory)result.Data;
		var groupCategories = db.Categories.Where(x => x.Group == Group);
		if (groupCategories.Any())
			newCategory.Index = groupCategories.Max(x => x.Index) + 1;

		db.Categories.Add(newCategory);
		await db.SaveChangesAsync();
	}

	async Task Submit()
	{
		await db.SaveChangesAsync();
		MudDialog.Close(DialogResult.Ok(true));
	}
}