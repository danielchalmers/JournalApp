@namespace JournalApp
@inject ApplicationDbContext db
@inject IDialogService DialogService

<MudDialog>
	<DialogContent>
		<MudDataGrid Items="db.Categories.Where(c => c.Group == Group)" SortMode="SortMode.None" ReadOnly="false" EditMode="DataGridEditMode.Cell" Dense="true" Elevation="0">
			<Columns>
				<PropertyColumn Property="x => x.Name" />

				<PropertyColumn Property="x => x.Index" />

				<PropertyColumn Property="x => x.Enabled">
					<EditTemplate>
						<MudSwitch @bind-Checked="context.Item.Enabled" Color="Color.Primary" />
					</EditTemplate>
				</PropertyColumn>

				@if (Group == null)
				{
					<PropertyColumn Property="x => x.Type">
						<EditTemplate>
							<MudSelect @bind-Value="context.Item.Type" Required Margin="Margin.Dense">
									@foreach (var item in Enum.GetValues<DataType>())
								{
									<MudSelectItem Value="@item">@item</MudSelectItem>
								}
							</MudSelect>
						</EditTemplate>
					</PropertyColumn>
				}
				else if (Group == "Medications")
				{
					<PropertyColumn Property="x => x.MedicationUnit" Title="Unit" />

					<PropertyColumn Property="x => x.MedicationEveryDay" Title="Every day">
						<EditTemplate>
							<MudSwitch @bind-Checked="context.Item.MedicationEveryDay" Color="Color.Primary" />
						</EditTemplate>
					</PropertyColumn>
				}
			</Columns>
		</MudDataGrid>
	</DialogContent>

	<DialogActions>
		<MudButton Color="Color.Secondary" OnClick="New">New @(Group == "Medications" ? "medication" : "category")...</MudButton>

		<MudButton Color="Color.Primary" OnClick="Submit">Save changes</MudButton>
	</DialogActions>
</MudDialog>

@code {
	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	[Parameter]
	public string Group { get; set; }

	async Task New()
	{
		var parameters = new DialogParameters { { nameof(NewCategoryDialog.Group), Group } };
		var result = await DialogService.Show<NewCategoryDialog>($"New {(Group == "Medications" ? "medication" : "category")}", parameters).Result;

		if (result.Canceled)
			return;

		var newCategory = (DataPointCategory)result.Data;
		var groupCategories = db.Categories.Where(x => x.Group == Group);
		if (groupCategories.Any())
			newCategory.Index = groupCategories.Max(x => x.Index) + 1;

		db.Categories.Add(newCategory);
		await db.SaveChangesAsync();
	}

	async Task Submit()
	{
		await db.SaveChangesAsync();
		MudDialog.Close(DialogResult.Ok(true));
	}
}