@namespace JournalApp
@inject ApplicationDbContext db
@inject IDialogService DialogService
@inject KeycodeService KeycodeService

<MudDialog DefaultFocus="DefaultFocus.Element" OnBackdropClick="Submit">
	<TitleContent>
		<div class="page-header">
			<MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="Submit" />

			<MudText Typo="Typo.h6">Manage @(Group == "Medications" ? "medications" : "categories")</MudText>

			<MudSpacer />

			<MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="New" />
		</div>
	</TitleContent>

	<DialogContent>
		<MudStack Class="mh-n12" Style="min-height:100vh;padding-bottom:15em;">
			@foreach (var c in db.Categories.Where(c => c.Group == Group).OrderBy(c => c.Index))
			{
				<div class="d-flex align-center" style="gap:0.1em;">
					<MudIconButton Icon="@Icons.Material.Filled.ArrowUpward" OnClick="async () => await MoveUp(c)" Edge="Edge.Start" Disabled="c.Index <= 1" />

					<MudSwitch @bind-Checked="c.Enabled" Color="Color.Primary" Class="mr-n2" />

					<MudTextField T="string" Label="Name" @bind-Text="c.Name" Disabled />

						<MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async () => await Edit(c)" Edge="Edge.End" Disabled="c.ReadOnly" />
					</div>
			}
		</MudStack>
	</DialogContent>
</MudDialog>

@code {
	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	[Parameter]
	public string Group { get; set; }

	protected override void OnInitialized()
	{
		base.OnInitialized();

		KeycodeService.SubscribeOnceToBackButtonPressed(async () => await Submit());
	}

	async Task MoveUp(DataPointCategory category)
	{
		await db.MoveCategoryUp(category);
		Debug.WriteLine($"Moved category up: {category}, {category.Guid}");
	}

	async Task Edit(DataPointCategory category)
	{
		var parameters = new DialogParameters<EditCategoryDialog> { { x => x.Group, Group }, { x => x.Category, category } };
		var result = await DialogService.Show<EditCategoryDialog>(parameters).Result;

		if (result.Canceled)
			return;

		if (string.IsNullOrWhiteSpace(category.Name))
		{
			Debug.WriteLine($"Deleting category: {category}, {category.Guid}");
			db.Categories.Remove(category);
		}
		else
		{
			Debug.WriteLine($"Edited category: {category}, {category.Guid}");
		}

		await db.SaveChangesAsync();
	}

	async Task New()
	{
		var parameters = new DialogParameters<EditCategoryDialog> { { x => x.Group, Group } };
		var result = await DialogService.Show<EditCategoryDialog>(parameters).Result;

		if (result.Canceled)
			return;

		var newCategory = (DataPointCategory)result.Data;

		if (string.IsNullOrWhiteSpace(newCategory.Name))
		{
			Debug.WriteLine($"Not adding new category with empty name");
		}
		else
		{
			await db.AddCategory(newCategory);
			Debug.WriteLine($"Added new category <{newCategory}>");
		}
	}

	async Task Submit()
	{
		await db.SaveChangesAsync();
		MudDialog.Close(DialogResult.Ok(true));
	}
}