@namespace JournalApp
@inject AppDbContext db
@inject ILogger<ManageCategoriesDialog> logger
@inject IDialogService DialogService
@inject KeycodeService KeycodeService

<MudDialog DefaultFocus="DefaultFocus.Element">
	<TitleContent>
		<div class="page-header">
			<MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="Submit" />

			<MudText Typo="Typo.h6">@(Group == null ? "Categories" : Group)</MudText>

			<MudSpacer />

			<MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="New" />
		</div>
	</TitleContent>

	<DialogContent>
		@if (!Categories.Any())
		{
			<MudText Align="Align.Center">Use the plus button in the top right to add a new one.</MudText>
		}
		else
		{
			<MudStack Spacing="1">
				@foreach (var c in Categories.OrderBy(c => c.Index))
				{
					<div class="category-view-compact">
						<MudIconButton Icon="@Icons.Material.Filled.ArrowUpward" OnClick="async () => await MoveUp(c)" Edge="Edge.Start" Disabled="c.Index <= 1" />

						<MudSwitch @bind-Checked="c.Enabled" Color="Color.Primary" Style="margin-right: -0.125em;" />

						<MudButton Variant="Variant.Text" OnClick="async () => await Edit(c)" Disabled="c.ReadOnly" StartIcon="@Icons.Material.Filled.Edit" Style="white-space: nowrap">@c.Name</MudButton>
						</div>
				}
			</MudStack>
		}
	</DialogContent>
</MudDialog>

@code {
	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	[Parameter]
	public string Group { get; set; }

	public IQueryable<DataPointCategory> Categories => db.Categories.Where(c => c.Group == Group && !c.Deleted);

	protected override void OnInitialized()
	{
		base.OnInitialized();

		KeycodeService.SubscribeOnceToBackButtonPressed(async () => await Submit());
	}

	async Task MoveUp(DataPointCategory category)
	{
		await db.MoveCategoryUp(category);
		logger.LogInformation($"Moved category up: {category}, {category.Guid}");
	}

	async Task Edit(DataPointCategory category)
	{
		var parameters = new DialogParameters<EditCategoryDialog> { { x => x.Group, Group }, { x => x.Category, category } };
		var result = await DialogService.Show<EditCategoryDialog>(parameters).Result;

		if (result.Canceled)
			return;

		logger.LogInformation($"Edited category: {category}, {category.Guid}");

		if (category.Deleted)
		{
			logger.LogInformation("Category was deleted, so now we're going to fix indexes.");
			await db.FixCategoryIndexes();
		}

		await db.SaveChangesAsync();
	}

	async Task New()
	{
		var parameters = new DialogParameters<EditCategoryDialog> { { x => x.Group, Group } };
		var result = await DialogService.Show<EditCategoryDialog>(parameters).Result;

		if (result.Canceled)
			return;

		var newCategory = (DataPointCategory)result.Data;

		if (string.IsNullOrWhiteSpace(newCategory.Name))
		{
			logger.LogInformation($"Not adding new category with empty name");
		}
		else
		{
			await db.AddCategory(newCategory);
			logger.LogInformation($"Added new category <{newCategory}>");
		}
	}

	async Task Submit()
	{
		await db.SaveChangesAsync();
		MudDialog.Close(DialogResult.Ok(true));
	}
}