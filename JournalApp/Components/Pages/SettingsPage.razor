@namespace JournalApp
@page "/settings"
@implements IDisposable
@inject ILogger<SettingsPage> logger
@inject KeyEventService KeyEventService
@inject NavigationManager NavigationManager
@inject AppDataService AppDataService
@inject IDialogService DialogService

@if (_isBusy)
{
	<div class="d-flex justify-center">
		<MudProgressCircular Color="Color.Primary" Style="height:33vw;width:33vw;margin-top:10vh;" Indeterminate="true" />
	</div>
}
else
{
	<div class="page-title">
		<div class="page-header">
			<MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Title="Back" OnClick="Close" />

			<MudText Typo="Typo.h6">JournalApp v@(ThisAssembly.AssemblyFileVersion)</MudText>
		</div>
	</div>

	<div class="page-body">
		<div class="settings-group-list">
			<div class="settings-group">
				<MudText Typo="Typo.h4">Personalization</MudText>

				<MudButton StartIcon="@Icons.Material.Filled.HealthAndSafety" OnClick="SetUpSafetyPlan" Variant="Variant.Outlined" FullWidth>Set Up Safety Plan</MudButton>
			</div>

			<div class="settings-group">
				<MudText Typo="Typo.h4">Data & backups</MudText>

				<MudButton StartIcon="@Icons.Material.Filled.Upload" OnClick="StartExport" Variant="Variant.Outlined" FullWidth>Export</MudButton>

				@if (DeviceInfo.Current.Platform == DevicePlatform.WinUI)
				{
					<MudButton StartIcon="@Icons.Material.Filled.Download" OnClick="PickAndStartImport" Variant="Variant.Outlined" FullWidth>Import</MudButton>
				}
			</div>

			<div class="settings-group">
				<MudText Typo="Typo.h4">Credits</MudText>

				<MudTextField T="string" Text="@CreditsText" AutoGrow ReadOnly DisableUnderLine />
			</div>
		</div>
	</div>
}

@code {
	bool _isBusy;

	public string CreditsText { get; private set; }

	protected override async Task OnInitializedAsync()
	{
		CreditsText = await GetCreditsText();

		await base.OnInitializedAsync();

		KeyEventService.Entered(Close);

		if (App.ActivatedFilePath != null)
			await StartImport();
	}

	void SetUpSafetyPlan()
	{
		logger.LogInformation("Setting up Safety Plan");
		NavigationManager.NavigateTo($"/safetyplan", false, true);
	}

	async Task PickAndStartImport()
	{
		var pickResult = await FilePicker.Default.PickAsync();

		if (pickResult == null)
			return;

		App.ActivatedFilePath = pickResult.FullPath;

		await StartImport();
	}

	async Task StartImport()
	{
		try
		{
			_isBusy = true;
			StateHasChanged();

			var path = App.ActivatedFilePath;
			await AppDataService.StartImportWizard(DialogService, App.ActivatedFilePath);
		}
		finally
		{
			App.ActivatedFilePath = null;
			_isBusy = false;
		}
	}

	async Task StartExport()
	{
		try
		{
			_isBusy = true;
			StateHasChanged();

			await AppDataService.StartExportWizard(DialogService);
		}
		finally
		{
			_isBusy = false;
		}
	}

	public async Task<string> GetCreditsText()
	{
		logger.LogDebug("Getting credits stream");

		using var stream = await FileSystem.OpenAppPackageFileAsync("Credits.txt");
		using var reader = new StreamReader(stream);

		logger.LogDebug("Reading credits as text");
		return reader.ReadToEnd();
	}

	void Close()
	{
		NavigationManager.NavigateTo("/", false, true);
	}

	public void Dispose()
	{
		KeyEventService.Exited();
	}
}