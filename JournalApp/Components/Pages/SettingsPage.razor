@namespace JournalApp
@page "/settings"
@implements IDisposable
@inherits JaPage
@inject ILogger<SettingsPage> logger
@inject AppDataService AppDataService
@inject IFilePicker FilePicker

@if (_busy)
{
    @* TODO: Replace with separate page so we can change state of inline fields and have it updated properly in settings *@
    <div class="d-flex justify-center">
        <MudProgressCircular Color="Color.Primary" Style="height:33vw;width:33vw;margin-top:10vh;" Indeterminate="true" />
    </div>
}
else
{
    <div class="page-title">
        <div class="page-header">
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Title="Back" OnClick="Close" />

            <MudText Typo="Typo.h6">Settings</MudText>
        </div>
    </div>

    <div class="page-body">
        <div class="settings-group-list">
            <div class="settings-group">
                <MudText Typo="Typo.h4">Personalization</MudText>

                <MudRadioGroup T="AppTheme" Value="AppThemeService.SelectedAppTheme" ValueChanged="SelectedAppThemeChanged">
                    <MudRadio Value="@(AppTheme.Unspecified)">System</MudRadio>
                    <MudRadio Value="@(AppTheme.Light)">Light</MudRadio>
                    <MudRadio Value="@(AppTheme.Dark)">Dark</MudRadio>
                </MudRadioGroup>

                <MudCheckBox @bind-Value="HideNotes">Hide "Today's notes"</MudCheckBox>

                <MudButton StartIcon="@Icons.Material.Filled.HealthAndSafety" OnClick="SetUpSafetyPlan" Variant="Variant.Outlined" FullWidth>Set Up Safety Plan</MudButton>
            </div>

            <div class="settings-group">
                <MudText Typo="Typo.h4">Data & backups</MudText>

                <MudButton StartIcon="@Icons.Material.Filled.Upload" OnClick="StartExport" Variant="Variant.Outlined" FullWidth>Export</MudButton>

                <MudButton StartIcon="@Icons.Material.Filled.Download" OnClick="PickAndStartImport" Variant="Variant.Outlined" FullWidth>Import</MudButton>
            </div>

            <div class="settings-group">
                <MudText Typo="Typo.h4">About</MudText>

                <MudText>JournalApp @(ThisAssembly.AssemblyInformationalVersion)</MudText>
                <MudText>@($"{DeviceInfo.Current.Platform} {DeviceInfo.Current.VersionString}")</MudText>

                <MudLink Href="@(Feedback.GenerateLink())">Send feedback by email</MudLink>
                <MudLink Href="https://github.com/danielchalmers/JournalApp/issues">Send feedback on GitHub</MudLink>
                <MudLink Href="https://play.google.com/store/apps/details?id=com.danielchalmers.journalapp">View on Play Store</MudLink>
                <MudLink Href="https://github.com/danielchalmers/JournalApp">View source code</MudLink>
            </div>

            <div class="settings-group">
                <MudText Typo="Typo.h4">Credits</MudText>

                <MudTextField T="string" Text="@CreditsText" AutoGrow ReadOnly DisableUnderLine />
            </div>
        </div>
    </div>
}

@code {
    bool _leaving;
    bool _busy;

    public string CreditsText { get; private set; }

    public bool HideNotes
    {
        get => Preferences.Get("hide_notes", false);
        set => Preferences.Set("hide_notes", value);
    }

    protected override async Task OnInitializedAsync()
    {
        logger.LogDebug("Initializing asynchronously");
        CreditsText = await GetCreditsText();

        await base.OnInitializedAsync();

        KeyEventService.Entered(Close);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            if (App.ActivatedFilePath != null)
            {
                await StartImport();
                StateHasChanged();
            }
        }
    }

    void SelectedAppThemeChanged(AppTheme newTheme)
    {
        AppThemeService.SelectedAppTheme = newTheme;
        Preferences.Set("theme", newTheme.ToString());
    }

    void SetUpSafetyPlan()
    {
        logger.LogInformation("Setting up Safety Plan");
        _leaving = true;
        NavigationManager.NavigateTo($"/safetyplan", false, true);
    }

    async Task PickAndStartImport()
    {
        if (DeviceInfo.Current.Platform == DevicePlatform.WinUI)
        {
            logger.LogInformation("Picking import file");

            var pickResult = await FilePicker.PickAsync();

            if (pickResult == null)
                return;

            App.ActivatedFilePath = pickResult.FullPath;

            await StartImport();
        }
        else
        {
            logger.LogInformation("Explaining how to import");
            await DialogService.ShowCustomMessageBox("Find the backup in your files app and click it or choose Open With -> JournalApp. You can also share the file directly from another app.");
        }
    }

    async Task StartImport()
    {
        try
        {
            _busy = true;
            StateHasChanged();

            var path = App.ActivatedFilePath;

            await AppDataService.StartImportWizard(DialogService, App.ActivatedFilePath);
        }
        finally
        {
            App.ActivatedFilePath = null;
            _busy = false;
        }
    }

    async Task StartExport()
    {
        try
        {
            _busy = true;
            StateHasChanged();

            await AppDataService.StartExportWizard(DialogService);
        }
        finally
        {
            _busy = false;
        }
    }

    public async Task<string> GetCreditsText()
    {
        logger.LogDebug("Reading credits file");

        using var stream = await FileSystem.OpenAppPackageFileAsync("Credits.txt");
        using var reader = new StreamReader(stream);
        return reader.ReadToEnd();
    }

    void Close()
    {
        logger.LogInformation("Going to index");
        _leaving = true;
        NavigationManager.NavigateTo("/", false, true);
    }

    public void Dispose()
    {
        KeyEventService.Exited();
    }

    protected override bool ShouldRender() => !_leaving;
}