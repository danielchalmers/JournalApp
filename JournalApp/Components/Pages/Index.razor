@namespace JournalApp
@page "/{OpenToDateString?}"
@using CommunityToolkit.Maui.Storage;
@inherits LayoutComponentBase
@implements IDisposable
@inject ILogger<Index> logger
@inject IDbContextFactory<AppDbContext> DbFactory
@inject AppDataService AppDataService
@inject IDialogService DialogService
@inject KeyEventService KeyEventService
@inject NavigationManager NavigationManager
@inject IScrollManager ScrollManager

<div class="page-title">
	<div class="page-header">
		<MudButton OnClick="OnTitleClicked" DisableRipple Variant="Variant.Text">
			<MudText Typo="Typo.h6">🙂 @ThisAssembly.AssemblyTitle BETA</MudText>
		</MudButton>

		<MudSpacer />

		<MudMenu Icon="@Icons.Material.Filled.MoreVert" title="More" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.BottomLeft">
			<MudMenuItem Icon="@Icons.Material.Filled.Category" OnAction="ManageCategories">Categories</MudMenuItem>
			<MudMenuItem Icon="@Icons.Material.Filled.Medication" OnAction="ManageMedications">Medications</MudMenuItem>
			<MudMenuItem Icon="@Icons.Material.Filled.Comment" OnAction="NewNote">New note</MudMenuItem>
			<MudMenuItem Icon="@Icons.Material.Filled.ShowChart" OnAction="OpenTrends">Trends</MudMenuItem>
			<MudMenuItem Icon="@Icons.Material.Filled.Article" OnAction="OpenWorksheets">Worksheets</MudMenuItem>
			<MudMenuItem Icon="@Icons.Material.Filled.HealthAndSafety" OnAction="OpenSafetyPlan">Safety Plan</MudMenuItem>

			<MudDivider />

			<MudMenuItem Icon="@Icons.Material.Filled.Campaign" OnAction="OpenFeedback">Feedback</MudMenuItem>
			<MudMenuItem Icon="@Icons.Material.Filled.Settings" OnAction="OpenSettings">Settings</MudMenuItem>
		</MudMenu>
	</div>

	<div class="switcher">
		<MudIconButton Icon="@Icons.Material.Filled.ArrowBackIos" Title="Previous day" OnClick="PreviousDay" Disabled="@(_day.Date.DayNumber <= 1)" />

		<div class="switcher-header">
			<MudButton OnClick="OpenMoodGrid" title="Open Mood Grid">
				<MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="false">@_day.Date.ToString("ddd, MMM d")</MudText>
			</MudButton>
		</div>

		<MudIconButton Icon="@Icons.Material.Filled.ArrowForwardIos" Title="Next day" OnClick="NextDay" Disabled="@(_day.Date > DateOnly.FromDateTime(DateTime.Now))" />
	</div>
</div>

<div class="page-body">
	<div class="main-timeline">
		@foreach (var group in db.Categories.Where(x => x.Enabled && !x.Deleted).GroupBy(x => x.Group))
		{
			<div class="data-point-group">
				@if (!string.IsNullOrEmpty(group.Key))
				{
					<div class="data-point-group-header">
						@if (group.Key == "Medications")
						{
							<MudText Typo="Typo.h5">Medications taken</MudText>
						}
						else if (group.Key == "Notes")
						{
							<MudText Typo="Typo.h5">Today's notes</MudText>
						}
					</div>
				}

				@foreach (var category in group.OrderBy(x => x.Index).ThenBy(x => x.Name))
				{
					@foreach (var point in _day.Points.Where(x => !x.Deleted && x.Category.Guid == category.Guid && x.Type == category.Type).OrderBy(x => x.CreatedAt))
					{
						<div class="data-point-container">
							@if (!string.IsNullOrEmpty(category.Name))
							{
								<div class="data-point-header">
									<MudText>@(DataPointView.GetHeaderText(point))</MudText>
								</div>
							}

							@if (!category.SingleLine)
							{
								<div class="break-flex-column" />
							}

							<div class="data-point-view">
								<DataPointView Point="point" DialogClosed="_ => StateHasChanged()" />
							</div>
						</div>
					}
				}

				<div class="data-point-group-footer">
					@if (group.Key == null)
					{
						<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Category" OnClick="ManageCategories" FullWidth>Choose categories</MudButton>
					}
					else if (group.Key == "Medications")
					{
						<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Medication" OnClick="ManageMedications" FullWidth>Choose medications</MudButton>
					}
					else if (group.Key == "Notes")
					{
						<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Comment" OnClick="NewNote" FullWidth>New note</MudButton>
					}
				</div>
			</div>
		}
	</div>
</div>

@code {
	AppDbContext db;
	bool _disposed;
	Day _day;
	DateTimeOffset _stoppedDate;

	[Parameter]
	public string OpenToDateString { get; set; }

	protected override async Task OnInitializedAsync()
	{
		logger.LogInformation("Initializing asynchronously");
		db = await DbFactory.CreateDbContextAsync();
		await base.OnInitializedAsync();

		// Find the date we left the page from.
		if (OpenToDateString == null &&
			DateTimeOffset.TryParse(Preferences.Get("index_left_at", null), out var disposedAt) &&
			DateTimeOffset.Now - disposedAt < TimeSpan.FromHours(1))
			OpenToDateString = Preferences.Get("last_date", null);

		// Go to the appropriate date.
		var date = DateOnly.TryParseExact(OpenToDateString, "yyyyMMdd", out var parsed) ? parsed : DateOnly.FromDateTime(DateTime.Now);
		logger.LogInformation($"Opening to {date}");
		await GoToDay(date);

		// https://learn.microsoft.com/en-us/dotnet/maui/fundamentals/app-lifecycle
		App.Window.Deactivated += Window_DeactivatedOrDestroying;
		App.Window.Destroying += Window_DeactivatedOrDestroying;
		App.Window.Stopped += Window_Stopped;
		App.Window.Resumed += Window_Resumed;
	}

	private void Window_DeactivatedOrDestroying(object sender, EventArgs e)
	{
		logger.LogDebug("Window deactivated or destroying");

		if (!_disposed && KeyEventService.CurrentDepth == 0)
		{
			logger.LogInformation("Auto saving database while no dialogs are open");
			db.SaveChanges();
		}
		else
		{
			logger.LogDebug($"Not auto saving database because {KeyEventService.CurrentDepth} dialogs are open or this is disposed");
		}
	}

	private void Window_Stopped(object sender, EventArgs e)
	{
		_stoppedDate = DateTimeOffset.Now;
		logger.LogDebug($"Window was stopped at {_stoppedDate}");
	}

	private async void Window_Resumed(object sender, EventArgs e)
	{
		logger.LogDebug("Window resumed");

		// Go to current day if user returns after a certain amount of time,
		// but not on Windows because Resumed can occur without a corresponding Stopped for some reason.
		if (DeviceInfo.Current.Platform != DevicePlatform.WinUI && DateTimeOffset.Now - _stoppedDate > TimeSpan.FromHours(1))
		{
			// If no dialogs are open.
			if (KeyEventService.CurrentDepth == 0)
			{
				logger.LogInformation($"Switching from {_day} to current day after user was gone since {_stoppedDate}");
				await GoToDay(DateOnly.FromDateTime(DateTime.Now), scrollToTop: true);

				await AppDataService.ShowExportReminderIfDue(DialogService);
			}
			else
			{
				logger.LogDebug($"Not switching to current day because {KeyEventService.CurrentDepth} dialogs are open");
			}
		}
	}

	async Task OnTitleClicked()
	{
		logger.LogDebug("Title clicked");
		await GoToDay(DateOnly.FromDateTime(DateTime.Now), scrollToTop: true);
	}

	async Task ScrollToTop()
	{
		logger.LogInformation($"Scrolling to the top");
		await ScrollManager.ScrollToTopAsync("main-body");
	}

	async Task GoToDay(DateOnly date, bool scrollToTop = false)
	{
		var sw = Stopwatch.StartNew();

		await db.SaveChangesAsync(); // Save any changes that could have been made from the DataPointViews.
		_day = await db.GetOrCreateDayAndAddPoints(date);
		await db.SaveChangesAsync(); // Save potentially new day and points.

		logger.LogDebug($"Went to {_day} in {sw.ElapsedMilliseconds}ms ({sw.ElapsedTicks} ticks)");

		if (scrollToTop)
			await ScrollToTop();

		StateHasChanged();
	}

	async Task PreviousDay()
	{
		logger.LogInformation($"Going to the previous day from {_day}");
		await GoToDay(_day.Date.Previous());
	}

	async Task NextDay()
	{
		logger.LogInformation($"Going to the next day from {_day}");
		await GoToDay(_day.Date.Next());
	}

	void OpenMoodGrid()
	{
		logger.LogInformation("Opening Mood Grid");
		NavigationManager.NavigateTo($"/calendar/{_day.Date:yyyyMMdd}");
	}

	void ManageCategories()
	{
		logger.LogInformation("Opening category manager");
		NavigationManager.NavigateTo($"/manage");
	}

	void ManageMedications()
	{
		logger.LogInformation("Opening medication manager");
		NavigationManager.NavigateTo($"/manage/Medications");
	}

	void OpenTrends()
	{
		logger.LogInformation("Opening Trends");
		NavigationManager.NavigateTo($"/trends/{_day.Date:yyyyMMdd}");
	}

	void OpenSafetyPlan()
	{
		logger.LogInformation("Opening Safety Plan");
		NavigationManager.NavigateTo($"/safetyplan");
	}

	void OpenWorksheets()
	{
		logger.LogInformation("Opening Worksheets");
		NavigationManager.NavigateTo($"/worksheets");
	}

	async Task OpenFeedback()
	{
		logger.LogInformation("Opening feedback link");
		await Browser.Default.OpenAsync(Feedback.GenerateLink());
	}

	void OpenSettings()
	{
		logger.LogInformation("Opening Settings");
		NavigationManager.NavigateTo($"/settings");
	}

	async Task NewNote()
	{
		logger.LogInformation("Creating new note");

		var note = db.CreateNote(_day);

		var dialogSubmitted = await EditTextDialog.ShowDialog(DialogService, note);
		if (!dialogSubmitted || note.Deleted)
			return;

		logger.LogInformation("Saving new note");
		note.Category.Points.Add(note);
		await db.SaveChangesAsync();
	}

	public void Dispose()
	{
		if (_disposed)
			return;

		_disposed = true;

		App.Window.Deactivated -= Window_DeactivatedOrDestroying;
		App.Window.Destroying -= Window_DeactivatedOrDestroying;
		App.Window.Stopped -= Window_Stopped;
		App.Window.Resumed -= Window_Resumed;

		Preferences.Set("last_date", _day.Date.ToString("yyyyMMdd"));
		Preferences.Set("index_left_at", DateTimeOffset.Now.ToString("O"));

		if (db != null)
		{
			db.SaveChanges();
			db.Dispose();
		}
	}
}
