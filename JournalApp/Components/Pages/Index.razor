@namespace JournalApp
@page "/"
@using CommunityToolkit.Maui.Storage;
@inherits LayoutComponentBase
@inject AppDbContext db
@inject AppDbSeeder dbSeeder
@inject ILogger<Index> logger
@inject ISnackbar SnackbarService
@inject IDialogService DialogService
@inject IScrollManager ScrollManager
@inject AppDataService AppDataService

<div class="page-title">
	<div class="page-header">
		<MudButton OnClick="ScrollToTop" DisableRipple Variant="Variant.Text">
			<MudText Typo="Typo.h6">🙂 @ThisAssembly.AssemblyTitle BETA</MudText>
		</MudButton>

		<MudSpacer />

		<MudMenu Icon="@Icons.Material.Filled.MoreVert" title="More" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.BottomLeft">
			<MudMenuItem Icon="@Icons.Material.Filled.Category" OnAction="ManageCategories">Categories</MudMenuItem>
			<MudMenuItem Icon="@Icons.Material.Filled.Medication" OnAction="ManageMedications">Medications</MudMenuItem>
			<MudMenuItem Icon="@Icons.Material.Filled.Comment" OnAction="NewNote">New note</MudMenuItem>

			<environment include="Development">
				<MudMenuItem Icon="@Icons.Material.Filled.ShowChart" OnAction="OpenTrends">Trends</MudMenuItem>
			</environment>

			<MudMenuItem Icon="@Icons.Material.Filled.Description" OnAction="OpenWorksheets">Worksheets</MudMenuItem>
			<MudMenuItem Icon="@Icons.Material.Filled.HealthAndSafety" OnAction="OpenSafetyPlan">Safety Plan</MudMenuItem>

			<MudDivider />

			<environment include="Development">
				<MudMenuItem Icon="@Icons.Material.Filled.Download" OnAction="@(() => AppDataService.StartImportWizard(DialogService))">Import</MudMenuItem>
				<MudMenuItem Icon="@Icons.Material.Filled.Upload" OnAction="@(() => AppDataService.StartExportWizard(DialogService))">Export</MudMenuItem>
			</environment>

			<MudMenuItem Icon="@Icons.Material.Filled.Info" OnAction="OpenAbout">v@(ThisAssembly.AssemblyFileVersion)</MudMenuItem>
		</MudMenu>
	</div>

	<div class="switcher">
		<MudIconButton Icon="@Icons.Material.Filled.ArrowBackIos" Title="Previous day" OnClick="PreviousDay" Disabled="@(_day.Date.DayNumber <= 1)" />

		<div class="switcher-header">
			<MudButton OnClick="OpenMoodGrid" title="Go to Mood Grid">
				<MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="false">@_day.Date.ToString("ddd, MMM d")</MudText>
			</MudButton>
		</div>

		<MudIconButton Icon="@Icons.Material.Filled.ArrowForwardIos" Title="Next day" OnClick="NextDay" Disabled="@(_day.Date > DateOnly.FromDateTime(DateTime.Now))" />
	</div>
</div>

<div class="page-body">
	<div class="main-timeline">
		@foreach (var group in db.Categories.GroupBy(x => x.Group))
		{
			<div class="data-point-group">
				@if (!string.IsNullOrEmpty(group.Key))
				{
					<div class="data-point-group-header">
						@if (group.Key == "Medications")
						{
							<MudText Typo="Typo.h5">Medications taken</MudText>
						}
						else if (group.Key == "Notes")
						{
							<MudText Typo="Typo.h5">Today's notes</MudText>
						}
					</div>
				}

				@foreach (var category in group.Where(x => x.Enabled && !x.Deleted).OrderBy(x => x.Index).ThenBy(x => x.Name))
				{
					@foreach (var point in _day.Points.Where(x => !x.Deleted && x.Category == category && x.Type == category.Type))
					{
						<div class="data-point-container">
							@if (!string.IsNullOrEmpty(category.Name))
							{
								<div class="data-point-header">
									<MudText>@(DataPointView.GetHeaderText(point))</MudText>
								</div>
							}

							@if (!category.SingleLine)
							{
								<div class="break-flex-column" />
							}

							<div class="data-point-view">
								<DataPointView Point="point" DialogClosed="_ => StateHasChanged()" />
							</div>
						</div>
					}
				}

				<div class="data-point-group-footer">
					@if (group.Key == null)
					{
						<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Category" OnClick="ManageCategories" FullWidth>Choose categories</MudButton>
					}
					else if (group.Key == "Medications")
					{
						<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Medication" OnClick="ManageMedications" FullWidth>Choose medications</MudButton>
					}
					else if (group.Key == "Notes")
					{
						<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Comment" OnClick="NewNote" FullWidth>New note</MudButton>
					}
				</div>
			</div>
		}
	</div>
</div>

@code {
	Day _day;
	DateTimeOffset _stoppedDate;

	protected override async Task OnInitializedAsync()
	{
		logger.LogInformation("Initializing asynchronously");
		await base.OnInitializedAsync();

		logger.LogInformation("Seeding database");
		await dbSeeder.SeedAsync();

		logger.LogInformation("Going to the current day");
		await GoToDay(DateOnly.FromDateTime(DateTime.Now));

		// https://learn.microsoft.com/en-us/dotnet/maui/fundamentals/app-lifecycle
		var window = App.Current.Windows.Single();
		window.Deactivated += Window_DeactivatedOrDestroying;
		window.Destroying += Window_DeactivatedOrDestroying;
		window.Stopped += Window_Stopped;
		window.Resumed += Window_Resumed;
	}

	private async void Window_DeactivatedOrDestroying(object sender, EventArgs e)
	{
		logger.LogInformation("Window deactivated or destroying; Saving database");

		try
		{
			await db.SaveChangesAsync();
		}
		catch (ObjectDisposedException)
		{
			// Ignore.
		}
	}

	private void Window_Stopped(object sender, EventArgs e)
	{
		_stoppedDate = DateTimeOffset.Now;
		logger.LogInformation($"Window was stopped at {_stoppedDate}");
	}

	private async void Window_Resumed(object sender, EventArgs e)
	{
		// Go to current day if user returns after a certain amount of time,
		// but not on Windows because Resumed can occur without a corresponding Stopped for some reason.
		if (DeviceInfo.Current.Platform != DevicePlatform.WinUI && DateTimeOffset.Now - _stoppedDate > TimeSpan.FromHours(1))
		{
			logger.LogInformation($"Switching from {_day} to current day after user was gone since {_stoppedDate}");
			await GoToDay(DateOnly.FromDateTime(DateTime.Now), scrollToTop: true);

			await AppDataService.ShowExportReminderIfDue(DialogService);
		}
	}

	async Task ScrollToTop()
	{
		logger.LogInformation($"Scrolling to the top");
		await ScrollManager.ScrollToTopAsync("main-body");
	}

	async Task GoToDay(DateOnly date, bool scrollToTop = false)
	{
		var sw = Stopwatch.StartNew();
		_day = await db.GetOrCreateDay(date);
		sw.Stop();
		logger.LogInformation($"Went to {_day} in {sw.ElapsedTicks} ticks");

		if (scrollToTop)
			await ScrollToTop();

		StateHasChanged();
	}

	async Task PreviousDay()
	{
		logger.LogInformation($"Going to the previous day from {_day}");
		await GoToDay(_day.Date.Previous());
	}

	async Task NextDay()
	{
		logger.LogInformation($"Going to the next day from {_day}");
		await GoToDay(_day.Date.Next());
	}

	async Task OpenMoodGrid()
	{
		logger.LogInformation("Opening Mood Grid");
		var parameters = new DialogParameters<MoodGridDialog> { { x => x.OpenToDate, _day.Date } };
		var result = await DialogService.Show<MoodGridDialog>(parameters, ComponentUtil.FullscreenDialogOptions).Result;

		if (result.Data is DateOnly date)
		{
			logger.LogInformation($"Selected {date} from the Mood Grid");
			await GoToDay(date, scrollToTop: true);
		}
	}

	async Task ManageCategories()
	{
		logger.LogInformation("Managing categories");
		await DialogService.Show<ManageCategoriesDialog>(ComponentUtil.FullscreenDialogOptions).Result;

		if (db.AddMissingPoints(_day))
			logger.LogInformation($"Added missing data points for {_day}");
	}

	async Task ManageMedications()
	{
		logger.LogInformation("Managing medications");
		var parameters = new DialogParameters<ManageCategoriesDialog> { { x => x.Group, "Medications" } };

		await DialogService.Show<ManageCategoriesDialog>(parameters, ComponentUtil.FullscreenDialogOptions).Result;

		if (db.AddMissingPoints(_day))
			logger.LogInformation($"Added missing data points for {_day}");
	}

	async Task OpenTrends()
	{
		logger.LogInformation("Opening trends dialog");
		var parameters = new DialogParameters<TrendsDialog> { { x => x.OpenToDate, _day.Date } };
		var result = await DialogService.Show<TrendsDialog>(parameters, ComponentUtil.FullscreenDialogOptions).Result;
	}

	async Task OpenSafetyPlan()
	{
		logger.LogInformation("Opening Safety Plan");
		var plan = Preferences.Default.GetJson<SafetyPlan>("safety_plan") ?? new();
		var parameters = new DialogParameters<SafetyPlanDialog> { { x => x.Plan, plan } };
		var result = await DialogService.Show<SafetyPlanDialog>(parameters, ComponentUtil.FullscreenDialogOptions).Result;

		if (result.Canceled)
			return;

		logger.LogInformation("Saving Safety Plan");
		Preferences.Default.SetJson("safety_plan", plan);
	}

	async Task OpenWorksheets()
	{
		logger.LogInformation("Opening Worksheets dialog");
		await DialogService.Show<WorksheetsDialog>(ComponentUtil.FullscreenDialogOptions).Result;
	}

	async Task OpenAbout()
	{
		logger.LogInformation("Opening About dialog");
		await DialogService.Show<AboutDialog>(ComponentUtil.FullscreenDialogOptions).Result;
	}

	async Task NewNote()
	{
		logger.LogInformation("Creating new note");

		var note = db.CreateNote(_day);

		var dialogSubmitted = await EditTextDialog.ShowDialog(DialogService, note);
		if (!dialogSubmitted || note.Deleted)
			return;

		logger.LogInformation("Saving new note");
		note.Category.Points.Add(note);
		await db.SaveChangesAsync();
	}
}
