@namespace JournalApp
@page "/trends/{OpenToDateString}"
@using CommunityToolkit.Maui.Storage;
@implements IDisposable
@inject IDbContextFactory<AppDbContext> DbFactory
@inject ILogger<TrendsPage> logger
@inject KeyEventService KeyEventService
@inject NavigationManager NavigationManager

<div class="page-title">
	<div class="page-header">
		<MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Title="Back" OnClick="Close" />

		<MudText Typo="Typo.h6">Trends</MudText>
	</div>

	<TrendsSwitcher @bind-SelectedDates="SelectedDates" @bind-SelectedDates:after="LoadDates" OpenToDate="OpenToDate" />
</div>

<div class="page-body">
	<div id="trends-category-list">
		@foreach (var (category, points) in AllPoints.OrderBy(x => x.Key.Group).ThenBy(x => x.Key.Index))
		{
			<div class="trends-category">
				<MudText Typo="Typo.h6">@(TrendCategoryView.GetHeaderText(category))</MudText>

				<ErrorBoundary>
					<ChildContent>
						<TrendCategoryView Category="category" Dates="SelectedDates" PointsByDay="points" />
					</ChildContent>

					<ErrorContent>
						<MudText Color="Color.Error">💥 Failed to load.</MudText>
					</ErrorContent>
				</ErrorBoundary>
			</div>
		}
	</div>
</div>

@code {
	[Parameter]
	public string OpenToDateString { get; set; }

	public DateOnly OpenToDate { get; set; }

	public IReadOnlyList<DateOnly> SelectedDates { get; set; }

	Dictionary<DataPointCategory, IReadOnlyDictionary<int, IReadOnlyCollection<DataPoint>>> AllPoints = new();

	protected override void OnInitialized()
	{
		logger.LogDebug("Initializing");
		base.OnInitialized();

		KeyEventService.Entered(() => Close());

		OpenToDate = DateOnly.ParseExact(OpenToDateString, "yyyyMMdd");
		logger.LogInformation($"Opening to {OpenToDate}");
	}

	async Task LoadDates()
	{
		logger.LogInformation($"Loading dates <{SelectedDates[0]}..{SelectedDates[^1]}>");
		var sw = Stopwatch.StartNew();

		await using var db = await DbFactory.CreateDbContextAsync();

		var query = db.Points
			.Where(p => !p.Deleted && !p.Category.Deleted && p.Category.Enabled && SelectedDates.Contains(p.Day.Date))
			.Include(p => p.Category)
			.Include(p => p.Day)
			.AsEnumerable()
			.OrderBy(p => p.Day.Date)
			.ThenBy(p => p.CreatedAt)
			.GroupBy(
				p => p.Category,
				p => p
			);

		AllPoints.Clear();
		foreach (var group in query)
		{
			var pointsByDayNumber = new Dictionary<int, IReadOnlyCollection<DataPoint>>();

			foreach (var date in SelectedDates)
			{
				pointsByDayNumber.Add(date.Day, group.Where(p => p.Day.Date == date).ToHashSet());
			}

			AllPoints.Add(group.Key, pointsByDayNumber);
		}

		logger.LogInformation($"Loaded dates in {sw.ElapsedMilliseconds}ms");
	}

	void Close()
	{
		logger.LogInformation("Going to index");
		NavigationManager.NavigateTo("/", false, true);
	}

	public async Task Export()
	{
		logger.LogInformation("Starting export");

		await Task.CompletedTask;
	}

	public void Dispose()
	{
		KeyEventService.Exited();
	}
}