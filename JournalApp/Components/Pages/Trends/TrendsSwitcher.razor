@namespace JournalApp
@inject ILogger<TrendsSwitcher> logger

<div class="switcher">
	<MudIconButton Icon="@Icons.Material.Filled.ArrowBackIos" Title="Previous month" OnClick="GoPrevious" />

	<div class="switcher-header">
		<MudButton OnClick="() => SelectedMonth = MonthAfterCurrent">
			<MudText Typo="Typo.h5">@(HeaderText)</MudText>
		</MudButton>
	</div>

	<MudIconButton Icon="@Icons.Material.Filled.ArrowForwardIos" Title="Next month" OnClick="GoNext" Disabled="@(NextSelectedMonth > MonthAfterCurrent)" />
</div>

@code {
	DateOnly _selectedMonth;
	IReadOnlyList<DateOnly> _selectedDates;

	string HeaderText => SelectedMonth == MonthAfterCurrent ? "Last 30 Days" : SelectedMonth.ToString("MMM yyyy");

	DateOnly CurrentMonth => new DateOnly(DateTime.Now.Year, DateTime.Now.Month, 1);
	DateOnly MonthAfterCurrent => CurrentMonth.AddMonths(1);
	DateOnly LastSelectedMonth => _selectedMonth.AddMonths(-1);
	DateOnly NextSelectedMonth => _selectedMonth.AddMonths(1);

	[Parameter]
	public DateOnly SelectedMonth
	{
		get => _selectedMonth;
		set
		{
			_selectedMonth = value;

			logger.LogDebug($"Selected date {value}");

			var dates = new List<DateOnly>();

			if (SelectedMonth == MonthAfterCurrent)
			{
				logger.LogDebug($"Returning last 30 days");

				var nowDate = DateOnly.FromDateTime(DateTime.Now);

				for (int i = -29; i <= 0; i++)
					dates.Add(nowDate.AddDays(i));
			}
			else
			{
				var days = DateTime.DaysInMonth(value.Year, value.Month);

				logger.LogDebug($"Returning {days} in month of {value.Year}-{value.Month}");

				for (int i = 1; i <= days; i++)
					dates.Add(new DateOnly(value.Year, value.Month, i));
			}

			SelectedDates = dates;
			SelectedMonthChanged.InvokeAsync(value);
		}
	}

	[Parameter]
	public EventCallback<DateOnly> SelectedMonthChanged { get; set; }

	[Parameter]
	public DateOnly OpenToDate { get; set; }

	[Parameter]
	public IReadOnlyList<DateOnly> SelectedDates
	{
		get => _selectedDates;
		set
		{
			_selectedDates = value;
			SelectedDatesChanged.InvokeAsync(SelectedDates);
		}
	}

	[Parameter]
	public EventCallback<IReadOnlyList<DateOnly>> SelectedDatesChanged { get; set; }

	protected override void OnInitialized()
	{
		base.OnInitialized();

		if (OpenToDate >= CurrentMonth)
		{
			logger.LogDebug($"Started at most recent month so switching to Last 30 Days");
			SelectedMonth = MonthAfterCurrent;
		}
		else
		{
			SelectedMonth = new DateOnly(OpenToDate.Year, OpenToDate.Month, 1);
		}
	}

	void GoPrevious()
	{
		SelectedMonth = LastSelectedMonth;
	}

	void GoNext()
	{
		SelectedMonth = NextSelectedMonth;
	}
}
