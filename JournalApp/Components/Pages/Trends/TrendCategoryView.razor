@namespace JournalApp
@using ApexCharts

@if (Category.Type is PointType.Text or PointType.Note)
{
	<div class="trend-view-notes">
		@foreach (var (day, points) in PointsByDay)
		{
			foreach (var point in points.Where(x => !string.IsNullOrEmpty(x.Text)))
			{
				<MudTextField Value="point.Text"
							  Label="@($"{day} @ {point.CreatedAt.ToString("M/d/yy h:mm tt")}")"
							  ReadOnly DisableUnderLine AutoGrow MaxLines="10" />
			}
		}
	</div>
}
else
{
	<div class="trend-view-chart">
		<ApexChart @ref="_chart" TItem="PointOnChart" Options="ChartOptions">
			@switch (Category.Type)
			{
				case PointType.Mood:
					<ApexPointSeries TItem="PointOnChart"
									 Name="Mood (1=saddest, 7=happiest)"
									 Items="_chartItems"
									 SeriesType="SeriesType.Line"
									 XValue="e => e.Day"
									 YValue="e => e.Mood" />
					break;

				case PointType.Sleep:
					<ApexPointSeries TItem="PointOnChart"
									 Name="Hours"
									 Items="_chartItems"
									 SeriesType="SeriesType.Line"
									 XValue="e => e.Day"
									 YValue="e => e.SleepHours" />
					break;

				case PointType.Scale:
				case PointType.LowToHigh:
				case PointType.MildToSevere:
					<ApexPointSeries TItem="PointOnChart"
									 Name="Scale (0=lowest, 5=highest)"
									 Items="_chartItems"
									 SeriesType="SeriesType.Line"
									 XValue="e => e.Day"
									 YValue="e => e.Scale" />
					break;

				case PointType.Bool:
					<ApexPointSeries TItem="PointOnChart"
									 Name="Bool (0=no, 1=yes)"
									 Items="_chartItems"
									 SeriesType="SeriesType.Line"
									 XValue="e => e.Day"
									 YValue="e => e.Bool" />
					break;

				case PointType.Medication:
					<ApexPointSeries TItem="PointOnChart"
									 Name="Dose"
									 Items="_chartItems"
									 SeriesType="SeriesType.Line"
									 XValue="e => e.Day"
									 YValue="e => e.MedDose" />
					break;

				case PointType.Number:
					<ApexPointSeries TItem="PointOnChart"
									 Name="Number"
									 Items="_chartItems"
									 SeriesType="SeriesType.Line"
									 XValue="e => e.Day"
									 YValue="e => e.Number" />
					break;
			}
		</ApexChart>
	</div>
}

@code {
	ApexChart<PointOnChart> _chart;
	List<PointOnChart> _chartItems;

	ApexChartOptions<PointOnChart> ChartOptions = new()
		{
			Theme = new Theme
			{
				Mode = Mode.Dark,
				Monochrome = new ThemeMonochrome
				{
					Color = "#776be7",
					Enabled = true,
				},
			},
			Grid = new Grid
			{
				Padding = new Padding
				{
					Top = -15,
				},
			},
			Chart = new Chart
			{
				Background = "transparent",
				Height = "135px",
				ParentHeightOffset = 0,
				Zoom = new Zoom
				{
					Enabled = false,
				},
				Toolbar = new Toolbar
				{
					Show = false,
				},
				Animations = new Animations
				{
					Enabled = false,
				},
			},
			Xaxis = new XAxis
			{
				TickAmount = 15,
				Labels = new XAxisLabels
				{
					HideOverlappingLabels = true,
				},
			},
		};

	[Parameter]
	public DataPointCategory Category { get; set; }

	[Parameter]
	public IReadOnlyList<DateOnly> Dates { get; set; }

	[Parameter]
	public IReadOnlyDictionary<int, IReadOnlyCollection<DataPoint>> PointsByDay { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		var pointByDay = PointsByDay.ToDictionary(x => x.Key, x => x.Value.LastOrDefault());

		_chartItems = new();
		foreach (var (day, point) in pointByDay)
		{
			_chartItems.Add(new(day, point));
		}

		if (_chart != null)
			await _chart.UpdateSeriesAsync(false);
	}

	public static string GetHeaderText(DataPointCategory category)
	{
		var sb = new StringBuilder();

		if (string.IsNullOrEmpty(category.Name))
			sb.Append(category.Group);
		else
			sb.Append(category.Name);

		if (category.Type == PointType.Medication)
			sb.Append($" ({category.MedicationUnit?.Trim()})");

		return sb.ToString();
	}
}
