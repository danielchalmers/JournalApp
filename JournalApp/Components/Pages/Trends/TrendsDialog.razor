@namespace JournalApp
@using CommunityToolkit.Maui.Storage;
@using Append.Blazor.Printing
@inject AppDbContext db
@inject ILogger<TrendsDialog> logger
@inject IDialogService DialogService
@inject PageService PageService
@inject IPrintingService PrintingService

<MudDialog DefaultFocus="DefaultFocus.None">
	<TitleContent>
		<div class="page-header">
			<MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Title="Close" OnClick="Close" />

			<MudText Typo="Typo.h6">Trends</MudText>

			<MudSpacer />

			<MudIconButton Icon="@Icons.Material.Filled.Print" Title="Print" OnClick="Print" />
		</div>

		<TrendsSwitcher @bind-SelectedDates="SelectedDates" OpenToDate="OpenToDate" />
	</TitleContent>

	<DialogContent>
		<div id="trends-category-list">
			@foreach (var group in Categories.GroupBy(x => x.Group))
			{
				foreach (var category in group)
				{
					<div class="trends-category">
						<MudText Typo="Typo.h6">
							@((string.IsNullOrEmpty(category.Name) ? category.Group : category.Name) + (category.Type == PointType.Medication ? $" ({category.MedicationUnit?.Trim()})" : string.Empty))
						</MudText>

						<ErrorBoundary>
							<ChildContent>
								<TrendCategoryView Category="category" Dates="SelectedDates" PointsByDay="_allPoints[category]" />
							</ChildContent>

							<ErrorContent>
								<MudText Color="Color.Error">💥 Failed to load.</MudText>
							</ErrorContent>
						</ErrorBoundary>
					</div>
				}
			}
		</div>
	</DialogContent>
</MudDialog>

@code {
	Dictionary<DataPointCategory, IReadOnlyDictionary<int, IReadOnlyList<DataPoint>>> _allPoints = new();
	IReadOnlyList<DateOnly> _selectedDates;

	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	[Parameter]
	public DateOnly OpenToDate { get; set; }

	IQueryable<DataPointCategory> Categories => db.Categories.Where(x => x.Enabled && !x.Deleted).OrderBy(x => x.Index);

	public IReadOnlyList<DateOnly> SelectedDates
	{
		get => _selectedDates;
		set
		{
			_selectedDates = value;
			logger.LogInformation($"Changed selected dates <{value[0]}..{value[^1]}>");

			// Group data points by category and its points of the selected month.
			_allPoints.Clear();
			foreach (var category in Categories)
			{
				var categoryPoints = category.Points.Where(x => !x.Deleted && x.Category.Guid == category.Guid && x.Type == category.Type).ToHashSet();
				var dayPoints = new Dictionary<int, IReadOnlyList<DataPoint>>();
				int x = 0;

				foreach (var date in value)
				{
					dayPoints.Add(++x, categoryPoints.Where(x => x.Day.Date == date).ToList());
				}

				_allPoints.Add(category, dayPoints);
			}
		}
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();

		PageService.EnteredPage(() => Close());

		logger.LogInformation($"Opened to {OpenToDate}");
	}

	void Close()
	{
		PageService.CloseDialog(MudDialog, true);
	}

	public async Task Print()
	{
		logger.LogInformation("Opening print dialog");

		await PrintingService.Print("trends-category-list", PrintType.Html);
	}
}