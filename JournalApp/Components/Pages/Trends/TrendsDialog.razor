@namespace JournalApp
@using CommunityToolkit.Maui.Storage;
@using Append.Blazor.Printing
@inject IDbContextFactory<AppDbContext> dbcf
@inject ILogger<TrendsDialog> logger
@inject IDialogService DialogService
@inject PageService PageService
@inject IPrintingService PrintingService

<MudDialog DefaultFocus="DefaultFocus.None">
	<TitleContent>
		<div class="page-header">
			<MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Title="Close" OnClick="Close" />

			<MudText Typo="Typo.h6">Trends</MudText>

			<MudSpacer />

			@if (Debugger.IsAttached)
			{
				<MudIconButton Icon="@Icons.Material.Filled.Print" Title="Print" OnClick="Print" />
			}
		</div>

		<TrendsSwitcher @bind-SelectedDates="SelectedDates" OpenToDate="OpenToDate" />
	</TitleContent>

	<DialogContent>
		<div id="trends-category-list">
			@foreach (var (category, points) in AllPoints)
			{
				<div class="trends-category">
					<MudText Typo="Typo.h6">@(TrendCategoryView.GetHeaderText(category))</MudText>

					<ErrorBoundary>
						<ChildContent>
							<TrendCategoryView Category="category" Dates="SelectedDates" PointsByDay="points" />
						</ChildContent>

						<ErrorContent>
							<MudText Color="Color.Error">💥 Failed to load.</MudText>
						</ErrorContent>
					</ErrorBoundary>
				</div>
			}
		</div>
	</DialogContent>
</MudDialog>

@code {
	IReadOnlyList<DateOnly> _selectedDates;

	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	[Parameter]
	public DateOnly OpenToDate { get; set; }

	public IReadOnlyList<DateOnly> SelectedDates 
	{
		get => _selectedDates; 
		set
		{
			logger.LogInformation($"Selected dates <{value[0]}..{value[^1]}>");

			_selectedDates = value;

			LoadDates();
		}
	}

	Dictionary<DataPointCategory, IReadOnlyDictionary<int, IReadOnlyCollection<DataPoint>>> AllPoints = new();

	protected override void OnInitialized()
	{
		base.OnInitialized();

		PageService.EnteredPage(() => Close());

		logger.LogInformation($"Opened to {OpenToDate}");
	}

	void LoadDates()
	{
		using var db = dbcf.CreateDbContext();

		var query = db.Categories
			.Include(c => c.Points)
			.ThenInclude(p => p.Day)
			.Where(x => x.Enabled && !x.Deleted)
			.OrderBy(x => x.Group).ThenBy(x => x.Index)
			.ToDictionary(
				c => c,
				c => c.Points.Where(p => !p.Deleted && p.Type == c.Type).ToHashSet()
			);

		AllPoints.Clear();
		foreach (var (category, points) in query)
		{
			var pointsByDay = new Dictionary<int, IReadOnlyCollection<DataPoint>>();

			for (int i = 0; i < SelectedDates.Count; i++)
			{
				pointsByDay.Add(i, points.Where(p => p.Day.Date == SelectedDates[i]).ToHashSet());
			}

			AllPoints.Add(category, pointsByDay);
		}
	}

	void Close()
	{
		PageService.CloseDialog(MudDialog, true);
	}

	public async Task Print()
	{
		logger.LogInformation("Opening print dialog");

		await PrintingService.Print("trends-category-list", PrintType.Html);
	}
}