@namespace JournalApp
@using CommunityToolkit.Maui.Storage;
@inject AppDbContext db
@inject ILogger<TrendsDialog> logger
@inject IDialogService DialogService
@inject PageService PageService
@inject TrendPdfService PdfService

<MudDialog DefaultFocus="DefaultFocus.None">
	<TitleContent>
		<div class="page-header">
			<MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Title="Close" OnClick="Close" />

			<MudText Typo="Typo.h6">Trends</MudText>

			<MudSpacer />

			<MudIconButton Icon="@Icons.Material.Filled.PictureAsPdf" Title="Export to PDF" OnClick="ExportPDF" />
		</div>

		<TrendsSwitcher @bind-SelectedDates="SelectedDates" OpenToDate="OpenToDate" />
	</TitleContent>

	<DialogContent>
		<div class="trends-category-list">
			@foreach (var group in db.Categories.GroupBy(x => x.Group))
			{
				foreach (var category in group.Where(x => x.Enabled && !x.Deleted).OrderBy(x => x.Index))
				{
					<div class="trends-category">
						<MudText Typo="Typo.h6">
							@(category.Name + (category.Type == PointType.Medication ? $" ({category.MedicationUnit})" : string.Empty))
						</MudText>

						<TrendCategoryView Category="category" Dates="SelectedDates" PointsByDay="_allPoints[category]" />
					</div>
				}
			}
		</div>
	</DialogContent>
</MudDialog>

@code {
	Dictionary<DataPointCategory, IReadOnlyDictionary<int, IReadOnlyList<DataPoint>>> _allPoints;
	IReadOnlyList<DateOnly> _selectedDates;

	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	[Parameter]
	public DateOnly OpenToDate { get; set; }

	public IReadOnlyList<DateOnly> SelectedDates
	{
		get => _selectedDates;
		set
		{
			_selectedDates = value;

			// Group data points by category and its points of the selected month.
			_allPoints = new();
			foreach (var category in db.Categories.Where(x => x.Enabled && !x.Deleted).OrderBy(x => x.Type))
			{
				var dayPoints = new Dictionary<int, IReadOnlyList<DataPoint>>();

				// Each day has either a matching data point or null.
				foreach (var date in value)
				{
					var points = category.Points.Where(x => !x.Deleted && x.Category == category && x.Type == category.Type && x.Day.Date == date);
					dayPoints.Add(date.Day, points.ToList());
				}

				_allPoints.Add(category, dayPoints);
			}
		}
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();

		PageService.EnteredPage(() => Close());

		logger.LogInformation($"Opened to {OpenToDate}");
	}

	void Close()
	{
		PageService.CloseDialog(MudDialog, true);
	}

	public async Task ExportPDF()
	{
		logger.LogInformation($"Exporting PDF <{SelectedDates[0]}..{SelectedDates[^1]}>");

		var document = await PdfService.CreatePDF(_allPoints);

		await PdfService.SavePDF(document);
	}
}