@namespace JournalApp
@using CommunityToolkit.Maui.Storage;
@inject IDbContextFactory<AppDbContext> dbcf
@inject ILogger<TrendsDialog> logger
@inject IDialogService DialogService
@inject PageService PageService

<MudDialog DefaultFocus="DefaultFocus.None">
	<TitleContent>
		<div class="page-header">
			<MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Title="Close" OnClick="Close" />

			<MudText Typo="Typo.h6">Trends</MudText>

			@if (Debugger.IsAttached)
			{
				<MudSpacer />

				<MudIconButton Icon="@Icons.Material.Filled.PictureAsPdf" Title="Export as PDF" OnClick="Export" />
			}
		</div>

		<TrendsSwitcher @bind-SelectedDates="SelectedDates" @bind-SelectedDates:after="LoadDates" OpenToDate="OpenToDate" />
	</TitleContent>

	<DialogContent>
		<div id="trends-category-list">
			@foreach (var (category, points) in AllPoints.OrderBy(x => x.Key.Group).ThenBy(x => x.Key.Index))
			{
				<div class="trends-category">
					<MudText Typo="Typo.h6">@(TrendCategoryView.GetHeaderText(category))</MudText>

					<ErrorBoundary>
						<ChildContent>
							<TrendCategoryView Category="category" Dates="SelectedDates" PointsByDay="points" />
						</ChildContent>

						<ErrorContent>
							<MudText Color="Color.Error">💥 Failed to load.</MudText>
						</ErrorContent>
					</ErrorBoundary>
				</div>
			}
		</div>
	</DialogContent>
</MudDialog>

@code {
	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	[Parameter]
	public DateOnly OpenToDate { get; set; }

	public IReadOnlyList<DateOnly> SelectedDates { get; set; }

	Dictionary<DataPointCategory, IReadOnlyDictionary<int, IReadOnlyCollection<DataPoint>>> AllPoints = new();

	protected override void OnInitialized()
	{
		base.OnInitialized();

		PageService.EnteredPage(() => Close());

		logger.LogInformation($"Opened to {OpenToDate}");
	}

	async Task LoadDates()
	{
		logger.LogInformation($"Loading dates <{SelectedDates[0]}..{SelectedDates[^1]}>");
		var sw = Stopwatch.StartNew();

		await using var db = await dbcf.CreateDbContextAsync();

		var query = db.Points
			.Where(p => !p.Deleted && !p.Category.Deleted && p.Category.Enabled && SelectedDates.Contains(p.Day.Date))
			.Include(p => p.Category)
			.Include(p => p.Day)
			.AsEnumerable()
			.OrderBy(p => p.Day.Date)
			.ThenBy(p => p.CreatedAt)
			.GroupBy(
				p => p.Category,
				p => p
			);

		AllPoints.Clear();
		foreach (var group in query)
		{
			var pointsByDayNumber = new Dictionary<int, IReadOnlyCollection<DataPoint>>();

			for (int i = 0; i < SelectedDates.Count; i++)
			{
				pointsByDayNumber.Add(i + 1, group.Where(p => p.Day.Date == SelectedDates[i]).ToHashSet());
			}

			AllPoints.Add(group.Key, pointsByDayNumber);
		}

		logger.LogInformation($"Loaded dates in {sw.ElapsedMilliseconds}ms");
	}

	void Close()
	{
		PageService.CloseDialog(MudDialog, true);
	}

	public async Task Export()
	{
		logger.LogInformation("Starting export");

		await Task.CompletedTask;
	}
}