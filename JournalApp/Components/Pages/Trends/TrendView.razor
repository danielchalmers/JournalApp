@namespace JournalApp
@using ApexCharts

<div class="trend-view">
	@switch (Category.Type)
	{
		case PointType.Sleep:
			<div class="trend-view-chart">
				<ApexChart TItem="PointOnChart" Options="ChartOptions">
					<ApexPointSeries TItem="PointOnChart"
									 Name="Hours"
									 Items="ChartItems"
									 SeriesType="SeriesType.Line"
									 XValue="e => e.Day"
									 YValue="e => e.Point.SleepHours" />
				</ApexChart>
			</div>
			break;
		case PointType.Bool:
		case PointType.Medication:
			<div class="trend-view-columns">
				@foreach (var (day, point) in Points)
				{
					<div class="trend-column-container" style="background-color: @(GetBoolColor(point));">
						<div class="trend-column">
						</div>
					</div>
				}
			</div>
			break;
		case PointType.Number:
			<div class="trend-view-chart">
			</div>
			break;
	}
</div>

@code {
	ApexChartOptions<PointOnChart> ChartOptions = new()
		{
			Theme = new Theme
			{
				Mode = Mode.Dark,
				Palette = PaletteType.Palette1,
			},
			Chart = new Chart
			{
				Background = "transparent",
				Zoom = new Zoom
				{
					Enabled = false,
				},
			},
		};

	List<PointOnChart> ChartItems = new();
	private record PointOnChart(int Day, DataPoint Point);

	[Parameter]
	public DataPointCategory Category { get; set; }

	[Parameter]
	public IReadOnlyDictionary<int, DataPoint> Points { get; set; }

	public static bool IsSupported(PointType type) =>
		type is PointType.Sleep or PointType.Bool or PointType.Medication or PointType.Number;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		foreach (var (day, point) in Points)
		{
			if (point?.SleepHours == null)
				continue;
			ChartItems.Add(new(day, point));
		}
	}

	string GetBoolColor(DataPoint point)
	{
		if (point?.Bool == true)
			return "green";
		if (point?.Bool == false)
			return "red";
		return "black";
	}

	List<ChartSeries> GetNumberSeries()
	{
		return new()
		{
			new()
			{
				Name = Category.Name,
				Data = Points.Where(x => x.Value?.Number is not null).Select(x => x.Value.Number.Value).ToArray(),
			}
		};
	}
}
