@namespace JournalApp

<div class="trend-view">
	@switch (Category.Type)
	{
		case PointType.Sleep:
			<div class="trend-view-chart">
				<MudChart ChartType="ChartType.Line" ChartSeries="@GetSleepSeries()" Height="15em" Width="100%" Style="width: 100%"></MudChart>
			</div>
			break;
		case PointType.Bool:
		case PointType.Medication:
			<div class="trend-view-columns">
				@foreach (var (day, point) in Points)
				{
					<div class="trend-column-container" style="background-color: @(GetBoolColor(point));">
						<div class="trend-column">
						</div>
					</div>
				}
			</div>
			break;
		case PointType.Number:
			<div class="trend-view-chart">
				<MudChart ChartType="ChartType.Line" ChartSeries="@GetNumberSeries()" Height="15em" Width="100%" Style="width: 100%"></MudChart>
			</div>
			break;
	}
</div>

@code {
	[Parameter]
	public DataPointCategory Category { get; set; }

	[Parameter]
	public IReadOnlyDictionary<int, DataPoint> Points { get; set; }

	public static bool IsSupported(PointType type) =>
		type is PointType.Sleep or PointType.Bool or PointType.Medication or PointType.Number;

	List<ChartSeries> GetSleepSeries()
	{
		return new()
		{
			new()
			{
				Name = Category.Name,
				Data = Points.Where(x => x.Value?.SleepHours is not null).Select(x => (double)x.Value.SleepHours.Value).ToArray(),
			}
		};
	}

	string GetBoolColor(DataPoint point)
	{
		if (point?.Bool == true)
			return "green";
		if (point?.Bool == false)
			return "red";
		return "black";
	}

	List<ChartSeries> GetNumberSeries()
	{
		return new()
		{
			new()
			{
				Name = Category.Name,
				Data = Points.Where(x => x.Value?.Number is not null).Select(x => x.Value.Number.Value).ToArray(),
			}
		};
	}
}
