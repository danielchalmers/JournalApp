@namespace JournalApp
@inherits LayoutComponentBase
@implements IDisposable
@inject KeyEventService KeyEventService
@inject NavigationManager NavigationManager
@inject AppThemeService AppThemeService

<MudThemeProvider Theme="_theme" IsDarkMode="_isDarkMode" />

<MudDialogProvider MaxWidth="MaxWidth.Small"
				   FullWidth="true"
				   NoHeader="false"
				   CloseButton="false"
				   CloseOnEscapeKey="false"
				   Position="DialogPosition.Center" />

<MudSnackbarProvider />

<div class="page">
	@Body
</div>

@code {
	bool _isDarkMode = true;
	bool _hasRendered;
	MudTheme _theme = new()
		{
			Palette = new PaletteLight()
			{
				Primary = "#776be7",
				PrimaryLighten = "#978dec",
				Background = "#f7f6fb",
				TextDisabled = "#424242",
			},
			PaletteDark = new PaletteDark()
			{
				Primary = "#776be7",
				TextDisabled = "#ffffffb2",
			},
			LayoutProperties = new() { AppbarHeight = "4em" },
		};

	protected override void OnInitialized()
	{
		base.OnInitialized();

		AppThemeService.ThemeChanged += OnThemeChanged;
		if (Enum.TryParse<AppTheme>(Preferences.Get("theme", "Unspecified"), out var parsed))
			AppThemeService.SelectedAppTheme = parsed;

		App.NewIntent += OnNewIntent;
		App.Window.Destroying += (_, _) => Dispose();

		// All pages have been reloaded so we should clear any leftover subscriptions.
		KeyEventService.ResetStack();

		// Start import.
		if (App.ActivatedFilePath != null)
		{
			NavigationManager.NavigateTo($"/settings", false, true);
		}
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			_hasRendered = true;
		}
	}

	public void OnThemeChanged(object sender, bool isDarkMode)
	{
		_isDarkMode = isDarkMode;

		if (_hasRendered)
			StateHasChanged();
	}

	void OnNewIntent(object sender, EventArgs e)
	{
		NavigationManager.NavigateTo($"/settings", true, true);
	}

	public void Dispose()
	{
		AppThemeService.ThemeChanged -= OnThemeChanged;
		App.NewIntent -= OnNewIntent;
	}
}