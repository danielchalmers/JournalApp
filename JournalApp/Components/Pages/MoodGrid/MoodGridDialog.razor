@namespace JournalApp
@using Color = Microsoft.Maui.Graphics.Color;
@using MudBlazor.Utilities
@inject AppDbContext db
@inject ILogger<MoodGridDialog> logger
@inject IDialogService DialogService
@inject IScrollManager ScrollManager
@inject PageService PageService

<MudDialog DefaultFocus="DefaultFocus.Element">
	<TitleContent>
		<div class="page-header">
			<MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Title="Close" OnClick="Close" />

			<MudText Typo="Typo.h6">Mood Grid</MudText>

			<MudSpacer />

			<MudIconButton Icon="@Icons.Material.Filled.Palette" Title="Pick color" OnClick="OpenColorPicker" />
		</div>

		<MoodGridSwitcher @bind-SelectedYear="SelectedYear" />
	</TitleContent>

	<DialogContent>
		@if(_hasInitiallyRendered)
		{
			<MoodGridCalendar MoodColors="MoodColors" SelectedYear="SelectedYear" DayClicked="@(d => Close(d))" CalendarLoaded="ScrollToOpenToDate" />
		}
	</DialogContent>
</MudDialog>

@code {
	bool _hasInitiallyRendered = false;
	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	[Parameter]
	public DateOnly OpenToDate { get; set; }

	public MudColor PrimaryColor
	{
		get => new MudColor(Preferences.Get("mood_palette", "#6bdbe7"));
		set => Preferences.Set("mood_palette", value.Value[..^2]);
	}

	public IReadOnlyDictionary<string, string> MoodColors { get; set; }

	public int SelectedYear { get; set; }

	protected override void OnInitialized()
	{
		base.OnInitialized();

		PageService.EnteredPage(() => Close());

		logger.LogInformation($"Opened to {OpenToDate}");
		SelectedYear = OpenToDate.Year;

		GenerateColors();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);

		if (firstRender)
		{
			_hasInitiallyRendered = true;
			StateHasChanged();
		}
	}

	async Task ScrollToOpenToDate()
	{
		await ScrollManager.ScrollIntoViewAsync($"#mood-grid-month-{OpenToDate.Month}", ScrollBehavior.Smooth);
	}

	async Task OpenColorPicker()
	{
		logger.LogInformation("Opening color picker");

		if (await ColorPickerDialog.ShowDialog(DialogService, PrimaryColor) is MudColor selectedColor)
		{
			PrimaryColor = selectedColor;
			GenerateColors();
			StateHasChanged();
		}
	}

	void GenerateColors()
	{
		var emojis = DataPoint.Moods.Where(x => x != "🤔").ToList();
		var primary = PrimaryColor.ToMauiColor();
		var complementary = primary.GetComplementary();

		var emojiColors = new Dictionary<string, string>();
		for (int i = 0; i < emojis.Count; i++)
		{
			var p = i / (emojis.Count - 1f);
			var c = ColorUtil.GetGradientColor(primary, complementary, p);

			emojiColors.Add(emojis[i], c.ToHex());
		}
		MoodColors = emojiColors;

		logger.LogInformation($"Palette: {string.Join(",", emojiColors)}");
	}

	void Close()
	{
		PageService.CloseDialog(MudDialog, true);
	}

	void Close(DateOnly? date)
	{
		if (date == null || date > DateOnly.FromDateTime(DateTime.Now).Next())
			return;

		PageService.CloseDialog(MudDialog, date);
	}
}