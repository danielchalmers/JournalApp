@namespace JournalApp
@using Color = Microsoft.Maui.Graphics.Color;
@using MudBlazor.Utilities
@inject AppDbContext db
@inject ILogger<MoodGridDialog> logger
@inject IDialogService DialogService
@inject IScrollManager ScrollManager
@inject PageService PageService

<MudDialog DefaultFocus="DefaultFocus.Element">
	<TitleContent>
		<div class="page-header">
			<MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="Close" />

			<MudText Typo="Typo.h6">Mood Grid</MudText>

			<MudSpacer />

			<MudIconButton Icon="@Icons.Material.Filled.Palette" OnClick="OpenColorPicker" />
		</div>

		<MoodGridSwitcher @bind-SelectedYear="SelectedYear" />
	</TitleContent>

	<DialogContent>
		<div class="mood-grid">
			@if (_gridYear != null)
			{
				@foreach (var month in _gridYear.Value.GridMonths)
				{
					<div class="mood-grid-month" id="mood-grid-month-@(month.Month)">
						<div class="mood-grid-month-header">
							<MudText Typo="Typo.h4">@(month.Name)</MudText>
						</div>

						<div class="mood-blocks-month">
							<div class="mood-blocks-week">
								@foreach (var day in month.DaysOfWeek)
								{
									<div class="mood-block-container">
										<b>@(day.ToString()[0..2])</b>
									</div>
								}
							</div>

							@foreach (var row in month.GridDays.Chunk(7))
							{
								<div class="mood-blocks-week">
									@foreach (var day in row)
									{
										<div class="mood-block-container" style="background-color: @(GetMoodColor(day.Emoji));">
											<div class="mood-block" onclick="@(() => Close(day.Date))">
												@if (day.Date != null)
												{
													<b>@day.Date.Value.Day</b>
													<MudSpacer />
													@day.Emoji
												}
											</div>
										</div>
									}
								</div>
							}
						</div>
					</div>
				}
			}
		</div>
	</DialogContent>
</MudDialog>

@code {
	int _selectedYear;
	GridYear? _gridYear;
	DataPointCategory _moodCategory;
	IReadOnlyDictionary<string, string> _moodColors;

	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	[Parameter]
	public DateOnly OpenToDate { get; set; }

	public MudColor PrimaryColor
	{
		get => new MudColor(Preferences.Get("mood_palette", "#6bdbe7"));
		set => Preferences.Set("mood_palette", value.Value[..^2]);
	}

	public int SelectedYear
	{
		get => _selectedYear;
		set
		{
			_selectedYear = value;

			// The category may have been deleted from the database or not seeded in the first place.
			if (_moodCategory == null)
			{
				logger.LogInformation($"Not loading year {value} because mood category isn't present");
				return;
			}

			var sw = Stopwatch.StartNew();

			var tomorrow = DateOnly.FromDateTime(DateTime.Now).Next();

			// Group all mood points by their dates.
			var moodPointsByDate = db.Days
				.Select(x => new { Date = x.Date, DataPoints = x.Points })
				.Where(x => x.Date.Year == value && x.Date <= tomorrow)
				.ToDictionary(x => x.Date, x => x.DataPoints.Where(x => x.Category == _moodCategory).Single());

			_gridYear = new GridYear(value, System.Globalization.CultureInfo.CurrentCulture, moodPointsByDate);

			sw.Stop();
			logger.LogInformation($"Loaded year {value} in {sw.ElapsedMilliseconds}ms");
		}
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();

		_moodCategory = db.Categories.SingleOrDefault(x => x.Guid == new Guid("D90D89FB-F5B9-47CF-AE4E-3EC0D635E783"));
		PageService.EnteredPage(() => Close());
		GenerateColors();

		logger.LogInformation($"Opened to {OpenToDate}");
		SelectedYear = OpenToDate.Year;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);

		if (firstRender)
		{
			await ScrollManager.ScrollIntoViewAsync($"#mood-grid-month-{OpenToDate.Month}", ScrollBehavior.Smooth);
		}
	}

	async Task OpenColorPicker()
	{
		logger.LogInformation("Opening color picker");

		if (await ColorPickerDialog.ShowDialog(DialogService, PrimaryColor) is MudColor selectedColor)
		{
			PrimaryColor = selectedColor;
			GenerateColors();
			StateHasChanged();
		}
	}

	void GenerateColors()
	{
		var emojis = DataPoint.Moods.Where(x => x != "🤔").ToList();
		var primary = PrimaryColor.ToMauiColor();
		var complementary = primary.GetComplementary();

		var emojiColors = new Dictionary<string, string>();
		for (int i = 0; i < emojis.Count; i++)
		{
			var p = i / (emojis.Count - 1f);
			var c = ColorUtil.GetGradientColor(primary, complementary, p);

			emojiColors.Add(emojis[i], c.ToHex());
		}
		_moodColors = emojiColors;

		logger.LogInformation($"Palette: {string.Join(",", emojiColors)}");
	}

	string GetMoodColor(string emoji)
	{
		if (string.IsNullOrEmpty(emoji) || !_moodColors.TryGetValue(emoji, out var color))
			return "transparent";
		else
			return color;
	}

	void Close()
	{
		PageService.CloseDialog(MudDialog, true);
	}

	void Close(DateOnly? date)
	{
		if (date == null || date > DateOnly.FromDateTime(DateTime.Now).Next())
			return;

		PageService.CloseDialog(MudDialog, date);
	}
}