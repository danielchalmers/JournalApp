@namespace JournalApp
@using Color = Microsoft.Maui.Graphics.Color;
@using MudBlazor.Utilities
@inject AppDbContext db
@inject ILogger<MoodGridDialog> logger
@inject IDialogService DialogService
@inject IScrollManager ScrollManager
@inject IJSRuntime JSRuntime
@inject PageService PageService

<MudDialog DefaultFocus="DefaultFocus.Element">
	<TitleContent>
		<div class="page-header">
			<MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Title="Close" OnClick="Close" />

			<MudText Typo="Typo.h6">Mood Grid</MudText>

			<MudSpacer />

			<MudIconButton Icon="@Icons.Material.Filled.Palette" Title="Pick color" OnClick="OpenColorPicker" />
		</div>

		<MoodGridSwitcher @bind-SelectedYear="SelectedYear" @bind-SelectedYear:after="LoadYear" />
	</TitleContent>

	<DialogContent>
		@if(_gridYear != null)
		{
			<MoodGridCalendar MoodColors="MoodColors" GridYear="_gridYear.Value" DayClicked="@(d => Close(d))" CalendarLoaded="ScrollToOpenToDate" />
		}
	</DialogContent>
</MudDialog>

@code {
	DataPointCategory _moodCategory;
	GridYear? _gridYear = null;
	Task _loadYearTask;
	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	[Parameter]
	public DateOnly OpenToDate { get; set; }

	public int SelectedYear { get; set; }

	private string MoodPalettePreference
	{
		get
		{
			var palette = Preferences.Get("mood_palette", null);

			if (string.IsNullOrEmpty(palette))
				palette = "#6bdbe7";

			return palette;
		}
	}

	public MudColor PrimaryColor
	{
		get => new MudColor(MoodPalettePreference);
		set => Preferences.Set("mood_palette", value.Value[..^2]);
	}

	public IReadOnlyDictionary<string, string> MoodColors { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		PageService.EnteredPage(() => Close());

		logger.LogInformation($"Opened to {OpenToDate}");
		SelectedYear = OpenToDate.Year;

		GenerateColors();

		_loadYearTask = LoadYear();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);

		if (firstRender)
		{
			// If the year wasn't loaded before render, we have to render again.
			if (!_loadYearTask.IsCompleted)
			{
				await _loadYearTask;
				StateHasChanged();
			}
		}
	}

	async Task ScrollToOpenToDate()
	{
		// TODO: Unsure why we need two calls.
		await JSRuntime.InvokeVoidAsyncIgnoreErrors("scrollToNestedElement", ".mud-dialog", $"#mood-grid-month-{OpenToDate.Month}");
		await ScrollManager.ScrollIntoViewAsync($"#mood-grid-month-{OpenToDate.Month}", ScrollBehavior.Auto);
	}

	async Task LoadYear()
	{
		var sw = Stopwatch.StartNew();
		var tomorrow = DateOnly.FromDateTime(DateTime.Now).Next();

		_moodCategory ??= await db.Categories.SingleOrDefaultAsync(x => x.Guid == new Guid("D90D89FB-F5B9-47CF-AE4E-3EC0D635E783"));

		// Group all mood points by their dates.
		var moodPointsByDate = await db.Days
			.Select(x => new { Date = x.Date, DataPoints = x.Points })
			.Where(x => x.Date.Year == SelectedYear && x.Date <= tomorrow)
			.ToDictionaryAsync(x => x.Date, x => x.DataPoints.Where(x => x.Category == _moodCategory).Single());

		_gridYear = new GridYear(SelectedYear, System.Globalization.CultureInfo.CurrentCulture, moodPointsByDate);

		sw.Stop();
		logger.LogInformation($"Loaded year {SelectedYear} in {sw.ElapsedMilliseconds}ms");
	}

	async Task OpenColorPicker()
	{
		logger.LogInformation("Opening color picker");

		if (await ColorPickerDialog.ShowDialog(DialogService, PrimaryColor) is MudColor selectedColor)
		{
			PrimaryColor = selectedColor;
			GenerateColors();
			StateHasChanged();
		}
	}

	void GenerateColors()
	{
		var emojis = DataPoint.Moods.Where(x => x != "🤔").ToList();
		var primary = PrimaryColor.ToMauiColor();
		var complementary = primary.GetComplementary();

		var emojiColors = new Dictionary<string, string>();
		for (int i = 0; i < emojis.Count; i++)
		{
			var p = i / (emojis.Count - 1f);
			var c = ColorUtil.GetGradientColor(primary, complementary, p);

			emojiColors.Add(emojis[i], c.ToHex());
		}
		MoodColors = emojiColors;

		logger.LogInformation($"Palette: {string.Join(",", emojiColors)}");
	}

	void Close()
	{
		PageService.CloseDialog(MudDialog, true);
	}

	void Close(DateOnly? date)
	{
		if (date == null || date > DateOnly.FromDateTime(DateTime.Now).Next())
			return;

		PageService.CloseDialog(MudDialog, date);
	}
}