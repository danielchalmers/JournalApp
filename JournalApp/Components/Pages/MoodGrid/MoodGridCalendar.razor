@namespace JournalApp
@inject ILogger<MoodGridCalendar> logger

<div class="mood-grid">
	@foreach (var month in GridYear.GridMonths)
	{
		<div class="mood-grid-month" id="mood-grid-month-@(month.Month)">
			<div class="mood-grid-month-header">
				<MudText Typo="Typo.h4">@(month.Name)</MudText>
			</div>

			<div class="mood-blocks-month">
				<div class="mood-blocks-week">
					@foreach (var day in month.DaysOfWeek)
					{
						<div class="mood-block-container">
							<b>@(day.ToString()[0..2])</b>
						</div>
					}
				</div>

				@foreach (var row in month.GridDays.Chunk(7))
				{
					<div class="mood-blocks-week">
						@foreach (var day in row)
						{
							<div class="mood-block-container" style="background-color: @(GetMoodColor(day.Emoji));">
								<div class="mood-block" onclick="@(async () => await DayClicked.InvokeAsync(day.Date))">
									@if (day.Date != null)
									{
										<b>@day.Date.Value.Day</b>
										<MudSpacer />
										@day.Emoji
									}
								</div>
							</div>
						}
					</div>
				}
			</div>
		</div>
	}
</div>

@code {
	[Parameter]
	public IReadOnlyDictionary<string, string> MoodColors { get; set; }

	[Parameter]
	public EventCallback<DateOnly?> DayClicked { get; set; }

	[Parameter]
	public GridYear GridYear { get; set; }

	[Parameter]
	public EventCallback CalendarLoaded { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);

		if (firstRender)
		{
			await CalendarLoaded.InvokeAsync();
		}
	}

	string GetMoodColor(string emoji)
	{
		if (string.IsNullOrEmpty(emoji) || !MoodColors.TryGetValue(emoji, out var color))
			return "transparent";
		else
			return color;
	}
}
