@namespace JournalApp
@inject AppDbContext db
@inject ILogger<MoodGridCalendar> logger

<div class="mood-grid">
	@if (_gridYear != null)
	{
		@foreach (var month in _gridYear.Value.GridMonths)
		{
			<div class="mood-grid-month" id="mood-grid-month-@(month.Month)">
				<div class="mood-grid-month-header">
					<MudText Typo="Typo.h4">@(month.Name)</MudText>
				</div>

				<div class="mood-blocks-month">
					<div class="mood-blocks-week">
						@foreach (var day in month.DaysOfWeek)
						{
							<div class="mood-block-container">
								<b>@(day.ToString()[0..2])</b>
							</div>
						}
					</div>

					@foreach (var row in month.GridDays.Chunk(7))
					{
						<div class="mood-blocks-week">
							@foreach (var day in row)
							{
								<div class="mood-block-container" style="background-color: @(GetMoodColor(day.Emoji));">
									<div class="mood-block" onclick="@(async () => await DayClicked.InvokeAsync(day.Date))">
										@if (day.Date != null)
										{
											<b>@day.Date.Value.Day</b>
											<MudSpacer />
											@day.Emoji
										}
									</div>
								</div>
							}
						</div>
					}
				</div>
			</div>
		}
	}
</div>

@code {
	int _selectedYear;
	GridYear? _gridYear;
	DataPointCategory _moodCategory;

	[Parameter]
	public IReadOnlyDictionary<string, string> MoodColors { get; set; }

	[Parameter]
	public EventCallback<DateOnly?> DayClicked { get; set; }

	[Parameter]
	public int SelectedYear { get; set; }

	[Parameter]
	public EventCallback CalendarLoaded { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);

		if (firstRender)
		{
			await CalendarLoaded.InvokeAsync();
		}
	}

	public override async Task SetParametersAsync(ParameterView parameters)
	{
		await base.SetParametersAsync(parameters);

		foreach (var p in parameters)
		{
			if (p.Name == nameof(SelectedYear))
			{
				// Ignore infinite recursion.
				var currentYear = _selectedYear;
				var newYear = (int)p.Value;
				_selectedYear = newYear;

				if(newYear != currentYear)
					await LoadYear();	
			}
		}
	}

	async Task LoadYear()
	{
		var sw = Stopwatch.StartNew();
		var tomorrow = DateOnly.FromDateTime(DateTime.Now).Next();

		_moodCategory ??= await db.Categories.SingleOrDefaultAsync(x => x.Guid == new Guid("D90D89FB-F5B9-47CF-AE4E-3EC0D635E783"));

		// Group all mood points by their dates.
		var moodPointsByDate = await db.Days
			.Select(x => new { Date = x.Date, DataPoints = x.Points })
			.Where(x => x.Date.Year == SelectedYear && x.Date <= tomorrow)
			.ToDictionaryAsync(x => x.Date, x => x.DataPoints.Where(x => x.Category == _moodCategory).Single());

		_gridYear = new GridYear(SelectedYear, System.Globalization.CultureInfo.CurrentCulture, moodPointsByDate);

		sw.Stop();
		logger.LogInformation($"Loaded year {SelectedYear} in {sw.ElapsedMilliseconds}ms");
	}

	string GetMoodColor(string emoji)
	{
		if (string.IsNullOrEmpty(emoji) || !MoodColors.TryGetValue(emoji, out var color))
			return "transparent";
		else
			return color;
	}
}
