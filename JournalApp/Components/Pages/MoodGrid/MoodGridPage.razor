@namespace JournalApp
@page "/calendar/{OpenToDateString}"
@using Color = Microsoft.Maui.Graphics.Color;
@using MudBlazor.Utilities
@implements IDisposable
@inject IDbContextFactory<AppDbContext> DbFactory
@inject ILogger<MoodGridPage> logger
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject KeyEventService KeyEventService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<div class="page-title">
	<div class="page-header">
		<MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Title="Back" OnClick="Close" />

		<MudText Typo="Typo.h6">Mood Grid</MudText>

		<MudSpacer />

		<MudIconButton Icon="@Icons.Material.Filled.Palette" Title="Pick color" OnClick="OpenColorPicker" />
	</div>

	<MoodGridSwitcher @ref="_switcher" @bind-SelectedYear="SelectedYear" @bind-SelectedYear:after="LoadYear" HeaderClicked="HeaderClicked" />
</div>

<div class="page-body">
	@if (_gridYear != null)
	{
		<div style="padding-bottom: 40vh;">
			<MoodGridCalendar MoodColors="MoodColors" GridYear="_gridYear.Value" OpenToDate="OpenToDate"
							  CalendarLoaded="ScrollToOpenToDate" DayClicked="@(d => Close(d))"
							  PreviousMonthClicked="PreviousMonth" NextMonthClicked="NextMonth" />
		</div>
	}
</div>

@code {
	MoodGridSwitcher _switcher;
	DataPointCategory _moodCategory;
	GridYear? _gridYear = null;

	[Parameter]
	public string OpenToDateString { get; set; }

	public DateOnly OpenToDate { get; set; }

	public int SelectedYear { get; set; }

	private string MoodPalettePreference
	{
		get
		{
			var palette = Preferences.Get("mood_palette", null);

			if (string.IsNullOrEmpty(palette))
				palette = "#6bdbe7"; // Tetradic to our primary purple.

			return palette;
		}
	}

	public MudColor PrimaryColor
	{
		get => new MudColor(MoodPalettePreference);
		set => Preferences.Set("mood_palette", value.Value[..^2]);
	}

	public IReadOnlyDictionary<string, string> MoodColors { get; set; }

	protected override async Task OnInitializedAsync()
	{
		logger.LogDebug("Initializing asynchronously");
		await base.OnInitializedAsync();

		KeyEventService.Entered(() => Close());

		OpenToDate = DateOnly.ParseExact(OpenToDateString, "yyyyMMdd");
		logger.LogInformation($"Opening to {OpenToDate}");
		SelectedYear = OpenToDate.Year;

		GenerateColors();

		await LoadYear();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);

		if (firstRender)
		{
			Snackbar.ShowTeachingTip("click_mood_grid_day", "Click a day to go to it");
		}
	}

	async Task ScrollToMonth(int month)
	{
		logger.LogDebug($"Scrolling to month {month}");

		await JSRuntime.InvokeVoidAsync("scrollToTopOfNestedElement", ".mood-grid", $"#mood-grid-month-{month}");
	}

	async Task ScrollToOpenToDate() => await ScrollToMonth(OpenToDate.Month);

	async Task HeaderClicked() => await ScrollToMonth(DateTime.Now.Month);

	async Task PreviousMonth(int month)
	{
		if (month == 1)
		{
			logger.LogDebug("Switching to previous month from previous year");

			_switcher.PreviousYear();

			await ScrollToMonth(12);
		}
		else
		{
			logger.LogDebug("Switching to previous month from same year");

			await ScrollToMonth(month - 1);
		}
	}

	async Task NextMonth(int month)
	{
		if (month == 12)
		{
			logger.LogDebug("Switching to next month from next year");

			_switcher.NextYear();

			await ScrollToMonth(1);
		}
		else
		{
			logger.LogDebug("Switching to next month from same year");

			await ScrollToMonth(month + 1);
		}
	}

	async Task LoadYear()
	{
		logger.LogDebug($"Loading year {SelectedYear}");
		var sw = Stopwatch.StartNew();
		var tomorrow = DateOnly.FromDateTime(DateTime.Now).Next();
		await using var db = await DbFactory.CreateDbContextAsync();

		_moodCategory ??= await db.Categories.SingleOrDefaultAsync(x => x.Guid == new Guid("D90D89FB-F5B9-47CF-AE4E-3EC0D635E783"));

		var moodPoints = new Dictionary<DateOnly, DataPoint>();
		if (_moodCategory == null || !_moodCategory.Enabled)
		{
			logger.LogError("Mood category doesn't exist or is disabled so we won't load any points.");
		}
		else
		{
			var query = db.Points
				.Where(p => !p.Deleted && p.Day.Date.Year == SelectedYear && p.Day.Date <= tomorrow && p.Category.Guid == _moodCategory.Guid)
				.Select(
					p => new
					{
						Date = p.Day.Date,
						Point = p,
					}
				);

			// Sort into dictionary here instead of during the query so we can handle
			// duplicate dates, if that has erroneously happened, without crashing.
			foreach (var x in query)
				moodPoints[x.Date] = x.Point;

			logger.LogDebug($"Found {moodPoints.Count} mood points");
		}

		_gridYear = new GridYear(SelectedYear, System.Globalization.CultureInfo.CurrentCulture, moodPoints);
		logger.LogDebug("Created grid year");

		logger.LogInformation($"Loaded {SelectedYear} in {sw.ElapsedMilliseconds}ms");
	}

	async Task OpenColorPicker()
	{
		logger.LogInformation("Opening color picker");

		if (await ColorPickerDialog.ShowDialog(DialogService, PrimaryColor) is MudColor selectedColor)
		{
			PrimaryColor = selectedColor;
			GenerateColors();
			StateHasChanged();
		}
	}

	void GenerateColors()
	{
		var emojis = DataPoint.Moods.Where(x => x != "🤔").ToList();
		var primary = PrimaryColor.ToMauiColor();
		var complementary = primary.GetComplementary();

		var emojiColors = new Dictionary<string, string>();
		for (int i = 0; i < emojis.Count; i++)
		{
			var p = i / (emojis.Count - 1f);
			var c = ColorUtil.GetGradientColor(primary, complementary, p);

			emojiColors.Add(emojis[i], c.ToHex());
		}
		MoodColors = emojiColors;

		logger.LogInformation($"Primary color: {primary.ToHex()}");
		logger.LogInformation($"Palette: {string.Join(",", emojiColors)}");
	}

	void Close()
	{
		logger.LogInformation("Going to index");
		NavigationManager.NavigateTo("/", false, true);
	}

	void Close(DateOnly? date)
	{
		if (date == null || date > DateOnly.FromDateTime(DateTime.Now).Next())
			return;

		Snackbar.TeachingTipActionTaken("click_mood_grid_day");
		NavigationManager.NavigateTo($"/{date:yyyyMMdd}", false, true);
	}

	public void Dispose()
	{
		KeyEventService.Exited();
		Snackbar.Clear();
	}
}