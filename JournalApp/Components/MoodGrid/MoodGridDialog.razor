@namespace JournalApp.MoodGrid
@inject ApplicationDbContext db
@inject IDialogService DialogService
@inject IScrollManager ScrollManager

<MudDialog DefaultFocus="DefaultFocus.Element" OnBackdropClick="Close">
	<TitleContent>
		<div class="page-header">
			<MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="Close" />

			<MudText Typo="Typo.h6">Mood Grid</MudText>
		</div>

		<MoodGridSwitcher YearChanged="OnYearChanged" />
	</TitleContent>

	<DialogContent>
		<div class="mood-grid">
			@if (_gridYear != null)
			{
				@foreach (var month in _gridYear.Value.GridMonths)
				{
					<div class="mood-grid-month mood-grid-month-@(month.Month)">
						<div class="mood-grid-month-header">
							<MudText Typo="Typo.h4">@(month.Name)</MudText>
						</div>

						<div class="mood-blocks-month">
							<div class="mood-blocks-week">
								@foreach (var day in month.DaysOfWeek)
								{
									<div class="mood-block-container">
										<b>@(day.ToString()[0..2])</b>
									</div>
								}
							</div>

							@foreach (var row in month.GridDays.Chunk(7))
							{
								<div class="mood-blocks-week">
									@foreach (var day in row)
									{
										<div class="mood-block-container" style="background-color:@(day.Color ?? "transparent");">
											<div class="mood-block" onclick="@(() => Close(day.Date))">
												<b>@day.Day</b>
												<MudSpacer />
												@day.Emoji
											</div>
										</div>
									}
								</div>
							}
						</div>
					</div>
				}
			}
		</div>
	</DialogContent>
</MudDialog>

@code {
	GridYear? _gridYear;
	HashSet<DataPoint> _moodDataPoints;

	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	protected override void OnInitialized()
	{
		base.OnInitialized();

		_moodDataPoints = db.Categories.Single(x => x.Type == DataType.Mood).DataPoints;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);

		if (firstRender)
		{
			// Wait for full render before scrolling.
			// TODO: Possible race condition.
			await Task.Yield();
			await Task.Delay(300);
			await ScrollManager.ScrollIntoViewAsync($".mood-grid-month-{DateTime.Now.Month}", ScrollBehavior.Smooth);
		}
	}

	void OnYearChanged(int value)
	{
		var sw = Stopwatch.StartNew();

		_gridYear = new GridYear(value, _moodDataPoints);

		sw.Stop();
		Debug.WriteLine($"Loaded year {value} in the Mood Grid in {sw.ElapsedMilliseconds:0}ms");
	}

	void Close()
	{
		MudDialog.Close(DialogResult.Ok(true));
	}

	void Close(DateOnly? date)
	{
		if (date == null)
			return;

		MudDialog.Close(DialogResult.Ok(date));
	}
}