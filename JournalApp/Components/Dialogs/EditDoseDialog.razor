@namespace JournalApp
@inject IDialogService DialogService
@inject KeycodeService KeycodeService

<MudDialog DefaultFocus="DefaultFocus.FirstChild" OnBackdropClick="Submit">
	<TitleContent>
		<div class="page-header">
			<MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="Cancel" />

			<MudText Typo="Typo.h6">Change day's dose</MudText>

			<MudSpacer />

			<MudIconButton Icon="@Icons.Material.Filled.Check" OnClick="Submit" />
		</div>
	</TitleContent>

	<DialogContent>
		<MudText Style="word-wrap: anywhere;">@Point.Category.Name:</MudText>

			<MudNumericField @bind-Value="Dose" HideSpinButtons Label="@($"Dose ({Point.Day.Date:ddd, MMM d})")" MaxLength="6" Adornment="Adornment.End" AdornmentText="@Point.MedicationUnit" />
		</DialogContent>
	</MudDialog>

	@code {
	DataPoint _points;

	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	[Parameter]
	public DataPoint Point
	{
		get => _points;
		set
		{
			_points = value;
			Dose = value?.MedicationDose;
		}
	}

	public decimal? Dose { get; set; }

	protected override void OnInitialized()
	{
		base.OnInitialized();

		KeycodeService.SubscribeOnceToBackButtonPressed(() => Cancel());
	}

	void Cancel()
	{
		MudDialog.Close(DialogResult.Cancel());
	}

	void Submit()
	{
		if (Dose == null || Dose == decimal.Zero)
		{
			Point.MedicationDose = Point.Category.MedicationDose;
			Point.Bool = false;
		}
		else if (Dose != Point.MedicationDose)
		{
			Point.MedicationDose = Dose;
			Point.Bool = true;
		}

		MudDialog.Close(DialogResult.Ok(true));
	}

	public static async Task ShowDialog(IDialogService dialogService, DataPoint point)
	{
		var parameters = new DialogParameters<EditDoseDialog> { { x => x.Point, point } };
		await dialogService.Show<EditDoseDialog>(parameters).Result;
	}
}