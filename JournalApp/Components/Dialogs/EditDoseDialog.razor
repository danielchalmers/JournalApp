@namespace JournalApp
@inject ILogger<EditDoseDialog> logger
@inject IDialogService DialogService
@inject KeyEventService KeyEventService

<MudDialog DefaultFocus="DefaultFocus.FirstChild" OnBackdropClick="Submit">
    <TitleContent>
        <div class="page-header">
            <MudIconButton Icon="@Icons.Material.Filled.Close" Title="Cancel" OnClick="Cancel" />

            <MudText Typo="Typo.h6">Edit day's dose</MudText>

            <MudSpacer />

            <MudIconButton Icon="@Icons.Material.Filled.Check" Title="Submit" OnClick="Submit" />
        </div>
    </TitleContent>

    <DialogContent>
        <MudForm>
            <MudText Style="word-wrap: anywhere">@(Point.Category.Name + ":")</MudText>

            <MudNumericField @bind-Value="Dose"
                             Label="@($"Dose ({Point.Day.Date:ddd, MMM d})")"
                             AdornmentText="@Point.Category.MedicationUnit" Adornment="Adornment.End"
                             MaxLength="6" HideSpinButtons Immediate />


            <MudText title="Details">@CategoryDetails</MudText>
        </MudForm>
    </DialogContent>
</MudDialog>

@code {
    DataPoint _point;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public DataPoint Point
    {
        get => _point;
        set
        {
            _point = value;
            Dose = value?.MedicationDose;
            CategoryDetails = value?.Category?.Details;

            logger.LogDebug($"Using point from category <{value?.Category?.Name}>");
        }
    }

    public decimal? Dose { get; set; }

    public string CategoryDetails { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        KeyEventService.Entered(() => Submit());
    }

    void Cancel()
    {
        KeyEventService.CancelDialog(MudDialog);
    }

    void Submit()
    {
        if (Dose == null || Dose == decimal.Zero)
        {
            // Restore default dose but mark as not taken.
            Point.MedicationDose = Point.Category.MedicationDose;
            Point.Bool = false;

            logger.LogDebug("Restoring default dose but marking as not taken");
        }
        else if (Dose != Point.MedicationDose)
        {
            // Update with new dose.
            Point.MedicationDose = Dose;
            Point.Bool = true;

            logger.LogDebug("Updating with new dose and marking as taken");
        }

        KeyEventService.CloseDialog(MudDialog, true);
    }

    public static async Task ShowDialog(IDialogService dialogService, DataPoint point)
    {
        var parameters = new DialogParameters<EditDoseDialog> { { x => x.Point, point } };
        await dialogService.Show<EditDoseDialog>(parameters).Result;
    }
}
