@namespace JournalApp
@inject IDialogService DialogService
@inject KeyEventService KeyEventService

<MudDialog DefaultFocus="DefaultFocus.FirstChild" OnBackdropClick="Submit">
	<TitleContent>
		<div class="page-header">
			<MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Title="Cancel" OnClick="Cancel" />

			<MudText Typo="Typo.h6">Edit day's dose</MudText>

			<MudSpacer />

			<MudIconButton Icon="@Icons.Material.Filled.Check" Title="Submit" OnClick="Submit" />
		</div>
	</TitleContent>

	<DialogContent>
		<MudForm>
			<MudText Style="word-wrap: anywhere">@(Point.Category.Name + ":")</MudText>

			<MudNumericField @bind-Value="Dose"
							 Label="@($"Dose ({Point.Day.Date:ddd, MMM d})")"
							 AdornmentText="@Point.Category.MedicationUnit" Adornment="Adornment.End"
							 MaxLength="6" HideSpinButtons />

			@if (!string.IsNullOrWhiteSpace(CategoryDetails))
			{
				<MudTextField Value="CategoryDetails" Label="Details" ReadOnly AutoGrow MaxLines="10" />
			}
		</MudForm>
	</DialogContent>
</MudDialog>

@code {
	DataPoint _point;

	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	[Parameter]
	public DataPoint Point
	{
		get => _point;
		set
		{
			_point = value;
			Dose = value?.MedicationDose;
			CategoryDetails = value?.Category?.Details;
		}
	}

	public decimal? Dose { get; set; }

	public string CategoryDetails { get; set; }

	protected override void OnInitialized()
	{
		base.OnInitialized();

		KeyEventService.Entered(() => Cancel());
	}

	void Cancel()
	{
		KeyEventService.CancelDialog(MudDialog);
	}

	void Submit()
	{
		if (Dose == null || Dose == decimal.Zero)
		{
			// Restore default dose but mark as not taken.
			Point.MedicationDose = Point.Category.MedicationDose;
			Point.Bool = false;
		}
		else if (Dose != Point.MedicationDose)
		{
			// Update with new dose.
			Point.MedicationDose = Dose;
			Point.Bool = true;
		}

		KeyEventService.CloseDialog(MudDialog, true);
	}

	public static async Task ShowDialog(IDialogService dialogService, DataPoint point)
	{
		var parameters = new DialogParameters<EditDoseDialog> { { x => x.Point, point } };
		await dialogService.Show<EditDoseDialog>(parameters).Result;
	}
}