@namespace JournalApp
@inject ILogger<EditNoteDialog> logger
@inject IDialogService DialogService
@inject KeyEventService KeyEventService

<MudDialog DefaultFocus="DefaultFocus.FirstChild" OnBackdropClick="Submit">
	<TitleContent>
		<div class="page-header">
			<MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Title="Cancel" OnClick="Cancel" />

			<MudText Typo="Typo.h6">@Point.CreatedAt.ToString("MMM d h:mm tt")</MudText>

			<MudSpacer />

			<MudIconButton Icon="@Icons.Material.Filled.Check" Title="Submit" OnClick="Submit" />
		</div>
	</TitleContent>

	<DialogContent>
		<MudTextField @bind-Value="Text" AutoGrow Lines="10" DisableUnderLine />
	</DialogContent>
</MudDialog>

@code {
	DataPoint _point;

	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	[Parameter]
	public DataPoint Point
	{
		get => _point;
		set
		{
			_point = value;
			Text = value?.Text;
		}
	}

	public string Text { get; set; }

	protected override void OnInitialized()
	{
		base.OnInitialized();

		KeyEventService.Entered(() => Submit());
	}

	void Cancel()
	{
		KeyEventService.CancelDialog(MudDialog);
	}

	void Submit()
	{
		Point.Text = Text;

		if (string.IsNullOrWhiteSpace(Text))
		{
			logger.LogInformation("Discarding point with empty text");
			Point.Deleted = true;
		}

		KeyEventService.CloseDialog(MudDialog, true);
	}

	public static async Task<bool> ShowDialog(IDialogService dialogService, DataPoint point)
	{
		var parameters = new DialogParameters<EditNoteDialog> { { x => x.Point, point } };
		var options = new DialogOptions { FullWidth = true, };

		var result = await dialogService.Show<EditNoteDialog>(parameters, options).Result;

		return !result.Canceled;
	}
}