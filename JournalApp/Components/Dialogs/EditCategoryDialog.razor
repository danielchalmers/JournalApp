@namespace JournalApp
@inject ILogger<EditCategoryDialog> logger
@inject IDialogService DialogService
@inject KeyEventService KeyEventService

<MudDialog DefaultFocus="DefaultFocus.FirstChild" OnBackdropClick="SubmitOrCancel">
	<TitleContent>
		<div class="page-header">
			<MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Title="Cancel" OnClick="Cancel" />

			<MudText Typo="Typo.h6">@(Category == null ? "New" : "Edit") @(Group == "Medications" ? "medication" : "category")</MudText>

			<MudSpacer />

			@if (Category != null)
			{
				<MudIconButton Icon="@Icons.Material.Filled.DeleteForever" Title="Delete forever" OnClick="Delete" />
			}

			<MudIconButton Icon="@Icons.Material.Filled.Check" Title="Submit" OnClick="Submit" />
		</div>
	</TitleContent>

	<DialogContent>
		<MudForm @ref="_form" ValidationDelay="0">
			<MudTextField Label="Name" @bind-Value="Name" Immediate Required MaxLength="200" />

			@if (Group == null)
			{
				<MudSelect Label="Type of data" @bind-Value="Type" Disabled="@(Category != null)">
					<MudSelectItem Value="PointType.Bool">Yes or no</MudSelectItem>
					<MudSelectItem Value="PointType.LowToHigh">Low to high</MudSelectItem>
					<MudSelectItem Value="PointType.MildToSevere">Mild to severe</MudSelectItem>
					<MudSelectItem Value="PointType.Scale">1-5 scale</MudSelectItem>
					<MudSelectItem Value="PointType.Number">Number</MudSelectItem>
					<MudSelectItem Value="PointType.Text">Text</MudSelectItem>
					<MudSelectItem Value="PointType.Note">Note</MudSelectItem>
				</MudSelect>
			}
			else if (Group == "Medications")
			{
				<div class="d-flex flex-row flex-grow-1" style="gap: 0.75em">
					<MudNumericField @bind-Value="MedicationDose" HideSpinButtons Label="Dose" MaxLength="6" Required Immediate />

					<MudTextField @bind-Value="MedicationUnit" Label="Unit" MaxLength="8" Required Immediate Disabled="@(Category != null)" />
				</div>

				<MudSwitch @bind-Value="MedicationEveryDay" Label="Taken every day" title="Auto checks 'yes' every day" Color="Color.Primary" />
			}

			<MudTextField @bind-Value="Details" AutoGrow MaxLines="10"
						  Label="Additional details"
						  Placeholder="@(Group == "Medications" ? "Start date, side effects, etc" : "Scoring criteria, etc")" />
		</MudForm>
	</DialogContent>
</MudDialog>

@code {
	MudForm _form;

	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	[Parameter]
	public string Group { get; set; }

	[Parameter]
	public DataPointCategory Category { get; set; }

	public string Name { get; set; } = string.Empty;

	public PointType Type { get; set; } = PointType.Bool;

	public decimal? MedicationDose { get; set; }

	public string MedicationUnit { get; set; } = "mg";

	public bool MedicationEveryDay { get; set; } = true;

	public string Details { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		KeyEventService.Entered(() => Cancel());

		if (Category != null)
		{
			logger.LogDebug($"Using data from existing category <{Category}>");

			Group = Category.Group;
			Name = Category.Name;
			Type = Category.Type;
			MedicationDose = Category.MedicationDose;
			MedicationUnit = Category.MedicationUnit;
			MedicationEveryDay = Category.MedicationEveryDaySince != null;
			Details = Category.Details;
		}
	}

	void Cancel()
	{
		KeyEventService.CancelDialog(MudDialog);
	}

	async Task Delete()
	{
		logger.LogDebug("Asking for deletion");

		if (await DialogService.ShowCustomMessageBox(string.Empty, $"Are you sure you want to PERMANENTLY delete \"{Name}\"? This cannot be undone.", yesText: "Delete", cancelText: "Cancel") != true)
		{
			logger.LogDebug("Deletion was canceled");
			return;
		}

		Category.Deleted = true;
		logger.LogDebug($"Deleted {Category}");
		KeyEventService.CloseDialog(MudDialog, Category);
	}

	async Task<bool> Submit()
	{
		logger.LogDebug("Submitting");

		await _form.Validate();
		if (!_form.IsValid)
		{
			logger.LogDebug("Form was not valid");
			return false;
		}

		Category ??= new();
		Category.Group = Group;
		Category.Name = Name.Trim();
		Category.Type = Group == "Medications" ? PointType.Medication : Type;
		Category.MedicationDose = MedicationDose;
		Category.MedicationUnit = MedicationUnit?.TrimEnd(); // Allow spaces before, but not after the unit.
		Category.MedicationEveryDaySince = MedicationEveryDay ? DateTimeOffset.Now : null;
		Category.Details = Details;

		logger.LogDebug($"Created new category <Name: {Category.Name}, Type: {Category.Type}>");

		KeyEventService.CloseDialog(MudDialog, Category);
		return true;
	}

	async Task SubmitOrCancel()
	{
		if (!await Submit())
			Cancel();
	}
}