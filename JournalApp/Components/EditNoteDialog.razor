@namespace JournalApp
@inject ILogger<EditNoteDialog> logger
@inject IDialogService DialogService
@inject KeyEventService KeyEventService

<MudDialog DefaultFocus="DefaultFocus.FirstChild" OnBackdropClick="Submit">
    <TitleContent>
        <MudText Typo="Typo.h6">@Title</MudText>
    </TitleContent>

    <DialogContent>
        <MudTextField @bind-Value="Text" Typo="Typo.body2" Placeholder="@Placeholder" Lines="10" AutoGrow Underline="false" Immediate />
    </DialogContent>

    <DialogActions>
        <MudButton Class="cancel-button" StartIcon="@Icons.Material.Rounded.Close" aria-label="Cancel" OnClick="Cancel">Cancel</MudButton>

        <MudButton Class="submit-button" StartIcon="@Icons.Material.Rounded.Check" aria-label="Submit" OnClick="Submit">Submit</MudButton>
    </DialogActions>
</MudDialog>

@code {
    DataPoint _point;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public DataPoint Point
    {
        get => _point;
        set
        {
            _point = value;
            Text = value?.Text;

            if (value?.IsTimestampedNote == true)
            {
                Title = value.CreatedAt.ToLocalTime().ToString("MMM d h:mm tt");
                Placeholder = "What's on your mind?";

                logger.LogDebug($"Using timestamped note <{value.CreatedAt}>");
            }
            else
            {
                Title = "Edit note";
                Placeholder = value?.Category?.Name;

                logger.LogDebug($"Using category note <{Placeholder}>");
            }
        }
    }

    public string Text { get; set; }

    public string Title { get; set; }

    public string Placeholder { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        KeyEventService.Entered(() => Submit());
    }

    void Cancel()
    {
        KeyEventService.CancelDialog(MudDialog);
    }

    void Submit()
    {
        Point.Text = Text;

        if (Point.IsTimestampedNote && string.IsNullOrWhiteSpace(Text))
        {
            logger.LogInformation("Deleting timestamped note because it has no text");
            Point.Deleted = true;
        }
        else
        {
            logger.LogInformation("Submitting note");
        }

        KeyEventService.CloseDialog(MudDialog, true);
    }

    public static async Task<bool> ShowDialog(IDialogService dialogService, DataPoint point)
    {
        var parameters = new DialogParameters<EditNoteDialog> { { x => x.Point, point } };
        var result = await dialogService.Show<EditNoteDialog>(parameters).Result;
        return !result.Canceled;
    }
}
