@namespace JournalApp
@using System.Globalization;
@inject ApplicationDbContext db
@inject IDialogService DialogService

<MudDialog DefaultFocus="DefaultFocus.Element">
	<TitleContent>
		<div class="page-header">
			<MudIconButton Icon="@Icons.Material.Filled.ArrowBackIos" OnClick="Close" />

			@* <MudButton OnClick="@(async () => await ScrollManager.ScrollToTopAsync(".page-header"))" DisableRipple Variant="Variant.Text"> *@
			<MudText Typo="Typo.h6">Mood Grid</MudText>
			@* </MudButton> *@
		</div>
	</TitleContent>

	<DialogContent>
		<div class="mood-grid">
			<div class="d-flex">
				<MudIconButton Icon="@Icons.Material.Filled.ArrowBackIos" OnClick="() => SelectedYear--" />

				<MudButton OnClick="() => SelectedYear = DateTime.Now.Year">
					<MudText Typo="Typo.h3">@StartDate.Year</MudText>
				</MudButton>

				<MudIconButton Icon="@Icons.Material.Filled.ArrowForwardIos" OnClick="() => SelectedYear++" />
			</div>

			@foreach (var daysInMonth in DaysInRange.GroupBy(x => x.Date.Month))
			{
				<MudText Typo="Typo.h4">@(CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(daysInMonth.Key))</MudText>

				<div class="mood-grid-month">
					@foreach (var daysInWeek in Enumerable.Range(1, 35).Chunk(7))
					{
						<div class="mood-grid-week">
							@foreach (var day in daysInWeek.Select(x => daysInMonth.SingleOrDefault(y => y.Date.Day == x)))
							{
								<div class="mood-block-container">
									@if (day != null)
									{
										<div class="mood-block" style="background-color:@day.Color;" onclick="@(() => Close(day.Date))">
											<b>@day.Date.Day</b>
											<MudSpacer/>
											@day.Emoji
										</div>
									}
								</div>
							}
						</div>
					}
				</div>
			}
		</div>
	</DialogContent>
</MudDialog>

@code {
	int _selectedYear;

	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	int SelectedYear
	{
		get => _selectedYear;
		set
		{
			_selectedYear = value;
			UpdateGrid();
		}
	}

	DateOnly StartDate { get; set; }
	DateOnly EndDate { get; set; }
	List<DayGridItem> DaysInRange { get; set; }

	protected override void OnInitialized()
	{
		base.OnInitialized();

		SelectedYear = DateTime.Now.Year;
	}

	void UpdateGrid()
	{
		var moodCategory = db.Categories.FirstOrDefault(x => x.Enabled && x.Type == DataType.Mood);

		StartDate = new(SelectedYear, 1, 1);
		EndDate = new(SelectedYear, 12, 31);
		DaysInRange = new();

		for (DateOnly date = StartDate; date <= EndDate; date = date.AddDays(1))
		{
			var moodDataPoint = moodCategory?.DataPoints?.FirstOrDefault(x => x.Day.Date == date);
			var emoji = moodDataPoint?.Mood;
			var color = GetMoodColor(emoji);

			DaysInRange.Add(new(date, emoji, color));
		}
	}

	string GetMoodColor(string emoji) => emoji switch
	{
		// https://www.colorhexa.com/0091ea-to-ff6d00
		"😁" => "#0091ea",
		"😀" => "#2b8bc3",
		"🙂" => "#55859c",
		"😐" => "#807f75",
		"🙁" => "#aa794e",
		"😢" => "#d47327",
		"😭" => "#ff6d00",
		_ => "transparent"
	};

	private record DayGridItem(DateOnly Date, string Emoji, string Color);

	void Close()
	{
		MudDialog.Close(DialogResult.Ok(true));
	}

	void Close(DateOnly date)
	{
		MudDialog.Close(DialogResult.Ok(date));
	}
}