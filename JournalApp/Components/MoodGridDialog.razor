@namespace JournalApp
@using System.Globalization;
@inject ApplicationDbContext db
@inject IDialogService DialogService
@inject IScrollManager ScrollManager

<MudDialog DefaultFocus="DefaultFocus.Element" OnBackdropClick="Close">
	<TitleContent>
		<div class="page-header">
			<MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="Close" />

			<MudText Typo="Typo.h6">Mood Grid</MudText>
		</div>
	</TitleContent>

	<DialogContent>
		<div class="mood-grid">
			<div class="mood-grid-switcher">
				<MudIconButton Icon="@Icons.Material.Filled.ArrowBackIos" OnClick="() => SelectedYear--" />

				<MudButton OnClick="() => SelectedYear = DateTime.Now.Year">
					<MudText Typo="Typo.h3">@SelectedYear</MudText>
				</MudButton>

				<MudIconButton Icon="@Icons.Material.Filled.ArrowForwardIos" OnClick="() => SelectedYear++" Disabled="@(SelectedYear >= DateTime.Now.Year)" />
			</div>

			@foreach (var month in _gridYear.GridMonths)
			{
				<div class="mood-grid-month mood-grid-month-@(month.Month)">
					<div class="mood-grid-month-header">
						<MudText Typo="Typo.h4">@(month.Name)</MudText>
					</div>

					<div class="mood-blocks-month">
						<div class="mood-blocks-week">
							@foreach (var day in month.DaysOfWeek)
							{
								<div class="mood-block-container">
									<b>@(day.ToString()[0..2])</b>
								</div>
							}
						</div>

						@foreach (var row in month.GridDays.Chunk(7))
						{
							<div class="mood-blocks-week">
								@foreach (var day in row)
								{
									<div class="mood-block-container" style="background-color:@(day.Color ?? "transparent");">
										<div class="mood-block" onclick="@(() => Close(day.Date))">
											<b>@day.Day</b>
											<MudSpacer />
											@day.Emoji
										</div>
									</div>
								}
							</div>
						}
					</div>
				</div>
			}
		</div>
	</DialogContent>
</MudDialog>

@code {
	int _selectedYear;
	GridYear _gridYear;

	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	int SelectedYear
	{
		get => _selectedYear;
		set
		{
			_selectedYear = value;

			var moodCategory = db.Categories.Single(x => x.Type == DataType.Mood).DataPoints.Where(x => x.Day.Date.Year == value).ToHashSet();
			_gridYear = new GridYear(value, moodCategory);
		}
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();

		SelectedYear = DateTime.Now.Year;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);

		if (firstRender)
		{
			// Wait for full render before scrolling.
			// TODO: Possible race condition.
			await Task.Yield();
			await Task.Delay(300);
			await ScrollManager.ScrollIntoViewAsync($".mood-grid-month-{DateTime.Now.Month}", ScrollBehavior.Smooth);
		}
	}

	void Close()
	{
		MudDialog.Close(DialogResult.Ok(true));
	}

	void Close(DateOnly? date)
	{
		if (date == null || date > DateOnly.FromDateTime(DateTime.Now))
			return;

		MudDialog.Close(DialogResult.Ok(date));
	}

	protected readonly record struct GridDay(int? Day, int Index, DateOnly? Date, string Emoji, string Color);

	protected readonly struct GridMonth
	{
		readonly DateTimeFormatInfo _dateTimeFormat = CultureInfo.CurrentCulture.DateTimeFormat;

		public GridMonth(int month, HashSet<DataPoint> dataPoints, IEnumerable<DateOnly> dates)
		{
			Month = month;
			Name = _dateTimeFormat.GetMonthName(Month);
			DataPoints = dataPoints;
			Dates = dates.ToList();
			GridDays = GetGridDays().ToList();
			DaysOfWeek = GetDaysOfWeek().ToList();
		}

		public int Month { get; }
		public string Name { get; }
		public HashSet<DataPoint> DataPoints { get; }
		public IReadOnlyList<DateOnly> Dates { get; }
		public IReadOnlyList<GridDay> GridDays { get; }
		public IReadOnlyList<DayOfWeek> DaysOfWeek { get; }

		string GetMoodColor(string emoji) => emoji switch
		{
			// https://www.colorhexa.com/0091ea-to-ff6d00
			"😄" => "#0091ea",
			"😀" => "#2b8bc3",
			"🙂" => "#55859c",
			"😐" => "#807f75",
			"🙁" => "#aa794e",
			"😧" => "#d47327",
			"😢" => "#ff6d00",
			_ => "transparent"
		};

		IEnumerable<GridDay> GetGridDays()
		{
			var firstDate = Dates.First();
			// If the first day of the month is Thu, but the culture starts the week on Mon, the grid will have 3 preceding blank spaces, making the first index -2.
			var firstIndex = 1 - (7 - (_dateTimeFormat.FirstDayOfWeek - firstDate.DayOfWeek) % 7) % 7;
			var daysInMonth = DateTime.DaysInMonth(firstDate.Year, firstDate.Month);

			foreach (var gridIndex in Enumerable.Range(firstIndex, 7 * 6))
			{
				var day = gridIndex >= 1 && gridIndex <= daysInMonth ? gridIndex : (int?)null;

				// Bundle date during search to avoid additional DB lookups (thru DataPoint.Day).
				(DataPoint Point, DateOnly Date)? match = DataPoints.Select(p =>
				{
					var date = p.Day.Date;
					return (p, date);
				}).SingleOrDefault(x => x.date.Month == firstDate.Month && x.date.Day == gridIndex);

				// Make next search easier by removing uniquely dated point.
				if (match != null)
					DataPoints.Remove(match.Value.Point);

				var emoji = match?.Point?.Mood;
				var color = GetMoodColor(emoji);

				yield return new GridDay(day, gridIndex, match?.Date, emoji, color);
			}
		}

		IEnumerable<DayOfWeek> GetDaysOfWeek()
		{
			foreach (var i in Enumerable.Range((int)_dateTimeFormat.FirstDayOfWeek, 7))
				yield return (DayOfWeek)(i % 7);
		}
	}

	protected readonly struct GridYear
	{
		public GridYear(int year, HashSet<DataPoint> dataPoints)
		{
			Year = year;
			DataPoints = dataPoints;
			GridMonths = GetGridMonths().ToList();
		}

		IEnumerable<GridMonth> GetGridMonths()
		{
			var startDate = new DateOnly(Year, 1, 1);
			var endDate = new DateOnly(Year, 12, 31);
			var dates = startDate.GetDatesTo(endDate).ToList();

			for (int i = 1; i <= 12; i++)
				yield return new GridMonth(i, DataPoints, dates.Where(x => x.Month == i));
		}

		public int Year { get; }
		public HashSet<DataPoint> DataPoints { get; }
		public IReadOnlyList<GridMonth> GridMonths { get; }
	}
}