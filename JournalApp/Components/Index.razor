@namespace JournalApp
@page "/"
@inherits LayoutComponentBase
@inject ApplicationDbContext db
@inject ISnackbar SnackbarService
@inject IDialogService DialogService
@inject IScrollManager ScrollManager

<MudThemeProvider Theme="AppTheme" IsDarkMode />
	<MudDialogProvider MaxWidth="MaxWidth.Large"
					   NoHeader="false"
					   CloseButton="false"
					   CloseOnEscapeKey="true"
					   Position="DialogPosition.Center" />
	<MudSnackbarProvider />

	<div id="main-header">
		<MudAppBar Color="Color.Primary" Fixed="false" Dense>
		<MudButton OnClick="ScrollToTop" DisableRipple Variant="Variant.Text">
				<MudText Typo="Typo.h6">🙂 @ThisAssembly.AssemblyTitle BETA</MudText>
			</MudButton>

			<MudSpacer />

			<MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.BottomLeft">
				<MudMenuItem OnClick="ManageCategories">Manage categories...</MudMenuItem>
				<MudMenuItem OnClick="ManageMedications">Manage medications...</MudMenuItem>
				<MudMenuItem OnClick="NewNote">New note...</MudMenuItem>

				@* Show Safety Plan if the Depression category is enabled *@
				@if (db.Categories.Single(x => x.Guid == new Guid("7330B995-0B56-46FF-9DD6-9CFC550FF5C8")).Enabled)
			{
				<MudMenuItem OnClick="OpenSafetyPlan">View Safety Plan...</MudMenuItem>
			}

			<MudMenuItem OnClick="@(_ => AppInfo.Current.ShowSettingsUI())">System settings...</MudMenuItem>
			<MudMenuItem Disabled>v@(ThisAssembly.AssemblyFileVersion)</MudMenuItem>
		</MudMenu>
	</MudAppBar>

	<div class="d-flex justify-center align-center">
		<MudIconButton Icon="@Icons.Material.Filled.ArrowBackIos" OnClick="PreviousDay" Disabled="@(_day.Date.DayNumber <= 1)" />

		<div id="day-title">
			<MudButton OnClick="OpenMoodGrid">
				<MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="false">@_day.Date.ToString("ddd, MMM d")</MudText>
			</MudButton>
		</div>

		<MudIconButton Icon="@Icons.Material.Filled.ArrowForwardIos" OnClick="NextDay" Disabled="@(_day.Date > DateOnly.FromDateTime(DateTime.Now))" />
	</div>
</div>

<div id="main-body">
	<MudStack id="main-timeline">
		@foreach (var group in db.Categories.GroupBy(x => x.Group))
		{
			<div class="data-point-group">
				@if (!string.IsNullOrEmpty(group.Key))
				{
					<div class="data-point-group-header">
						@if (group.Key == "Medications")
						{
							<MudText Typo="Typo.h5">Medications taken</MudText>
						}
						else if (group.Key == "Notes")
						{
							<MudText Typo="Typo.h5">Today's notes</MudText>
						}
					</div>
				}

				@foreach (var category in group.Where(x => x.Enabled).OrderBy(x => x.Index).ThenBy(x => x.Name))
				{
					@foreach (var point in category.DataPoints.Where(x => x.Day == _day && !x.IsDeleted))
					{
						<div class="data-point-container">
							@if (!string.IsNullOrEmpty(category.Name))
							{
								<div class="data-point-header">
									<MudText>@category.Name</MudText>

									@if (point.DataType == DataType.Medication)
									{
										<MudText>&NonBreakingSpace;@($"{category.MedicationDose:0.##}{category.MedicationUnit}")</MudText>

										if ((point.MedicationDose != category.MedicationDose || point.MedicationUnit != category.MedicationUnit) && point.MedicationDose != null && point.MedicationUnit != null)
										{
											<MudText>&NonBreakingSpace;@($"- {point.MedicationDose:0.##}{point.MedicationUnit}")</MudText>
										}
									}

									<MudText>:</MudText>
								</div>
							}

							@if (!category.SingleLine)
							{
								<div class="break-flex-column" />
							}

							<div class="data-point-view">
								<DataPointView DataPoint="point" DialogClosed="_ => StateHasChanged()" />
							</div>
						</div>
					}
				}

				<div class="data-point-group-footer">
					@if (group.Key == null)
					{
						<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Category" OnClick="ManageCategories" FullWidth>Manage categories</MudButton>
					}
					else if (group.Key == "Medications")
					{
						<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Medication" OnClick="ManageMedications" FullWidth>Manage medications</MudButton>
					}
					else if (group.Key == "Notes")
					{
						<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Comment" OnClick="NewNote" FullWidth>New note</MudButton>
					}
				</div>
			</div>
		}
	</MudStack>
</div>

@code {
	Day _day;
	DateTimeOffset _stoppedDate;

	MudTheme AppTheme { get; } = new()
		{
			PaletteDark = new PaletteDark() { TextDisabled = "#ffffffb2" },
		};

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		await SetDay(await db.GetOrCreateToday());

		// https://learn.microsoft.com/en-us/dotnet/maui/fundamentals/app-lifecycle
		var window = App.Current.Windows.Single();
		window.Deactivated += Window_Deactivated;
		window.Destroying += Window_Deactivated;
		window.Stopped += Window_Stopped;
		window.Resumed += Window_Resumed;
	}

	private void Window_Deactivated(object sender, EventArgs e)
	{
		Debug.WriteLine("Window deactivated or destroying; Saving database");
		db.SaveChanges();
	}

	private void Window_Stopped(object sender, EventArgs e)
	{
		_stoppedDate = DateTimeOffset.Now;
		Debug.WriteLine($"Window was stopped at {_stoppedDate}");
	}

	private async void Window_Resumed(object sender, EventArgs e)
	{
		// Go to current day if user returns after a certain amount of time.
		// But not on Windows, because Resumed can occur without a corresponding Stopped for some ungodly reason.
		if (DeviceInfo.Current.Platform != DevicePlatform.WinUI && DateTimeOffset.Now - _stoppedDate > TimeSpan.FromHours(1))
		{
			Debug.WriteLine($"Switching to current day after user was gone for a while");
			await SetDay(await db.GetOrCreateToday(), scrollToTop: true);
		}
	}

	async Task ScrollToTop() => await ScrollManager.ScrollToTopAsync("main-body");

	async Task SetDay(Day day, bool scrollToTop = false)
	{
		Debug.WriteLine($"Going to day {day.Date} and {(scrollToTop ? "" : "not ")}scrolling to top");
		_day = day;

		if (scrollToTop)
			await ScrollToTop();

		StateHasChanged();
	}

	async Task PreviousDay() => await SetDay(await db.GetOrCreatePreviousDay(_day));

	async Task NextDay() => await SetDay(await db.GetOrCreateNextDay(_day));

	async Task OpenMoodGrid()
	{
		Debug.WriteLine("Opening Mood Grid");
		var options = new DialogOptions { FullScreen = true, };
		var parameters = new DialogParameters<MoodGrid.MoodGridDialog> { { x => x.OpenToDate, _day.Date } };

		var result = await DialogService.Show<MoodGrid.MoodGridDialog>(parameters, options).Result;

		if (result.Data is DateOnly date)
		{
			await SetDay(await db.GetOrCreateDay(date), scrollToTop: true);
		}
	}

	async Task ManageCategories()
	{
		Debug.WriteLine("Managing categories");
		var options = new DialogOptions { FullScreen = true, };

		await DialogService.Show<ManageCategoriesDialog>(options).Result;

		db.AddMissingDataPoints(_day);
	}

	async Task ManageMedications()
	{
		Debug.WriteLine("Managing medications");
		var options = new DialogOptions { FullScreen = true, };
		var parameters = new DialogParameters<ManageCategoriesDialog> { { x => x.Group, "Medications" } };

		await DialogService.Show<ManageCategoriesDialog>(parameters, options).Result;

		db.AddMissingDataPoints(_day);
	}

	async Task OpenSafetyPlan()
	{
		Debug.WriteLine("Opening Safety Plan");
		var options = new DialogOptions { FullScreen = true, };
		var plan = Preferences.Default.GetJson<SafetyPlan>("safety_plan") ?? new();
		var parameters = new DialogParameters<SafetyPlanDialog> { { x => x.SafetyPlan, plan } };

		var result = await DialogService.Show<SafetyPlanDialog>(parameters, options).Result;

		if (result.Canceled)
			return;

		Preferences.Default.SetJson("safety_plan", plan);
	}

	async Task NewNote()
	{
		Debug.WriteLine("Creating new note");

		var note = db.CreateNote(_day);

		await EditTextDialog.ShowDialog(DialogService, note);

		if (string.IsNullOrWhiteSpace(note.Text))
			return;

		note.Category.DataPoints.Add(note);
		await db.SaveChangesAsync();
	}
}