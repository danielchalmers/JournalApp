@namespace JournalApp
@page "/"
@inherits LayoutComponentBase
@inject ApplicationDbContext db
@inject ILogger<Index> logger
@inject ISnackbar SnackbarService
@inject IDialogService DialogService
@inject IScrollManager ScrollManager

<MudThemeProvider Theme="AppTheme" IsDarkMode />
	<MudDialogProvider MaxWidth="MaxWidth.Medium"
					   NoHeader="false"
					   CloseButton="false"
					   CloseOnEscapeKey="true"
					   Position="DialogPosition.Center" />
	<MudSnackbarProvider />

	<ErrorBoundary>
		<ChildContent>
			<div id="main-header">
				<MudAppBar Color="Color.Primary" Fixed="false" Dense>
				<MudButton OnClick="ScrollToTop" DisableRipple Variant="Variant.Text">
						<MudText Typo="Typo.h6">🙂 @ThisAssembly.AssemblyTitle BETA</MudText>
					</MudButton>

					<MudSpacer />

					<MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.BottomLeft">
						<MudMenuItem OnClick="ManageCategories">Categories</MudMenuItem>
						<MudMenuItem OnClick="ManageMedications">Medications</MudMenuItem>
						<MudMenuItem OnClick="NewNote">New note</MudMenuItem>

						@* Show Safety Plan if the Depression category is enabled *@
						@if (db.Categories.SingleOrDefault(x => x.Guid == new Guid("7330B995-0B56-46FF-9DD6-9CFC550FF5C8"))?.Enabled == true)
					{
						<MudMenuItem OnClick="OpenSafetyPlan">Safety Plan</MudMenuItem>
					}

					<MudMenuItem OnClick="OpenWorksheets">Worksheets</MudMenuItem>

					<MudMenuItem OnClick="@(_ => AppInfo.Current.ShowSettingsUI())">System settings</MudMenuItem>
					<MudMenuItem Disabled>v@(ThisAssembly.AssemblyFileVersion)</MudMenuItem>
				</MudMenu>
			</MudAppBar>

			<div class="d-flex justify-center align-center">
				<MudIconButton Icon="@Icons.Material.Filled.ArrowBackIos" OnClick="PreviousDay" Disabled="@(_day.Date.DayNumber <= 1)" />

				<div id="day-title">
					<MudButton OnClick="OpenMoodGrid">
						<MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="false">@_day.Date.ToString("ddd, MMM d")</MudText>
					</MudButton>
				</div>

				<MudIconButton Icon="@Icons.Material.Filled.ArrowForwardIos" OnClick="NextDay" Disabled="@(_day.Date > DateOnly.FromDateTime(DateTime.Now))" />
			</div>
		</div>

		<div id="main-body">
			<MudStack id="main-timeline">
				@foreach (var group in db.Categories.GroupBy(x => x.Group))
				{
					<div class="data-point-group">
						@if (!string.IsNullOrEmpty(group.Key))
						{
							<div class="data-point-group-header">
								@if (group.Key == "Medications")
								{
									<MudText Typo="Typo.h5">Medications taken</MudText>
								}
								else if (group.Key == "Notes")
								{
									<MudText Typo="Typo.h5">Today's notes</MudText>
								}
							</div>
						}

						@foreach (var category in group.Where(x => x.Enabled).OrderBy(x => x.Index).ThenBy(x => x.Name))
						{
							@foreach (var point in _day.DataPoints.Where(x => !x.IsDeleted && x.Category == category))
							{
								<div class="data-point-container">
									@if (!string.IsNullOrEmpty(category.Name))
									{
										<div class="data-point-header">
											<MudText>@category.Name</MudText>

											@if (point.DataType == DataType.Medication)
											{
												<MudText>&NonBreakingSpace;@($"{category.MedicationDose:0.##}{category.MedicationUnit}")</MudText>

												if ((point.MedicationDose != category.MedicationDose || point.MedicationUnit != category.MedicationUnit) && point.MedicationDose != null && point.MedicationUnit != null)
												{
													<MudText>&NonBreakingSpace;@($"- {point.MedicationDose:0.##}{point.MedicationUnit}")</MudText>
												}
											}

											<MudText>:</MudText>
										</div>
									}

									@if (!category.SingleLine)
									{
										<div class="break-flex-column" />
									}

									<div class="data-point-view">
										<DataPointView DataPoint="point" DialogClosed="_ => StateHasChanged()" />
									</div>
								</div>
							}
						}

						<div class="data-point-group-footer">
							@if (group.Key == null)
							{
								<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Category" OnClick="ManageCategories" FullWidth>Manage categories</MudButton>
							}
							else if (group.Key == "Medications")
							{
								<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Medication" OnClick="ManageMedications" FullWidth>Manage medications</MudButton>
							}
							else if (group.Key == "Notes")
							{
								<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Comment" OnClick="NewNote" FullWidth>New note</MudButton>
							}
						</div>
					</div>
				}
			</MudStack>
		</div>
	</ChildContent>

	<ErrorContent Context="ex">
		<div id="blazor-error-ui">
			<b>An error occurred with the app: @ex.ToString().</b>
			<a href="" class="reload">Reload</a>
		</div>
	</ErrorContent>
</ErrorBoundary>

@code {
	Day _day;
	DateTimeOffset _stoppedDate;

	MudTheme AppTheme { get; } = new()
		{
			PaletteDark = new PaletteDark() { TextDisabled = "#ffffffb2" },
		};

	protected override async Task OnInitializedAsync()
	{
		await ApplicationDbSeedData.SeedAsync(db, logger);

		logger.LogInformation($"Initializing at {DateTimeOffset.Now}");

		await GoToDay(DateOnly.FromDateTime(DateTime.Now));

		// https://learn.microsoft.com/en-us/dotnet/maui/fundamentals/app-lifecycle
		var window = App.Current.Windows.Single();
		window.Deactivated += Window_DeactivatedOrDestroying;
		window.Destroying += Window_DeactivatedOrDestroying;
		window.Stopped += Window_Stopped;
		window.Resumed += Window_Resumed;
	}

	private async void Window_DeactivatedOrDestroying(object sender, EventArgs e)
	{
		logger.LogInformation("Window deactivated or destroying; Saving database");
		await db.SaveChangesAsync();
	}

	private void Window_Stopped(object sender, EventArgs e)
	{
		_stoppedDate = DateTimeOffset.Now;
		logger.LogInformation($"Window was stopped at {_stoppedDate}");
	}

	private async void Window_Resumed(object sender, EventArgs e)
	{
		// Go to current day if user returns after a certain amount of time,
		// but not on Windows because Resumed can occur without a corresponding Stopped for some reason.
		if (DeviceInfo.Current.Platform != DevicePlatform.WinUI && DateTimeOffset.Now - _stoppedDate > TimeSpan.FromHours(1))
		{
			logger.LogInformation($"Switching from {_day} to current day after user was gone since {_stoppedDate}");
			await GoToDay(DateOnly.FromDateTime(DateTime.Now));
		}
	}

	async Task ScrollToTop()
	{
		logger.LogInformation($"Scrolling to the top");
		await ScrollManager.ScrollToTopAsync("main-body");
	}

	async Task GoToDay(DateOnly date, bool scrollToTop = false)
	{
		var sw = Stopwatch.StartNew();
		_day = await db.GetOrCreateDay(date);
		sw.Stop();
		logger.LogInformation($"Went to {_day} in {sw.ElapsedTicks} ticks");

		if (scrollToTop)
			await ScrollToTop();

		StateHasChanged();
	}

	async Task PreviousDay()
	{
		logger.LogInformation($"Going to the previous day from {_day}");
		await GoToDay(_day.Date.Previous());
	}

	async Task NextDay()
	{
		logger.LogInformation($"Going to the next day from {_day}");
		await GoToDay(_day.Date.Next());
	}

	async Task OpenMoodGrid()
	{
		logger.LogInformation("Opening Mood Grid");
		var options = new DialogOptions { FullScreen = true, };
		var parameters = new DialogParameters<MoodGrid.MoodGridDialog> { { x => x.OpenToDate, _day.Date } };

		var result = await DialogService.Show<MoodGrid.MoodGridDialog>(parameters, options).Result;

		if (result.Data is DateOnly date)
		{
			logger.LogInformation($"Selected {date} from the Mood Grid");
			await GoToDay(date, scrollToTop: true);
		}
	}

	async Task ManageCategories()
	{
		logger.LogInformation("Managing categories");
		var options = new DialogOptions { FullScreen = true, };

		await DialogService.Show<ManageCategoriesDialog>(options).Result;

		if (db.AddMissingDataPoints(_day))
			logger.LogInformation($"Added missing data points for {_day}");
	}

	async Task ManageMedications()
	{
		logger.LogInformation("Managing medications");
		var options = new DialogOptions { FullScreen = true, };
		var parameters = new DialogParameters<ManageCategoriesDialog> { { x => x.Group, "Medications" } };

		await DialogService.Show<ManageCategoriesDialog>(parameters, options).Result;

		if (db.AddMissingDataPoints(_day))
			logger.LogInformation($"Added missing data points for {_day}");
	}

	async Task OpenSafetyPlan()
	{
		logger.LogInformation("Opening Safety Plan");
		var options = new DialogOptions { FullScreen = true, };
		var plan = Preferences.Default.GetJson<SafetyPlan>("safety_plan") ?? new();
		var parameters = new DialogParameters<SafetyPlanDialog> { { x => x.Plan, plan } };

		var result = await DialogService.Show<SafetyPlanDialog>(parameters, options).Result;

		if (result.Canceled)
			return;

		logger.LogInformation("Saving Safety Plan");
		Preferences.Default.SetJson("safety_plan", plan);
	}

	async Task OpenWorksheets()
	{
		logger.LogInformation("Opening worksheets dialog");
		var options = new DialogOptions { FullScreen = true, };
		var result = await DialogService.Show<WorksheetsDialog>(options).Result;
	}

	async Task NewNote()
	{
		logger.LogInformation("Creating new note");

		var note = db.CreateNote(_day);

		var dialogSubmitted = await EditTextDialog.ShowDialog(DialogService, note);

		if (!dialogSubmitted || note.IsDeleted)
			return;

		logger.LogInformation("Saving new note");
		note.Category.DataPoints.Add(note);
		await db.SaveChangesAsync();
	}
}
