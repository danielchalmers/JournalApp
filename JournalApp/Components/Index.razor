@namespace JournalApp
@page "/"
@inherits LayoutComponentBase
@inject ApplicationDbContext db
@inject FocusService FocusService

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudAppBar id="main-header" Color="Color.Primary" Fixed="false" Dense="true">
	<MudText>@ThisAssembly.AssemblyTitle 🙂</MudText>

	<MudSpacer />

	<MudMenu Color="Color.Secondary" StartIcon="@Icons.Material.Outlined.ArrowDropDown" Variant="Variant.Filled">
		<MudMenuItem OnClick="NewNote" Icon="@Icons.Material.Outlined.Comment">New note</MudMenuItem>
	</MudMenu>
</MudAppBar>

<div id="main-body">
	<MudStack id="main-timeline">
		@foreach (var context in db.Entries.OrderByDescending(e => e.Date).Where(e => !e.IsDeleted))
		{
			<EntryView Model="@context" />
		}
	</MudStack>
</div>

@code {

	protected override void OnInitialized()
	{
		base.OnInitialized();

		FocusService.FocusChanged += async (_, _) =>
		{
			StateHasChanged();

			// Save changes now that user has finished editing a note.
			await db.SaveChangesAsync();
		};
	}

	async Task NewNote()
	{
		await db.Entries.AddAsync(new Note() { Date = DateTime.Now });
		await db.SaveChangesAsync();
	}
}