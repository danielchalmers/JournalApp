@namespace JournalApp
@page "/"
@using System.Diagnostics;
@inherits LayoutComponentBase
@inject ApplicationDbContext db
@inject ISnackbar SnackbarService
@inject IDialogService DialogService
@inject IScrollManager ScrollManager

<MudThemeProvider IsDarkMode="true" />
<MudDialogProvider FullWidth="true"
				   MaxWidth="MaxWidth.Large"
				   NoHeader="false"
				   CloseButton="false"
				   CloseOnEscapeKey="false"
				   Position="DialogPosition.Center" />
<MudSnackbarProvider />

<div id="main-header">
	<MudAppBar Color="Color.Primary" Fixed="false" Dense="true">
		<MudText Typo="Typo.h6">🙂 @ThisAssembly.AssemblyTitle</MudText>

		<MudSpacer />

		<MudIconButton Icon="@Icons.Material.Filled.Apps" OnClick="ShowMoodGrid" />

		<MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.BottomLeft">
			<MudMenuItem OnClick="ManageCategories">Manage categories...</MudMenuItem>
			<MudMenuItem OnClick="ManageMedications">Manage medications...</MudMenuItem>
			<MudMenuItem OnClick="@(() => AppInfo.Current.ShowSettingsUI())">System settings...</MudMenuItem>
			<MudMenuItem Disabled="true">v@(ThisAssembly.AssemblyFileVersion)</MudMenuItem>
			</MudMenu>
		</MudAppBar>

		<div class="d-flex justify-center align-center pa-1">
			<MudIconButton Icon="@Icons.Material.Outlined.ArrowBackIos" OnClick="PreviousDay" Disabled="@(_day.Date.DayNumber <= 1)" />

			<div id="day-title">
				<MudMenu @ref="datePickerMenu" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.BottomCenter">
					<ActivatorContent>
						<MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="false">@_day.Date.ToString("ddd, MMM d")</MudText>
					</ActivatorContent>

					<ChildContent>
						<MudDatePicker PickerVariant="PickerVariant.Static" DateChanged="OnDaySelected" DisableToolbar="true" IsDateDisabledFunc="@(d => d > DateTime.Now)" />
					</ChildContent>
				</MudMenu>
			</div>

			<MudIconButton Icon="@Icons.Material.Outlined.ArrowForwardIos" OnClick="NextDay" Disabled="@(_day.Date > DateOnly.FromDateTime(DateTime.Now))" />
		</div>
	</div>

	<div id="main-body">
		<MudStack id="main-timeline">
			@foreach (var group in db.Categories.GroupBy(x => x.Group))
		{
			<div class="data-point-group">
				@if (!string.IsNullOrEmpty(group.Key))
				{
					<div class="data-point-group-header">
						@if (group.Key == "Medications")
						{
							<MudText Typo="Typo.h5">Medications taken</MudText>
						}
						else if (group.Key == "Notes")
						{
							<MudText Typo="Typo.h5">Today's notes</MudText>
						}
					</div>
				}

				@foreach (var category in group.Where(x => x.Enabled).OrderBy(x => x.Index).ThenBy(x => x.Name))
				{
					@foreach (var point in category.DataPoints.Where(x => x.Day == _day && !x.IsDeleted))
					{
						<div class="data-point-container">
							@if (!string.IsNullOrEmpty(category.Name))
							{
								<MudText Class="data-point-header" Align="Align.Right">@category.Name:</MudText>
							}

							@if (!category.SingleLine)
							{
								<div class="break-column" />
							}

							<div class="data-point-view">
								<DataPointView DataPoint="point" />
							</div>
						</div>
					}
				}

				@if (!string.IsNullOrEmpty(group.Key))
				{
					<div class="data-point-group-footer">
						@if (group.Key == "Medications")
						{
							<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Medication" OnClick="ManageMedications" FullWidth>Manage medications</MudButton>
						}
						else if (group.Key == "Notes")
						{
							<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Comment" OnClick="NewNote" FullWidth>New note</MudButton>
						}
					</div>
				}
			</div>
		}
	</MudStack>
</div>

@code {
	Day _day;
	MudMenu datePickerMenu;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		_day = await db.GetDay(DateTime.Now);

		var window = App.Current.Windows.Single();
		window.Deactivated += Window_Deactivated;
		window.Destroying += Window_Deactivated;
	}

	private void Window_Deactivated(object sender, EventArgs e)
	{
		Debug.WriteLine("Window was deactivated or is being destroyed; Saving database...");
		db.SaveChanges();
	}

	async Task OnDaySelected(DateTime? dateTime)
	{
		datePickerMenu.CloseMenu();

		await SetDay(await db.GetDay(dateTime.Value));
	}

	async Task SetDay(Day day)
	{
		_day = day;
		await ScrollManager.ScrollToTopAsync("main-body");
	}

	async Task PreviousDay()
	{
		await SetDay(await db.GetPreviousDay(_day));
	}

	async Task NextDay()
	{
		await SetDay(await db.GetNextDay(_day));
	}

	async Task ShowMoodGrid()
	{
		var options = new DialogOptions { CloseButton = true, FullScreen = true, };

		await DialogService.Show<MoodGridDialog>(string.Empty, options).Result;
	}

	async Task ManageCategories()
	{
		await DialogService.Show<ManageCategoriesDialog>("Manage categories").Result;

		db.AddMissingDataPoints(_day);
	}

	async Task ManageMedications()
	{
		var parameters = new DialogParameters { { nameof(ManageCategoriesDialog.Group), "Medications" } };
		await DialogService.Show<ManageCategoriesDialog>("Manage medications", parameters).Result;

		db.AddMissingDataPoints(_day);
	}

	async Task NewNote()
	{
		var note = db.CreateNote(_day);

		await EditTextDialog.ShowDialog(DialogService, note);

		note.Category.DataPoints.Add(note);

		await db.SaveChangesAsync();
	}
}