@namespace JournalApp
@page "/"
@inherits LayoutComponentBase
@inject ApplicationDbContext db
@inject ISnackbar SnackbarService
@inject IDialogService DialogService
@inject IScrollManager ScrollManager

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider FullWidth="true"
				   MaxWidth="MaxWidth.Large"
				   NoHeader="false"
				   CloseButton="false"
				   DisableBackdropClick="true"
				   CloseOnEscapeKey="false"
				   Position="DialogPosition.TopCenter" />
<MudSnackbarProvider />

<div id="main-header">
	<MudAppBar Color="Color.Primary" Fixed="false">
		<MudText>🙂 @ThisAssembly.AssemblyTitle</MudText>

		<MudSpacer />

		<MudMenu Icon="@Icons.Material.Filled.MoreVert">
			<MudMenuItem OnClick="ResetDatabase">Reset database...</MudMenuItem>
			<MudMenuItem OnClick="ManageCategories">Manage categories...</MudMenuItem>
			<MudMenuItem OnClick="ManageMedications">Manage medications...</MudMenuItem>
			<MudMenuItem OnClick="@(() => AppInfo.Current.ShowSettingsUI())">System settings...</MudMenuItem>
			<MudMenuItem Disabled="true">v@(ThisAssembly.AssemblyFileVersion)</MudMenuItem>
			</MudMenu>
		</MudAppBar>

		<div class="d-flex justify-center align-center pa-1">
			<MudIconButton Icon="@Icons.Material.Outlined.ArrowBack" OnClick="PreviousDay" Disabled="@(_day.Date.DayNumber <= 1)" />

			<MudMenu @ref="datePickerMenu" AnchorOrigin="Origin.BottomLeft">
				<ActivatorContent>
					<MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="false" Style="width:7em">@_day.Date.ToString("ddd, MMM d")</MudText>
				</ActivatorContent>

				<ChildContent>
					<MudDatePicker PickerVariant="PickerVariant.Static" DateChanged="OnDaySelected" DisableToolbar="true" IsDateDisabledFunc="@(dt => dt > DateTime.Now)" />
				</ChildContent>
			</MudMenu>

			<MudIconButton Icon="@Icons.Material.Outlined.ArrowForward" OnClick="NextDay" Disabled="@(_day.Date > DateOnly.FromDateTime(DateTime.Now))" />
		</div>
	</div>

	<div id="main-body">
		<MudStack id="main-timeline">
			@foreach (var group in db.Categories.GroupBy(x => x.Group))
		{
			@if (!string.IsNullOrEmpty(group.Key))
			{
				<MudDivider />

				@if (group.Key == "Notes")
				{
					<MudText Typo="Typo.h5">Today's notes</MudText>
				}
				else if (group.Key == "Medications")
				{
					<MudText Typo="Typo.h5">Medications taken</MudText>
				}
			}

			@foreach (var category in group.Where(x => x.Enabled).OrderBy(x => x.Index))
			{
				@foreach (var point in category.DataPoints.Where(x => x.Day == _day && !x.IsDeleted))
				{
					<div class="data-point-view">
						@if (!string.IsNullOrEmpty(category.Name))
						{
							<MudText Class="@(group.Key == "Medications" ? "data-point-header-medication" : "data-point-header")" Align="Align.Right">@category.Name:</MudText>
						}

						<DataPointView DataPoint="point" />
					</div>
				}
			}

			@if (group.Key == "Notes")
			{
				<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Comment" OnClick="NewNote">New note</MudButton>
			}
			else if (group.Key == "Medications")
			{
				<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Medication" OnClick="ManageMedications">Manage medications</MudButton>
			}
		}
	</MudStack>
</div>

@code {
	Day _day;
	bool _isDarkMode;
	MudThemeProvider _mudThemeProvider;
	MudMenu datePickerMenu;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_isDarkMode = await _mudThemeProvider.GetSystemPreference();
			await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
			StateHasChanged();
		}
	}

	private Task OnSystemPreferenceChanged(bool newValue)
	{
		_isDarkMode = newValue;
		StateHasChanged();
		return Task.CompletedTask;
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		_day = await db.GetDay(DateTime.Now);
	}

	async Task OnDaySelected(DateTime? dateTime)
	{
		datePickerMenu.CloseMenu();
		await SetDay(await db.GetDay(dateTime.Value));
	}

	async Task SetDay(Day day)
	{
		_day = day;
		await ScrollManager.ScrollToTopAsync("main-body");
	}

	async Task PreviousDay()
	{
		await SetDay(await db.GetPreviousDay(_day));
	}

	async Task NextDay()
	{
		await SetDay(await db.GetNextDay(_day));
	}

	async Task ResetDatabase()
	{
		var result = await DialogService.ShowMessageBox(
			"Reset database",
			"This will reset the database and close the app. Are you sure you want to continue?",
			yesText: "Delete everything",
			cancelText: "Cancel");

		if (result != true)
			return;

		await db.Database.EnsureDeletedAsync();
		Application.Current.Quit();
	}

	async Task ManageCategories()
	{
		await DialogService.Show<ManageCategoriesDialog>("Manage categories").Result;
	}

	async Task ManageMedications()
	{
		var parameters = new DialogParameters { { nameof(ManageCategoriesDialog.Group), "Medications" } };
		await DialogService.Show<ManageCategoriesDialog>("Manage medications", parameters).Result;
	}

	async Task NewNote()
	{
		var notes = db.Categories.Single(x => x.Group == "Notes");

		var dataPoint = new DataPoint()
			{
				Day = _day,
				Category = notes,
				CreatedAt = DateTimeOffset.Now,
				DataType = DataType.Note,
			};

		await EditTextDialog.ShowDialog(DialogService, dataPoint);

		notes.DataPoints.Add(dataPoint);

		await db.SaveChangesAsync();
	}
}