@namespace JournalApp
@page "/"
@inherits LayoutComponentBase
@inject ApplicationDbContext db
@inject ISnackbar SnackbarService
@inject IDialogService DialogService

<MudThemeProvider IsDarkMode="true" />
<MudDialogProvider FullWidth="true"
				   MaxWidth="MaxWidth.Large"
				   NoHeader="true"
				   CloseButton="false"
				   DisableBackdropClick="true"
				   CloseOnEscapeKey="false" />
<MudSnackbarProvider />

<div id="main-header">
	<MudAppBar Color="Color.Primary" Fixed="false" Dense="true">
		<MudText>🙂 @ThisAssembly.AssemblyTitle</MudText>

		<MudSpacer />

		<MudMenu Icon="@Icons.Material.Filled.MoreVert">
			<MudMenuItem OnClick="ResetDatabase">Reset database...</MudMenuItem>
			<MudMenuItem OnClick="ManageDataPoints">Choose data points...</MudMenuItem>
		</MudMenu>
	</MudAppBar>

	<div class="d-flex justify-center align-center gap-4" style="margin:1em">
		<MudIconButton Icon="@Icons.Material.Outlined.ArrowBack" aria-label="previous" OnClick="PreviousDay" Disabled="@(day.Date.DayNumber <= 1)" />

		<MudText Typo="Typo.h5">@day.Date.ToString("ddd, MMM d")</MudText>

		<MudIconButton Icon="@Icons.Material.Outlined.ArrowForward" aria-label="next" OnClick="NextDay" Disabled="@(day.Date > DateOnly.FromDateTime(DateTime.Now))" />
	</div>

	<MudDivider />
</div>

<div id="main-body">
	<MudStack id="main-timeline">
		<MultiDataPoints Day="day" Categories="@(db.DataPointCategories.Where(c => c.Group == null))" />

		<MudDivider />

		<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Comment" OnClick="NewNote">New note</MudButton>

		<MultiDataPoints Day="day" Categories="@(db.DataPointCategories.Where(c => c.Group == "Notes"))" />
	</MudStack>
</div>

@code {
	Day day;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		day = await db.GetDay(DateTime.Now);
	}

	async Task NewNote()
	{
		var notes = db.DataPointCategories.Single(x => x.Group == "Notes");

		notes.DataPoints.Add(new()
			{
				Day = day,
				Category = notes,
				DataType = DataType.Text,
			});

		await db.SaveChangesAsync();
	}

	async Task PreviousDay()
	{
		day = await db.GetPreviousDay(day);
	}

	async Task NextDay()
	{
		day = await db.GetNextDay(day);
	}

	async Task ResetDatabase()
	{
		var result = await DialogService.ShowMessageBox(
			"Reset database",
			"This will reset the database and close the app. Are you sure you want to continue?",
			yesText: "Delete everything",
			cancelText: "Cancel");

		if (result != true)
			return;

		await db.Database.EnsureDeletedAsync();
		Application.Current.Quit();
	}

	async Task ManageDataPoints()
	{
		await DialogService.Show<ManageDataPoints>().Result;
	}
}