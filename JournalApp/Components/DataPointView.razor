@namespace JournalApp
@using System.Text
@inject ILogger<DataPointView> logger
@inject IDialogService DialogService

@if (Point.Type == PointType.Mood)
{
    <MudMenu Dense>
        <ActivatorContent>
            <MudButton aria-label="Choose emoji for day's mood'">
                <MudText Typo="Typo.h4">@(Point.Mood ?? "🤔")</MudText>
            </MudButton>
        </ActivatorContent>

        <ChildContent>
            @foreach (var mood in DataPoint.Moods)
            {
                <MudMenuItem OnClick="@(() => Point.Mood = mood)">
                    <MudText Typo="Typo.h4">@mood</MudText>
                </MudMenuItem>
            }
        </ChildContent>
    </MudMenu>
}
else if (Point.Type == PointType.Sleep)
{
    <div class="d-flex align-center flex-grow-1" style="gap: 0.5em">
        <MudText Class="sleep-hours" Typo="Typo.caption">@((Point.SleepHours ?? 0).ToString("00.0"))</MudText>
        <MudIconButton Class="less-sleep" Icon="@Icons.Material.Filled.Remove" aria-label="Less sleep" OnClick="DecrementSleep" Disabled="@(Point.SleepHours <= 0)" Size="Size.Small" />
        <MudSlider T="decimal" @bind-NullableValue="Point.SleepHours" Variant="Variant.Filled" Min="0" Max="24" Step="0.5m" Size="Size.Large" />
        <MudIconButton Class="more-sleep" Icon="@Icons.Material.Filled.Add" aria-label="More sleep" OnClick="IncrementSleep" Disabled="@(Point.SleepHours >= 24)" Size="Size.Small" />
    </div>
}
else if (Point.Type == PointType.Scale)
{
    <MudRating @bind-SelectedValue="ScaleIndexForMudRating" FullIcon="@Icons.Material.Filled.Circle" EmptyIcon="@Icons.Material.Outlined.Circle" Color="Color.Primary" />
}
else if (Point.Type == PointType.LowToHigh)
{
    <MudToggleGroup T="int?" @bind-Value="Point.ScaleIndex" SelectionMode="SelectionMode.ToggleSelection" Color="Color.Primary">
        <MudToggleItem T="int?" Value="0"><MudText Typo="Typo.subtitle2">None</MudText></MudToggleItem>
        <MudToggleItem T="int?" Value="1"><MudText Typo="Typo.subtitle2">Low</MudText></MudToggleItem>
        <MudToggleItem T="int?" Value="3"><MudText Typo="Typo.subtitle2">Medium</MudText></MudToggleItem>
        <MudToggleItem T="int?" Value="5"><MudText Typo="Typo.subtitle2">High</MudText></MudToggleItem>
    </MudToggleGroup>
}
else if (Point.Type == PointType.MildToSevere)
{
    <MudToggleGroup T="int?" @bind-Value="Point.ScaleIndex" SelectionMode="SelectionMode.ToggleSelection" Color="Color.Primary">
        <MudToggleItem T="int?" Value="0"><MudText Typo="Typo.subtitle2">None</MudText></MudToggleItem>
        <MudToggleItem T="int?" Value="1"><MudText Typo="Typo.subtitle2">Mild</MudText></MudToggleItem>
        <MudToggleItem T="int?" Value="3"><MudText Typo="Typo.subtitle2">Moderate</MudText></MudToggleItem>
        <MudToggleItem T="int?" Value="5"><MudText Typo="Typo.subtitle2">Severe</MudText></MudToggleItem>
    </MudToggleGroup>
}
else if (Point.Type == PointType.Bool)
{
    <MudToggleGroup T="bool?" @bind-Value="Point.Bool" SelectionMode="SelectionMode.ToggleSelection" Color="Color.Primary">
        <MudToggleItem T="bool?" Value="false"><MudText Typo="Typo.subtitle2">No</MudText></MudToggleItem>
        <MudToggleItem T="bool?" Value="true"><MudText Typo="Typo.subtitle2">Yes</MudText></MudToggleItem>
    </MudToggleGroup>
}
else if (Point.Type == PointType.Number)
{
    <MudNumericField @bind-Value="Point.Number" Immediate HideSpinButtons MaxLength="9" />
}
else if (Point.Type == PointType.Text)
{
    <MudTextField @bind-Value="Point.Text" Immediate />
}
else if (Point.Type == PointType.Note)
{
    <div class="d-flex flex-column flex-grow-1">
        @if (!string.IsNullOrWhiteSpace(Point.Text))
        {
            <MudTextField @bind-Value="Point.Text"
                          Placeholder="@(Point.IsTimestampedNote ? "What's on your mind?" : null)"
                          Label="@(NoteLabel)" Typo="Typo.body2"
                          Immediate ReadOnly Underline="false"
                          AutoGrow Lines="1" MaxLines="10" />
        }

        <MudLink OnClick="EditTextInDialog">Edit note</MudLink>
    </div>
}
else if (Point.Type == PointType.Medication)
{
    <div class="d-flex flex-grow-1 justify-space-between align-center" style="gap: 0.5em">
        <MudToggleGroup T="bool?" @bind-Value="Point.Bool" @bind-Value:after="OnMedicationTakenChanged" SelectionMode="SelectionMode.ToggleSelection" Color="Color.Primary">
            <MudToggleItem T="bool?" Value="false"><MudText Typo="Typo.subtitle2">No</MudText></MudToggleItem>
            <MudToggleItem T="bool?" Value="true"><MudText Typo="Typo.subtitle2">Yes</MudText></MudToggleItem>
        </MudToggleGroup>

        <MudLink OnClick="EditDose" Disabled="@(string.IsNullOrWhiteSpace(Point.Category.MedicationUnit))">Edit dose</MudLink>
    </div>
}

@code {
    [Parameter]
    public DataPoint Point { get; set; }

    [Parameter]
    public EventCallback StateChanged { get; set; }

    public int ScaleIndexForMudRating
    {
        get => Point.ScaleIndex ?? 0;
        set => Point.ScaleIndex = value == 0 ? null : value;
    }

    string NoteLabel
    {
        get
        {
            // Only include a label if we're in the general notes group. If this is a custom category it will be covered by its own label.
            if (Point.IsTimestampedNote)
                return Point.CreatedAt.ToString(DateOnly.FromDateTime(Point.CreatedAt.Date) == Point.Day.Date ? "h:mm tt" : "M/d/yy h:mm tt");

            return null;
        }
    }

    void DecrementSleep()
    {
        logger.LogDebug("Decrementing sleep");
        Point.SleepHours = Math.Max(0m, (Point.SleepHours ?? 0) - 0.5m);
    }

    void IncrementSleep()
    {
        logger.LogDebug("Incrementing sleep");
        Point.SleepHours = Math.Min(24m, (Point.SleepHours ?? 0) + 0.5m);
    }

    async Task EditTextInDialog()
    {
        logger.LogDebug("Editing note in dialog");
        await EditNoteDialog.ShowDialog(DialogService, Point);
        logger.LogDebug("Finished editing note in dialog");

        await StateChanged.InvokeAsync();
    }

    async Task OnMedicationTakenChanged()
    {
        // If the medication wasn't taken then having a custom dose doesn't make any sense.
        // Also allows for an easier way to reset the dose by just clicking the button twice.
        if (Point.Bool != true)
            Point.MedicationDose = Point.Category.MedicationDose;

        await StateChanged.InvokeAsync();
    }

    async Task EditDose()
    {
        logger.LogDebug("Editing dose in dialog");
        await EditDoseDialog.ShowDialog(DialogService, Point);
        logger.LogDebug("Finished editing dose in dialog");

        await StateChanged.InvokeAsync();
    }

    /// <summary>
    /// Returns a header to be shown above the view for the point on the main timeline.
    /// </summary>
    public static string GetHeaderText(DataPoint point)
    {
        var category = point.Category;
        var sb = new StringBuilder();

        sb.Append(category.Name);

        if (point.Type == PointType.Medication && !string.IsNullOrWhiteSpace(category.MedicationUnit))
        {
            List<string> parts = [];

            // The default dose and unit.
            if (category.MedicationDose != null)
            {
                parts.Add($"{category.MedicationDose:0.##}{category.MedicationUnit}");
            }

            // Show the dose if it's different from the category default.
            if (point.MedicationDose != category.MedicationDose && point.MedicationDose != null && category.MedicationUnit != null)
            {
                parts.Add($"{point.MedicationDose:0.##}{category.MedicationUnit}");
            }

            if (parts.Any())
            {
                sb.Append(' ');
                sb.Append(string.Join(" - ", parts));
            }
        }

        sb.Append(":");

        return sb.ToString();
    }
}
