@namespace JournalApp
@inject IDialogService DialogService

@if (DataPoint.DataType == DataType.Mood)
{
	<MudMenu>
		<ActivatorContent>
			<MudText Typo="Typo.h4">@(DataPoint.Mood ?? "🤔")</MudText>
		</ActivatorContent>

		<ChildContent>
			@foreach (var mood in DataPoint.Moods)
			{
				<MudMenuItem OnClick="@(() => DataPoint.Mood = mood)">
					<MudText Typo="Typo.h4">@mood</MudText>
				</MudMenuItem>
			}
		</ChildContent>
	</MudMenu>
}
else if (DataPoint.DataType == DataType.Sleep)
{
	<div class="d-flex align-center flex-grow-1" style="gap:1em">
		<MudIconButton Icon="@Icons.Material.Filled.Remove" OnClick="DecrementSleep" Disabled="@(DataPoint.SleepHours <= 0)" Size="Size.Small" />
		<MudSlider @bind-Value="DataPoint.SleepHours" Variant="Variant.Filled" Min="0" Max="24" Step="0.5m" Size="Size.Large" Immediate />
			<MudText Typo="Typo.caption">@((DataPoint.SleepHours ?? 0).ToString("00.0"))</MudText>
			<MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="IncrementSleep" Disabled="@(DataPoint.SleepHours >= 24)" Size="Size.Small" />
		</div>
}
else if (DataPoint.DataType == DataType.Scale)
{
	<MudRating @bind-SelectedValue="ScaleIndexForMudRating" FullIcon="@Icons.Material.Filled.Circle" EmptyIcon="@Icons.Material.Outlined.Circle" Color="Color.Primary" />
}
else if (DataPoint.DataType == DataType.LowToHigh)
{
	<MudRadioButtonGroup @bind-SelectedOption="DataPoint.ScaleIndex">
		<MudRadioButton T="Nullable<Int32>" Color="Color.Primary" Size="Size.Small" Option="0"><MudText Typo="Typo.subtitle2">None</MudText></MudRadioButton>
		<MudRadioButton T="Nullable<Int32>" Color="Color.Primary" Size="Size.Small" Option="1"><MudText Typo="Typo.subtitle2">Low</MudText></MudRadioButton>
		<MudRadioButton T="Nullable<Int32>" Color="Color.Primary" Size="Size.Small" Option="3"><MudText Typo="Typo.subtitle2">Medium</MudText></MudRadioButton>
		<MudRadioButton T="Nullable<Int32>" Color="Color.Primary" Size="Size.Small" Option="5"><MudText Typo="Typo.subtitle2">High</MudText></MudRadioButton>
	</MudRadioButtonGroup>
}
else if (DataPoint.DataType == DataType.MildToSevere)
{
	<MudRadioButtonGroup @bind-SelectedOption="DataPoint.ScaleIndex">
		<MudRadioButton T="Nullable<Int32>" Color="Color.Primary" Size="Size.Small" Option="0"><MudText Typo="Typo.subtitle2">None</MudText></MudRadioButton>
		<MudRadioButton T="Nullable<Int32>" Color="Color.Primary" Size="Size.Small" Option="1"><MudText Typo="Typo.subtitle2">Mild</MudText></MudRadioButton>
		<MudRadioButton T="Nullable<Int32>" Color="Color.Primary" Size="Size.Small" Option="3"><MudText Typo="Typo.subtitle2">Moderate</MudText></MudRadioButton>
		<MudRadioButton T="Nullable<Int32>" Color="Color.Primary" Size="Size.Small" Option="5"><MudText Typo="Typo.subtitle2">Severe</MudText></MudRadioButton>
	</MudRadioButtonGroup>
}
else if (DataPoint.DataType == DataType.Bool)
{
	<ButtonGroupCheckBox @bind-SelectedValue="DataPoint.Bool" />
}
else if (DataPoint.DataType == DataType.Number)
{
	<MudNumericField @bind-Value="DataPoint.Number" Class="mt-n4" Immediate HideSpinButtons MaxLength="9" />
}
else if (DataPoint.DataType == DataType.Text)
{
	<MudTextField @bind-Value="DataPoint.Text" Class="mt-n4" Immediate />
}
else if (DataPoint.DataType == DataType.Note)
{
	<div class="d-flex flex-column flex-grow-1">
		<MudTextField @bind-Value="DataPoint.Text" Lines="4" Placeholder="What's on your mind?" Label="@(DataPoint.CreatedAt.ToString(DateOnly.FromDateTime(DataPoint.CreatedAt.Date) == DataPoint.Day.Date ? "h:mm tt" : "M/d/yy h:mm tt"))" Immediate />

			<MudLink OnClick="EditTextInDialog">Edit note...</MudLink>
		</div>
}
else if (DataPoint.DataType == DataType.Medication)
{
	<div class="d-flex flex-grow-1 justify-space-between align-center" style="gap:1em;">
		<ButtonGroupCheckBox @bind-SelectedValue="DataPoint.Bool" />

		<MudLink OnClick="EditDose">Edit</MudLink>
	</div>
}

@code {
	[Parameter]
	public DataPoint DataPoint { get; set; }

	[Parameter]
	public EventCallback DialogClosed { get; set; }

	public int ScaleIndexForMudRating
	{
		get => DataPoint.ScaleIndex ?? 0;
		set => DataPoint.ScaleIndex = value == 0 ? null : value;
	}

	void DecrementSleep()
	{
		DataPoint.SleepHours = Math.Max(0m, (DataPoint.SleepHours ?? 0) - 0.5m);
	}

	void IncrementSleep()
	{
		DataPoint.SleepHours = Math.Min(24m, (DataPoint.SleepHours ?? 0) + 0.5m);
	}

	async Task EditTextInDialog()
	{
		await EditTextDialog.ShowDialog(DialogService, DataPoint);
		await DialogClosed.InvokeAsync();
	}

	async Task EditDose()
	{
		await EditDoseDialog.ShowDialog(DialogService, DataPoint);
		await DialogClosed.InvokeAsync();
	}
}