@namespace JournalApp
@using System.Text
@inject ILogger<DataPointView> logger
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (Point.Type == PointType.Mood)
{
    <MudMenu PopoverClass="emoji-menu-list" Dense AnchorOrigin="Origin.TopLeft">
        <ActivatorContent>
            <MudButton aria-label="Choose emoji for day's mood'">
                <Emoji>@(Point.Mood ?? "🤔")</Emoji>
            </MudButton>
        </ActivatorContent>

        <ChildContent>
            @foreach (var mood in DataPoint.Moods)
            {
                <MudMenuItem OnClick="@(() => OnMoodSelected(mood))">
                    <Emoji>@mood</Emoji>
                </MudMenuItem>
            }
        </ChildContent>
    </MudMenu>
}
else if (Point.Type == PointType.Sleep)
{
    <div class="d-flex align-center flex-grow-1" style="gap: 8px">
        <MudText Class="sleep-hours" Typo="Typo.caption">@((Point.SleepHours ?? 0).ToString("00.0"))</MudText>
        <MudIconButton Class="less-sleep" Icon="@Icons.Material.Rounded.Remove" aria-label="Less sleep" OnClick="DecrementSleep" Disabled="@(Point.SleepHours <= 0)" Size="Size.Small" />
        <MudSlider T="decimal" @bind-NullableValue="Point.SleepHours" Variant="Variant.Filled" Min="0" Max="24" Step="0.5m" />
        <MudIconButton Class="more-sleep" Icon="@Icons.Material.Rounded.Add" aria-label="More sleep" OnClick="IncrementSleep" Disabled="@(Point.SleepHours >= 24)" Size="Size.Small" />
    </div>
}
else if (Point.Type == PointType.Scale)
{
    <MudRating @bind-SelectedValue="ScaleIndexForMudRating" FullIcon="@Icons.Material.Rounded.Circle" EmptyIcon="@Icons.Material.Rounded.Circle" Color="Color.Primary" />
}
else if (Point.Type == PointType.LowToHigh)
{
    <MudToggleGroup T="int?" @bind-Value="Point.ScaleIndex" SelectionMode="SelectionMode.ToggleSelection" Size="Size.Small">
        <MudToggleItem T="int?" Value="0">None</MudToggleItem>
        <MudToggleItem T="int?" Value="1">Low</MudToggleItem>
        <MudToggleItem T="int?" Value="3">Medium</MudToggleItem>
        <MudToggleItem T="int?" Value="5">High</MudToggleItem>
    </MudToggleGroup>
}
else if (Point.Type == PointType.MildToSevere)
{
    <MudToggleGroup T="int?" @bind-Value="Point.ScaleIndex" SelectionMode="SelectionMode.ToggleSelection" Size="Size.Small">
        <MudToggleItem T="int?" Value="0">None</MudToggleItem>
        <MudToggleItem T="int?" Value="1">Mild</MudToggleItem>
        <MudToggleItem T="int?" Value="3">Moderate</MudToggleItem>
        <MudToggleItem T="int?" Value="5">Severe</MudToggleItem>
    </MudToggleGroup>
}
else if (Point.Type == PointType.Bool)
{
    <MudToggleGroup T="bool?" @bind-Value="Point.Bool" SelectionMode="SelectionMode.ToggleSelection" Size="Size.Small">
        <MudToggleItem T="bool?" Value="false">No</MudToggleItem>
        <MudToggleItem T="bool?" Value="true">Yes</MudToggleItem>
    </MudToggleGroup>
}
else if (Point.Type == PointType.Number)
{
    <MudNumericField @bind-Value="Point.Number" Immediate MaxLength="9" />
}
else if (Point.Type == PointType.Text)
{
    <MudTextField @bind-Value="Point.Text" Immediate />
}
else if (Point.Type == PointType.Note)
{
    <div class="d-flex flex-column flex-grow-1">
        @if (!string.IsNullOrWhiteSpace(Point.Text))
        {
            <MudTextField @bind-Value="Point.Text"
                          Placeholder="@(Point.IsTimestampedNote ? "What's on your mind?" : null)"
                          Label="@(NoteLabel)" Typo="Typo.body2"
                          Immediate ReadOnly Underline="false"
                          AutoGrow Lines="1" MaxLines="10" />
        }

        <MudLink Typo="Typo.body2" OnClick="EditTextInDialog">Edit note</MudLink>
    </div>
}
else if (Point.Type == PointType.Medication)
{
    <MudToggleGroup T="bool?" @bind-Value="Point.Bool" @bind-Value:after="OnMedicationTakenChanged" SelectionMode="SelectionMode.ToggleSelection" Size="Size.Small">
        <MudToggleItem T="bool?" Value="false">No</MudToggleItem>
        <MudToggleItem T="bool?" Value="true">Yes</MudToggleItem>
    </MudToggleGroup>
}

@code {
    [Parameter]
    public DataPoint Point { get; set; }

    [Parameter]
    public EventCallback StateChanged { get; set; }

    public int ScaleIndexForMudRating
    {
        get => Point.ScaleIndex ?? 0;
        set => Point.ScaleIndex = value == 0 ? null : value;
    }

    string NoteLabel
    {
        get
        {
            var localTime = Point.CreatedAt.ToLocalTime();

            // Only include a label if we're in the general notes group.
            // If this is a custom category it will be covered by its own label.
            if (Point.IsTimestampedNote)
            {
                var isSameDay = DateOnly.FromDateTime(localTime.Date) == Point.Day.Date;
                return localTime.ToString(isSameDay ? "h:mm tt" : "M/d/yy h:mm tt");
            }

            return null;
        }
    }

    void DecrementSleep()
    {
        logger.LogDebug("Decrementing sleep");
        Point.SleepHours = Math.Max(0m, (Point.SleepHours ?? 0) - 0.5m);
    }

    void IncrementSleep()
    {
        logger.LogDebug("Incrementing sleep");
        Point.SleepHours = Math.Min(24m, (Point.SleepHours ?? 0) + 0.5m);
    }

    async Task EditTextInDialog()
    {
        logger.LogDebug("Editing note in dialog");
        await EditNoteDialog.ShowDialog(DialogService, Point);
        logger.LogDebug("Finished editing note in dialog");

        await StateChanged.InvokeAsync();
    }

    async Task OnMedicationTakenChanged()
    {
        // If the medication wasn't taken then having a custom dose doesn't make any sense.
        // Also allows for an easier way to reset the dose by just clicking the button twice.
        if (Point.Bool != true)
            Point.MedicationDose = Point.Category.MedicationDose;

        await StateChanged.InvokeAsync();
    }

    /// <summary>
    /// Opens a dialog to edit the medication dose for this data point.
    /// This method is public to allow it to be called from the parent page when clicking the medication name header.
    /// </summary>
    public async Task EditDose()
    {
        logger.LogDebug("Editing dose in dialog");
        await EditDoseDialog.ShowDialog(DialogService, Point);
        logger.LogDebug("Finished editing dose in dialog");

        await StateChanged.InvokeAsync();
    }

    void OnMoodSelected(string mood)
    {
        logger.LogDebug("Mood selected: {mood}", mood);
        Point.Mood = mood;

        // Show a motivational quote when the sob emoji is selected
        if (mood == DataPoint.Moods[^1])  // Sob emoji (😭) is the last mood in the list
        {
            var quote = MotivationalQuotes.GetRandomQuote();
            Snackbar.Add(quote, Severity.Info, c => c.Icon = Icons.Material.Rounded.FavoriteBorder);
        }
    }

    /// <summary>
    /// Returns a header to be shown above the view for the point on the main timeline.
    /// </summary>
    public static string GetHeaderText(DataPoint point)
    {
        var category = point.Category;
        var sb = new StringBuilder(category.Name);

        if (point.Type == PointType.Medication && !string.IsNullOrWhiteSpace(category.MedicationUnit))
        {
            sb.Append(GetMedicationDoseText(point));
        }

        sb.Append(':');
        return sb.ToString();
    }

    /// <summary>
    /// Returns the dose text for a medication point (e.g., " 10mg" or " 5ml*")
    /// </summary>
    public static string GetMedicationDoseText(DataPoint point)
    {
        var category = point.Category;
        var sb = new StringBuilder();

        if (!string.IsNullOrWhiteSpace(category.MedicationUnit))
        {
            // Different dose from the category default.
            if (point.MedicationDose.HasValue && point.MedicationDose != category.MedicationDose)
            {
                sb.Append(' ').Append($"{point.MedicationDose:0.##}{category.MedicationUnit}*");
            }
            // The default dose and unit.
            else if (category.MedicationDose.HasValue)
            {
                sb.Append(' ').Append($"{category.MedicationDose:0.##}{category.MedicationUnit}");
            }
        }

        return sb.ToString();
    }
}
