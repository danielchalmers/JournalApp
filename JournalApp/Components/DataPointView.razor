@namespace JournalApp
@inject IDialogService DialogService

<div class="data-point-view">
	<MudText Style="width:9em" Align="Align.Right">@DataPoint.Name:</MudText>

	@if (DataPoint is SleepDataPoint sleepDataPoint)
	{
		<div class="d-flex align-center flex-grow-1 gap-2">
			<MudText>@((sleepDataPoint.Hours ?? 0).ToString("00.0"))</MudText>
			<MudSlider @bind-Value="sleepDataPoint.Hours" Variant="Variant.Filled" Min="0" Max="24" Step="0.5m" />
		</div>
	}
	else if (DataPoint is ScaleDataPoint scaleDataPoint)
	{
		<MudRating @bind-SelectedValue="scaleDataPoint.ScaleIndex" Size="Size.Large" />
	}
	else if (DataPoint is BoolDataPoint boolDataPoint)
	{
		<MudCheckBox @bind-Checked="boolDataPoint.Value" TriState="true" Color="Color.Primary" />
	}
	else if (DataPoint is NumberDataPoint numberDataPoint)
	{
		<MudNumericField @bind-Value="numberDataPoint.Value" Margin="Margin.None" />
	}
	else if (DataPoint is TextDataPoint textDataPoint)
	{
		<div class="d-flex flex-column flex-grow-1 gap-2">
			<MudTextField @bind-Value="textDataPoint.Value" Lines="4" Placeholder="What's on your mind?" Margin="Margin.None" />

			<MudLink OnClick="async () => await EditTextInDialog(textDataPoint)">Edit...</MudLink>
		</div>
	}
</div>

@code {
	[Parameter]
	public DataPoint DataPoint { get; set; }

	async Task EditTextInDialog(TextDataPoint textDataPoint)
	{
		var parameters = new DialogParameters();
		parameters.Add(nameof(EditTextDialog.DataPoint), DataPoint);

		var options = new DialogOptions()
			{
				CloseButton = true,
				CloseOnEscapeKey = false,
				DisableBackdropClick = true,
				FullWidth = true,
				NoHeader = true,
			};

		var result = await DialogService.Show<EditTextDialog>("Edit text", parameters, options).Result;
	}
}