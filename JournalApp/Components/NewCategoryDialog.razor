@namespace JournalApp
@inject IDialogService DialogService

<MudDialog>
	<DialogContent>
		<MudForm @ref="form" @bind-IsValid="@success" Class="d-flex flex-column" Style="gap:1em">

			@if (Group == null)
			{
				<MudTextField Label="Name" @bind-Value="Name" Required="true" Immediate="true" />

				<MudSelect Label="Type of data" @bind-Value="SelectedType">
					<MudSelectItem Value="DataType.Scale">1-5 scale</MudSelectItem>
					<MudSelectItem Value="DataType.Bool">Yes or no</MudSelectItem>
					<MudSelectItem Value="DataType.Number">Number</MudSelectItem>
					<MudSelectItem Value="DataType.Text">Text</MudSelectItem>
				</MudSelect>
			}
			else if (Group == "Medications")
			{
				<MudAutocomplete Label="Name" @bind-Text="Name" Required="true" Immediate="true" SearchFunc="FindMedications" />

				<div class="d-flex flex-row flex-grow-1" style="gap:1em">
					<MudNumericField @bind-Value="MedicationDose" HideSpinButtons="true" Label="Dose" MaxLength="5" Required="true" Immediate="true" />

					<MudTextField @bind-Value="MedicationUnit" Label="Unit" MaxLength="4" Required="true" Immediate="true" />
				</div>

				<MudSwitch @bind-Checked="MedicationEveryDay" Label="Taken every day" Color="Color.Primary" />
			}
		</MudForm>
	</DialogContent>

	<DialogActions>
		<MudButton OnClick="Cancel">Cancel</MudButton>

		<MudButton Color="Color.Primary" OnClick="Submit" Disabled="@(!success)">Add</MudButton>
	</DialogActions>
</MudDialog>

@code {
	MudForm form;
	bool success;

	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	[Parameter]
	public string Group { get; set; }

	public string Name { get; set; }

	public DataType SelectedType { get; set; } = DataType.Scale;

	public decimal? MedicationDose { get; set; }

	public string MedicationUnit { get; set; } = "mg";

	public bool MedicationEveryDay { get; set; } = true;

	public DataPointCategory Category { get; set; }

	void Cancel()
	{
		MudDialog.Close(DialogResult.Cancel());
	}

	void Submit()
	{
		Category = new()
			{
				Group = Group,
				Name = Name,
				Type = Group == "Medications" ? DataType.Medication : SelectedType,
				MedicationDose = MedicationDose,
				MedicationUnit = MedicationUnit,
			};

		MudDialog.Close(DialogResult.Ok(Category));
	}

	Task<IEnumerable<string>> FindMedications(string s)
	{
		if (string.IsNullOrEmpty(s))
			return Task.FromResult(Enumerable.Empty<string>());

		return Task.FromResult(DataPoint.Medications.Where(x => x.Contains(s)));
	}
}