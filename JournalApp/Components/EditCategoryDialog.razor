@namespace JournalApp
@inject IDialogService DialogService

<MudDialog DefaultFocus="DefaultFocus.FirstChild" OnBackdropClick="Submit">
	<TitleContent>
		<div class="page-header">
			<MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="Cancel" />

			<MudText Typo="Typo.h6">@(Category == null ? "New" : "Edit") @(Group == "Medications" ? "medication" : "category")</MudText>

				<MudSpacer />

				<MudIconButton Icon="@Icons.Material.Filled.Check" OnClick="Submit" />
			</div>
		</TitleContent>

		<DialogContent>
			<MudForm @ref="form" @bind-IsValid="@success" ValidationDelay="0">
				<MudTextField Label="Name" @bind-Value="Name" Required="true" Immediate="true" />

				@if (Group == null)
			{
				<MudSelect Label="Type of data" @bind-Value="SelectedType">
					<MudSelectItem Value="DataType.LowToHigh">Low to high</MudSelectItem>
					<MudSelectItem Value="DataType.MildToSevere">Mild to severe</MudSelectItem>
					<MudSelectItem Value="DataType.Scale">1-5 scale</MudSelectItem>
					<MudSelectItem Value="DataType.Bool">Yes or no</MudSelectItem>
					<MudSelectItem Value="DataType.Number">Number</MudSelectItem>
					<MudSelectItem Value="DataType.Text">Text</MudSelectItem>
				</MudSelect>
			}
			else if (Group == "Medications")
			{
				<div class="d-flex flex-row flex-grow-1" style="gap:1em">
					<MudNumericField @bind-Value="MedicationDose" HideSpinButtons="true" Label="Dose" MaxLength="5" Required="true" Immediate="true" />

					<MudTextField @bind-Value="MedicationUnit" Label="Unit" MaxLength="4" Required="true" Immediate="true" />
				</div>

				<MudSwitch @bind-Checked="MedicationEveryDay" Label="Taken every day" Color="Color.Primary" />
			}
		</MudForm>
	</DialogContent>
</MudDialog>

@code {
	MudForm form;
	bool success;

	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	[Parameter]
	public string Group { get; set; }

	[Parameter]
	public DataPointCategory Category { get; set; }

	public string Name { get; set; }

	public DataType SelectedType { get; set; } = DataType.LowToHigh;

	public decimal? MedicationDose { get; set; }

	public string MedicationUnit { get; set; } = "mg";

	public bool MedicationEveryDay { get; set; } = true;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		if (Category != null)
		{
			Group = Category.Group;
			Name = Category.Name;
			SelectedType = Category.Type;
			MedicationDose = Category.MedicationDose;
			MedicationUnit = Category.MedicationUnit;
			MedicationEveryDay = Category.MedicationEveryDaySince != null;
		}
	}

	void Cancel()
	{
		MudDialog.Close(DialogResult.Cancel());
	}

	async Task Submit()
	{
		await form.Validate();
		if (!success)
		{
			MudDialog.Close(DialogResult.Cancel());
			return;
		}

		Category ??= new();
		Category.Group = Group;
		Category.Name = Name.Trim();
		Category.Type = Group == "Medications" ? DataType.Medication : SelectedType;
		Category.MedicationDose = MedicationDose;
		Category.MedicationUnit = MedicationUnit.Trim();
		Category.MedicationEveryDaySince = MedicationEveryDay ? DateTimeOffset.Now : null;

		MudDialog.Close(DialogResult.Ok(Category));
	}
}