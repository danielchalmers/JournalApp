@namespace JournalApp
@inject ILogger<EditDoseDialog> logger
@inject IDialogService DialogService
@inject KeyEventService KeyEventService

<MudDialog DefaultFocus="DefaultFocus.FirstChild" OnBackdropClick="Submit">
    <TitleContent>
        <MudText Typo="Typo.h6">Edit day's dose</MudText>
    </TitleContent>

    <DialogContent>
        <MudForm>
            <MudText Align="Align.Center">
                To change this for all days, go to "Edit medications" from the home screen.
            </MudText>

            <MudDivider />

            <MudNumericField @bind-Value="Dose"
                             Label="@($"Dose ({Point.Day.Date:ddd, MMM d})")"
                             AdornmentText="@Point.Category.MedicationUnit" Adornment="Adornment.End"
                             MaxLength="6" HideSpinButtons Immediate />


            @if (!string.IsNullOrWhiteSpace(CategoryDetails))
            {
                <MudTextField Value="CategoryDetails" ReadOnly AutoGrow MaxLines="10" Label="Details" Underline="false" />
            }
        </MudForm>
    </DialogContent>

    <DialogActions>
        <MudButton Class="cancel-button" StartIcon="@Icons.Material.Rounded.Close" aria-label="Cancel" OnClick="Cancel">Cancel</MudButton>

        <MudButton Class="submit-button" StartIcon="@Icons.Material.Rounded.Check" aria-label="Submit" OnClick="Submit" Variant="Variant.Filled" Color="Color.Primary">Submit</MudButton>
    </DialogActions>
</MudDialog>

@code {
    DataPoint _point;

    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public DataPoint Point
    {
        get => _point;
        set
        {
            _point = value;
            Dose = value?.MedicationDose;
            CategoryDetails = value?.Category?.Details;

            logger.LogDebug($"Using point from category <{value?.Category?.Name}>");
        }
    }

    public decimal? Dose { get; set; }

    public string CategoryDetails { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        KeyEventService.Entered(() => Submit());
    }

    void Cancel()
    {
        KeyEventService.CancelDialog(MudDialog);
    }

    void Submit()
    {
        if (Dose == null || Dose == decimal.Zero)
        {
            // Restore default dose but mark as not taken.
            Point.MedicationDose = Point.Category.MedicationDose;
            Point.Bool = false;

            logger.LogDebug("Restoring default dose but marking as not taken");
        }
        else if (Dose != Point.MedicationDose)
        {
            // Update with new dose.
            Point.MedicationDose = Dose;
            Point.Bool = true;

            logger.LogDebug("Updating with new dose and marking as taken");
        }

        KeyEventService.CloseDialog(MudDialog, true);
    }

    public static async Task ShowDialog(IDialogService dialogService, DataPoint point)
    {
        var parameters = new DialogParameters<EditDoseDialog> { { x => x.Point, point } };
        var dialog = await dialogService.ShowAsync<EditDoseDialog>(parameters);
        var result = await dialog.Result;
    }
}
