@namespace JournalApp
@page "/{OpenToDateString?}"
@using CommunityToolkit.Maui.Storage;
@inherits JaPage
@implements IDisposable
@inject ILogger<Index> logger
@inject IDbContextFactory<AppDbContext> DbFactory
@inject AppDataUIService AppDataUIService
@inject IShare Share
@inject IBrowser Browser

<header class="page-header">
    <div class="page-toolbar">
        <MudButton OnClick="OnTitleClicked" Ripple="false" Variant="Variant.Text">
            <MudText Typo="Typo.h6">🙂 @ThisAssembly.AssemblyTitle</MudText>
        </MudButton>

        <MudSpacer />

        <MudMenu Icon="@Icons.Material.Rounded.MoreVert" aria-label="Main menu" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.BottomLeft">
            <MudMenuItem Icon="@Icons.Material.Rounded.Category" OnClick="ManageCategories" AutoClose="false">Categories</MudMenuItem>
            <MudMenuItem Icon="@Icons.Material.Rounded.Medication" OnClick="ManageMedications" AutoClose="false">Medications</MudMenuItem>
            <MudMenuItem Icon="@Icons.Material.Rounded.Comment" OnClick="NewNote">New note</MudMenuItem>
            <MudMenuItem Icon="@Icons.Material.Rounded.ShowChart" OnClick="OpenTrends" AutoClose="false">Trends</MudMenuItem>
            <MudMenuItem Icon="@Icons.Material.Rounded.Article" OnClick="OpenWorksheets" AutoClose="false">Worksheets</MudMenuItem>

            @if (PreferenceService.SafetyPlan != null)
            {
                <MudMenuItem Icon="@Icons.Material.Rounded.HealthAndSafety" OnClick="OpenSafetyPlan">Safety Plan</MudMenuItem>
            }

            <MudDivider />

            <MudMenuItem Icon="@Icons.Material.Rounded.Campaign" OnClick="OpenFeedback">Feedback</MudMenuItem>
            <MudMenuItem Icon="@Icons.Material.Rounded.Share" OnClick="OpenShare">Share</MudMenuItem>
            <MudMenuItem Icon="@Icons.Material.Rounded.Settings" OnClick="OpenSettings" AutoClose="false">Settings</MudMenuItem>
        </MudMenu>
    </div>

    <div class="switcher" data-current-day="@_day.Date.DayNumber">
        <MudIconButton Class="day-switcher-back" Icon="@Icons.Material.Rounded.ArrowBackIos" aria-label="Previous day" OnClick="PreviousDay" Disabled="@(_day.Date.DayNumber <= 1)" />

        <div class="switcher-header">
            <MudButton OnClick="OpenCalendar" aria-label="Open Calendar">
                <MudText Typo="Typo.h5" HtmlTag="p" Align="Align.Center" GutterBottom="false">@_day.Date.ToString("ddd, MMM d")</MudText>
            </MudButton>
        </div>

        <MudIconButton Class="day-switcher-forward" Icon="@Icons.Material.Rounded.ArrowForwardIos" aria-label="Next day" OnClick="NextDay" Disabled="@(_day.Date > DateOnly.FromDateTime(DateTime.Now))" />
    </div>
</header>

<main class="page-body">
    <div class="main-timeline">
        @foreach (var group in db.Categories.Where(x => x.Enabled && !x.Deleted).GroupBy(x => x.Group))
        {
            @if (group.Key == "Notes" && PreferenceService.HideNotes)
            {
                continue;
            }

            <div class="data-point-group">
                @if (!string.IsNullOrEmpty(group.Key))
                {
                    <MudText Class="data-point-group-header" Typo="Typo.h5">
                        @if (group.Key == "Medications")
                        {
                            @("Medications taken")
                        }
                        else if (group.Key == "Notes")
                        {
                            @("Today's notes")
                        }
                    </MudText>
                }

                <ul class="data-point-list">
                    @foreach (var category in group.OrderBy(x => x.Index).ThenBy(x => x.Name))
                    {
                        @foreach (var point in _day.Points.Where(x => !x.Deleted && x.Category.Guid == category.Guid && x.Type == category.Type).OrderBy(x => x.CreatedAt))
                        {
                            <li class="data-point-container" data-category-guid="@category.Guid">
                                @if (!string.IsNullOrEmpty(category.Name))
                                {
                                    <div class="data-point-header">
                                        <MudText HtmlTag="h6">
                                            @(DataPointView.GetHeaderText(point))
                                        </MudText>
                                    </div>
                                }

                                @if (!category.SingleLine)
                                {
                                    <MudFlexBreak />
                                }

                                <div class="data-point-view">
                                    <DataPointView Point="point" StateChanged="_ => StateHasChanged()" />
                                </div>
                            </li>
                        }
                    }
                </ul>

                <footer class="data-point-group-footer">
                    @if (group.Key == null)
                    {
                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Rounded.Category" OnClick="ManageCategories" FullWidth>Edit categories</MudButton>
                    }
                    else if (group.Key == "Medications")
                    {
                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Rounded.Medication" OnClick="ManageMedications" FullWidth>Edit medications</MudButton>
                    }
                    else if (group.Key == "Notes")
                    {
                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Rounded.Comment" OnClick="NewNote" FullWidth>New note</MudButton>
                    }
                </footer>
            </div>
        }
    </div>
</main>

@code {
    AppDbContext db;
    Day _day;
    DateTimeOffset _stoppedDate;

    [Parameter]
    public string OpenToDateString { get; set; }

    protected override async Task OnInitializedAsync()
    {
        logger.LogDebug("Initializing asynchronously");
        db = await DbFactory.CreateDbContextAsync();
        await base.OnInitializedAsync();

        DateOnly date = DateOnly.FromDateTime(DateTime.Now);
        if (DateOnly.TryParseExact(OpenToDateString, "yyyyMMdd", out var parsed))
        {
            // Use the parameter date (from when you click a day in the calendar, etc).
            date = parsed;
        }
        else if (App.IndexDateState.HasValue)
        {
            // If we recently navigated away from the index, restore the date it was on before.
            if (DateTimeOffset.Now - App.IndexDateState.Value.LeftAt < TimeSpan.FromHours(1))
                date = App.IndexDateState.Value.LastDate;
        }

        logger.LogInformation($"Opening to {date}");
        await GoToDay(date);
    }

    protected override void OnWindowDeactivatedOrDestroying(object sender, EventArgs e)
    {
        base.OnWindowDeactivatedOrDestroying(sender, e);
        logger.LogDebug("Window deactivated or destroying");
        _stoppedDate = DateTimeOffset.Now;
    }

    protected override async void OnWindowResumed(object sender, EventArgs e)
    {
        base.OnWindowResumed(sender, e);
        logger.LogDebug("Window resumed");

        // Go to current day if user returns after a certain amount of time,
        if (DateTimeOffset.Now - _stoppedDate >= TimeSpan.FromHours(1))
        {
            // If no dialogs are open.
            if (KeyEventService.CurrentDepth == 0)
            {
                logger.LogInformation($"Switching from {_day} to current day after user was gone since {_stoppedDate}");
                await GoToDay(DateOnly.FromDateTime(DateTime.Now));
                await ScrollToTop();
            }
            else
            {
                logger.LogDebug($"Not switching to current day because {KeyEventService.CurrentDepth} dialogs are open");
            }
        }
    }

    async Task OnTitleClicked(MouseEventArgs e)
    {
        if (e.Detail == 2)
        {
            logger.LogDebug("Title clicked twice so going to now");
            await GoToDay(DateOnly.FromDateTime(DateTime.Now));
            await ScrollToTop();
        }
    }

    async Task ScrollToTop()
    {
        logger.LogInformation("Scrolling to the top");
        await JSRuntime.InvokeVoidAsync("scrollToAbsoluteTop", "instant");
    }

    async Task GoToDay(DateOnly date)
    {
        var sw = Stopwatch.StartNew();

        await db.SaveChangesAsync(); // Save any changes that could have been made from the DataPointViews.
        _day = await db.GetOrCreateDayAndAddPoints(date);
        await db.SaveChangesAsync(); // Save potentially new day and points.

        logger.LogDebug($"Went to {_day} in {sw.ElapsedMilliseconds}ms ({sw.ElapsedTicks} ticks)");

        StateHasChanged();
    }

    async Task PreviousDay()
    {
        logger.LogInformation($"Going to the previous day from {_day}");
        await GoToDay(_day.Date.Previous());
    }

    async Task NextDay()
    {
        logger.LogInformation($"Going to the next day from {_day}");
        await GoToDay(_day.Date.Next());
    }

    void OpenCalendar()
    {
        logger.LogInformation("Opening Calendar");
        NavigationManager.NavigateTo($"/calendar/{_day.Date:yyyyMMdd}", false, true);
    }

    void ManageCategories()
    {
        logger.LogInformation("Opening category manager");
        NavigationManager.NavigateTo($"/manage", false, true);
    }

    void ManageMedications()
    {
        logger.LogInformation("Opening medication manager");
        NavigationManager.NavigateTo($"/manage/Medications", false, true);
    }

    void OpenTrends()
    {
        logger.LogInformation("Opening Trends");
        NavigationManager.NavigateTo($"/trends/{_day.Date:yyyyMMdd}", false, true);
    }

    void OpenSafetyPlan()
    {
        logger.LogInformation("Opening Safety Plan");
        NavigationManager.NavigateTo($"/safetyplan", false, true);
    }

    void OpenWorksheets()
    {
        logger.LogInformation("Opening Worksheets");
        NavigationManager.NavigateTo($"/worksheets", false, true);
    }

    async Task OpenFeedback()
    {
        logger.LogInformation("Opening feedback link");
        await Browser.OpenAsync(Feedback.GenerateLink());
    }

    async Task OpenShare()
    {
        logger.LogInformation("Opening share link");
        await Share.RequestAsync("Stay on top of your wellness goals with JournalApp, your personal diary and mood tracker! https://play.google.com/store/apps/details?id=com.danielchalmers.journalapp");
    }

    void OpenSettings()
    {
        logger.LogInformation("Opening Settings");
        NavigationManager.NavigateTo($"/settings", false, true);
    }

    async Task NewNote()
    {
        logger.LogInformation("Creating new note");

        var note = db.CreateNote(_day);

        var dialogSubmitted = await EditNoteDialog.ShowDialog(DialogService, note);
        if (!dialogSubmitted || note.Deleted)
            return;

        logger.LogInformation("Saving new note");
        note.Category.Points.Add(note);
        await db.SaveChangesAsync();
    }

    protected override void SaveState()
    {
        base.SaveState();
        logger.LogDebug("Saving page");

        App.IndexDateState = (DateTimeOffset.Now, _day.Date);

        db.SaveChanges();
    }

    protected override void Dispose(bool disposing)
    {
        logger.LogDebug("Disposing");
        base.Dispose(disposing);

        db?.Dispose();
    }
}
