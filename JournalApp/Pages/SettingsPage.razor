@namespace JournalApp
@page "/settings"
@implements IDisposable
@inherits JaPage
@inject ILogger<SettingsPage> logger
@inject AppDataUIService AppDataUIService
@inject IFilePicker FilePicker

@if (_busy)
{
    @* TODO: Replace with separate page so we can change state of inline fields and have it updated properly in settings *@
    <div class="d-flex justify-center">
        <MudProgressCircular Color="Color.Primary" Style="height:33vw;width:33vw;margin-top:10vh;" Indeterminate />
    </div>
}
else
{
    <header class="page-header">
        <div class="page-toolbar">
            <MudIconButton Icon="@Icons.Material.Rounded.ArrowBack" aria-label="Go home" OnClick="Close" />

            <MudText Typo="Typo.h6">Settings</MudText>
        </div>
    </header>

    <main class="page-body">
        <div class="settings-group-list">
            <section>
                <MudText Class="list-group-title">Personalization</MudText>

                <MudPaper Class="settings-group">
                    <MudRadioGroup T="AppTheme" Value="PreferenceService.SelectedAppTheme" ValueChanged="v => PreferenceService.SelectedAppTheme = v" aria-label="Theme for entire app">
                        <MudRadio Value="@(AppTheme.Light)">Light</MudRadio>
                        <MudRadio Value="@(AppTheme.Dark)">Dark</MudRadio>
                        <MudRadio Value="@(AppTheme.Unspecified)">System</MudRadio>
                    </MudRadioGroup>

                    <MudCheckBox @bind-Value="PreferenceService.HideNotes" aria-label="Hide the notes section on the home page">Hide "Today's notes"</MudCheckBox>
                    
                    <MudCheckBox @bind-Value="PreferenceService.DisableExtraAnimations" aria-label="Disable extra animations like mood emoji celebrations">Disable extra animations</MudCheckBox>
                </MudPaper>
            </section>

            <section>
                <MudText Class="list-group-title">Safety</MudText>

                <MudPaper Class="settings-group">
                    <MudText>
                        Your coping strategies and sources of support that can be used in a crisis.
                    </MudText>

                    <MudButton StartIcon="@Icons.Material.Rounded.HealthAndSafety" OnClick="SetUpSafetyPlan" Variant="Variant.Outlined" FullWidth>
                        Set up Safety Plan
                    </MudButton>
                </MudPaper>
            </section>

            <section>
                <MudText Class="list-group-title">Data & backups</MudText>

                <MudPaper Class="settings-group">
                    @if ((DateTimeOffset.Now - PreferenceService.LastExportDate) > TimeSpan.FromDays(180))
                    {
                        <MudAlert Severity="Severity.Warning">
                            It's been a while since your last backup. Consider exporting your data to keep it safe.
                        </MudAlert>
                    }

                    <MudText>Last backup: @(PreferenceService.LastExportDate.ToString("d"))</MudText>

                    <MudButtonGroup Variant="Variant.Outlined" FullWidth>
                        <MudButton StartIcon="@Icons.Material.Rounded.Upload" OnClick="StartExport">Export data</MudButton>

                        <MudButton StartIcon="@Icons.Material.Rounded.Download" OnClick="PickAndStartImport">Import data</MudButton>
                    </MudButtonGroup>
                </MudPaper>
            </section>

            <section>
                <MudText Class="list-group-title">About</MudText>

                <MudPaper Class="settings-group">
                    <MudCopyText Text="@($"Good Diary {ThisAssembly.AssemblyInformationalVersion}")" />
                    <MudCopyText Text="@($"{DeviceInfo.Current.Platform} {DeviceInfo.Current.VersionString}")" />

                    <MudLink Href="https://github.com/danielchalmers/JournalApp/issues/new">Submit feedback</MudLink>
                    <MudLink Href="https://play.google.com/store/apps/details?id=com.danielchalmers.journalapp">View on Play Store</MudLink>
                    <MudLink Href="https://github.com/danielchalmers/JournalApp">View source code</MudLink>
                </MudPaper>
            </section>

            <section>
                <MudText Class="list-group-title">Credits</MudText>

                <MudPaper Class="settings-group">
                    <MudTextField T="string" Text="@CreditsText" Typo="Typo.body2" ReadOnly Underline="false"
                                  AutoGrow MaxLines="_creditsExpanded ? 0 : 10" FullWidth />

                    @if (!_creditsExpanded)
                    {
                        <MudLink OnClick="() => _creditsExpanded = true">Expand credits</MudLink>
                    }
                </MudPaper>
            </section>
        </div>
    </main>
}

@code {
    bool _busy;
    bool _creditsExpanded;

    public string CreditsText { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        logger.LogDebug("Initializing asynchronously");
        CreditsText = await GetCreditsText();

        await base.OnInitializedAsync();

        KeyEventService.Entered(Close);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            if (App.ActivatedFilePath != null)
            {
                await StartImport();
                StateHasChanged();
            }
        }
    }

    void SelectedAppThemeChanged(AppTheme newTheme)
    {
        PreferenceService.SelectedAppTheme = newTheme;
    }

    void SetUpSafetyPlan()
    {
        logger.LogInformation("Setting up Safety Plan");
        NavigationManager.NavigateTo($"/safetyplan", false, true);
    }

    async Task PickAndStartImport()
    {
        logger.LogInformation("Picking import file");

        var pickResult = await FilePicker.PickAsync();

        if (pickResult == null)
            return;

        App.ActivatedFilePath = pickResult.FullPath;

        await StartImport();
    }

    async Task StartImport()
    {
        try
        {
            var path = App.ActivatedFilePath;

            // Show loading in the background without blocking UI
            var loadingTask = Task.Run(async () =>
            {
                await Task.Delay(100); // Give UI time to render
                await InvokeAsync(() =>
                {
                    _busy = true;
                    StateHasChanged();
                });
            });

            await AppDataUIService.StartImportWizard(DialogService, App.ActivatedFilePath);
        }
        finally
        {
            App.ActivatedFilePath = null;
            _busy = false;
            StateHasChanged();
        }
    }

    async Task StartExport()
    {
        try
        {
            // Show loading in the background without blocking UI
            var loadingTask = Task.Run(async () =>
            {
                await Task.Delay(100); // Give UI time to render
                await InvokeAsync(() =>
                {
                    _busy = true;
                    StateHasChanged();
                });
            });

            await AppDataUIService.StartExportWizard(DialogService);
        }
        finally
        {
            _busy = false;
            StateHasChanged();
        }
    }

    public async Task<string> GetCreditsText()
    {
        logger.LogDebug("Reading credits file");

        using var stream = await FileSystem.OpenAppPackageFileAsync("Credits.txt");
        using var reader = new StreamReader(stream);
        return reader.ReadToEnd();
    }

    void Close()
    {
        logger.LogInformation("Going to index");
        NavigationManager.NavigateTo("/", false, true);
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        logger.LogDebug("Disposing");

        KeyEventService.Exited();
    }
}
