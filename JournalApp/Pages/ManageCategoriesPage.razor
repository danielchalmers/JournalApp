@namespace JournalApp
@page "/manage/{Group?}"
@inherits JaPage
@implements IDisposable
@inject ILogger<ManageCategoriesPage> logger
@inject IDbContextFactory<AppDbContext> DbFactory

<header class="page-header">
    <div class="page-toolbar">
        <MudIconButton Icon="@Icons.Material.Rounded.ArrowBack" aria-label="Save changes and go home" OnClick="Submit" />

        <MudText Typo="Typo.h6">@(Group == null ? "Elements" : Group)</MudText>

        <MudSpacer />

        <MudIconButton Class="add-category-button" Icon="@Icons.Material.Rounded.Add" aria-label="Open dialog to create new one" OnClick="New" />
    </div>
</header>

<main class="page-body">
    @if (!Categories.Any())
    {
        <MudText Align="Align.Center">Click '+' to add a new one.</MudText>
    }
    else
    {
        <MudPaper>
            @foreach (var c in Categories.OrderBy(c => c.Index))
            {
                <div id="@($"manage-category-{c.Guid}")" class="manage-category">
                    <MudIconButton Class="manage-category-up-button" Icon="@Icons.Material.Rounded.ArrowUpward" aria-label="Move up"
                                   OnClick="async () => await MoveUp(c)" Edge="Edge.Start" Disabled="c.Index <= 1" />

                    <MudButton Class="manage-category-edit-button"
                               Variant="Variant.Text" OnClick="async () => await Edit(c)" Disabled="c.ReadOnly || !c.Enabled"
                               Size="Size.Large" aria-label="Make changes">@c.Name</MudButton>

                    <MudSwitch Class="manage-category-enabled-switch" T="bool" Value="c.Enabled" ValueChanged="async (v) => await OnEnabledChanged(c, v)"
                               Color="Color.Primary" Style="margin-right: -2px;" aria-label="Show in home" />
                </div>
            }
        </MudPaper>
    }
</main>

@code {
    AppDbContext db;

    [Parameter]
    public string Group { get; set; }

    public IQueryable<DataPointCategory> Categories => db.Categories.Where(c => c.Group == Group && !c.Deleted);

    protected override void OnInitialized()
    {
        logger.LogDebug("Initializing");
        db = DbFactory.CreateDbContext();
        base.OnInitialized();

        KeyEventService.Entered(() => Submit());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            ShowTeachingTip("add_new_category", "Click '+' to add a new one");
        }
    }

    async Task OnEnabledChanged(DataPointCategory c, bool newValue)
    {
        logger.LogInformation($"Toggled category enabled <{c}, {newValue}>");
        c.Enabled = newValue;
        await db.SaveChangesAsync();
    }

    async Task MoveUp(DataPointCategory category)
    {
        await db.MoveCategoryUp(category);
        logger.LogInformation($"Moved category up: {category}, {category.Guid}");

        await db.SaveChangesAsync();
    }

    async Task Edit(DataPointCategory category)
    {
        var parameters = new DialogParameters<EditCategoryDialog> { { x => x.Group, Group }, { x => x.Category, category } };
        var dialog = await DialogService.ShowAsync<EditCategoryDialog>(parameters);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        logger.LogInformation($"Edited category: {category}, {category.Guid}");

        if (category.Deleted)
        {
            logger.LogInformation("Category was deleted; deleting points and fixing indexes.");
            db.Points.RemoveRange(category.Points);
            db.FixCategoryIndexes();
        }

        await db.SaveChangesAsync();
    }

    async Task New()
    {
        ActionTaken("add_new_category");

        var parameters = new DialogParameters<EditCategoryDialog> { { x => x.Group, Group } };
        var dialog = await DialogService.ShowAsync<EditCategoryDialog>(parameters);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var newCategory = (DataPointCategory)result.Data;

        if (string.IsNullOrWhiteSpace(newCategory.Name))
        {
            logger.LogInformation($"Not adding new category with empty name");
        }
        else
        {
            db.AddCategory(newCategory);
            await db.SaveChangesAsync();
            logger.LogInformation($"Added new category <{newCategory}>");
        }
    }

    void Submit()
    {
        logger.LogInformation("Going to index");
        NavigationManager.NavigateTo("/", false, true);
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        logger.LogDebug("Disposing");

        KeyEventService.Exited();
        db?.Dispose();
        Snackbar.Clear();
    }
}
