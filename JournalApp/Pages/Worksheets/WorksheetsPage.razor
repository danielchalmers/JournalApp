@namespace JournalApp
@page "/worksheets"
@inherits JaPage
@implements IDisposable
@inject ILogger<WorksheetsPage> logger

<header class="page-header">
    <div class="page-toolbar">
        <MudIconButton Icon="@Icons.Material.Rounded.ArrowBack" aria-label="Go home" OnClick="Close" />
        <MudText Typo="Typo.h6">Worksheets</MudText>
    </div>
</header>

<main class="page-body">
    <div class="worksheet-group-list">
        <nav class="worksheet-group">
            <MudText Typo="Typo.h4">Table of Contents</MudText>
            <ul class="worksheet-group-toc">
                @foreach (var group in WorksheetGroups)
                {
                    @if (!string.IsNullOrEmpty(group.Key))
                    {
                        <li class="worksheet-group-toc-item">
                            <MudLink OnClick="async () => await ScrollToGroup(MarkupUtil.ToClassName(group.Key))" aria-label="Scroll to group">@group.Key</MudLink>
                        </li>
                    }
                }
            </ul>
        </nav>

        @foreach (var group in WorksheetGroups)
        {
            <MudCard Class="worksheet-group" id="@($"worksheet-group-key-{MarkupUtil.ToClassName(group.Key)}")">
                @if (!string.IsNullOrEmpty(group.Key))
                {
                    <MudCardHeader Class="gap-1">
                        <MudText Typo="Typo.h4">@group.Key</MudText>
                        <MudIconButton Icon="@Icons.Material.Rounded.ArrowUpward" OnClick="ScrollToTop" aria-label="Scroll to top" />
                    </MudCardHeader>
                }

                <MudCardContent>
                    <ul class="worksheet-group-items">
                        @foreach (var ws in group)
                        {
                            <WorksheetView Worksheet="ws" ResourceClicked="OnResourceClicked" />
                        }
                    </ul>
                </MudCardContent>
            </MudCard>
        }
    </div>
</main>

@code {
    public IEnumerable<IGrouping<string, Worksheet>> WorksheetGroups => WorksheetData.AllWorksheets.GroupBy(x => x.Category);

    protected override void OnInitialized()
    {
        logger.LogDebug("Initializing");
        base.OnInitialized();

        KeyEventService.Entered(() => Close());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            ShowTeachingTip("worksheets", "Tap the title of a worksheet to view it");
        }
    }

    void OnResourceClicked()
    {
        ActionTaken("worksheets");
    }

    void Close()
    {
        logger.LogInformation("Going to index");
        NavigationManager.NavigateTo("/", false, true);
    }

    async Task ScrollToTop()
    {
        logger.LogDebug("Scrolling to top");
        await JSRuntime.InvokeVoidAsync("scrollToAbsoluteTop");
    }

    async Task ScrollToGroup(string key)
    {
        logger.LogDebug($"Scrolling to group <{key}>");
        await JSRuntime.InvokeVoidAsync("scrollToTopOfNestedElement", ".worksheet-group-list", $"#worksheet-group-key-{key}");
    }

    protected override void Dispose(bool disposing)
    {
        logger.LogDebug("Disposing");
        base.Dispose(disposing);

        KeyEventService.Exited();
        Snackbar.Clear();
    }
}
