@namespace JournalApp
@page "/calendar/{OpenToDateString}"
@using Color = Microsoft.Maui.Graphics.Color;
@using MudBlazor.Utilities
@inherits JaPage
@implements IDisposable
@inject ILogger<CalendarPage> logger
@inject CalendarService CalendarService

<header class="page-header">
    <div class="page-toolbar">
        <MudIconButton Class="close-button" Icon="@Icons.Material.Rounded.ArrowBack" aria-label="Return to home" OnClick="Close" />

        <MudText Typo="Typo.h6">Calendar</MudText>

        <MudSpacer />

        <MudIconButton Class="pick-palette" Icon="@Icons.Material.Rounded.Palette" aria-label="Pick color palette" OnClick="OpenColorPicker" />
    </div>

    <CalendarSwitcher @ref="_switcher" @bind-SelectedYear="SelectedYear" @bind-SelectedYear:after="AfterSelectedYearChanged" YearClicked="OnYearClicked" />
</header>

<main class="page-body">
    @if (_gridYear != null)
    {
        <CalendarView GridYear="_gridYear.Value" OpenToDate="OpenToDate"
                      CalendarRendered="ScrollToOpenToDate" DayClicked="(d) => Close(d)"
                      PreviousMonthClicked="PreviousMonth" NextMonthClicked="NextMonth" />
    }
</main>

@code {
    GridYear? _gridYear = null;
    CalendarSwitcher _switcher;

    [Parameter]
    public string OpenToDateString { get; set; }

    public DateOnly OpenToDate { get; set; }

    public int SelectedYear { get; set; }

    protected override async Task OnInitializedAsync()
    {
        logger.LogDebug("Initializing asynchronously");
        await base.OnInitializedAsync();

        KeyEventService.Entered(() => Close());

        OpenToDate = DateOnly.ParseExact(OpenToDateString, "yyyyMMdd");
        logger.LogInformation("Opening calendar to {OpenToDate}", OpenToDate);
        SelectedYear = OpenToDate.Year;

        await AfterSelectedYearChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            ShowTeachingTip("click_mood_grid_day", "Tap a day to go to it");
        }
    }

    async Task AfterSelectedYearChanged()
    {
        _gridYear = await CalendarService.CreateGridYear(SelectedYear);
        logger.LogInformation("Calendar view loaded for {SelectedYear}", SelectedYear);
    }

    async Task ScrollToMonth(int month, bool smooth = true)
    {
        logger.LogDebug("Scrolling to month {Month}; smooth: {SmoothScroll}", month, smooth);

        await JSRuntime.InvokeVoidAsync("scrollToTopOfNestedElement", ".page-body", $"#calendar-month-{month}", smooth ? "smooth" : "instant");
    }

    Task ScrollToOpenToDate() => ScrollToMonth(OpenToDate.Month);

    async Task OnYearClicked() => await JSRuntime.InvokeVoidAsync("scrollToAbsoluteTop", "instant");

    async Task PreviousMonth(int month)
    {
        if (month == 1)
        {
            logger.LogDebug("Switching to previous month from previous year");

            _switcher.PreviousYear();

            await ScrollToMonth(12);
        }
        else
        {
            logger.LogDebug("Switching to previous month from same year");

            await ScrollToMonth(month - 1);
        }
    }

    async Task NextMonth(int month)
    {
        if (month == 12)
        {
            logger.LogDebug("Switching to next month from next year");

            _switcher.NextYear();

            await ScrollToMonth(1);
        }
        else
        {
            logger.LogDebug("Switching to next month from same year");

            await ScrollToMonth(month + 1);
        }
    }

    async Task OpenColorPicker()
    {
        logger.LogInformation("Opening color picker");

        if (await ColorPickerDialog.ShowDialog(DialogService, PreferenceService.PrimaryColor) is MudColor selectedColor)
        {
            PreferenceService.PrimaryColor = selectedColor;
            StateHasChanged();
        }
    }

    void Close()
    {
        logger.LogInformation("Going to index");
        NavigationManager.NavigateTo("/", false, true);
    }

    void Close(DateOnly? date)
    {
        if (date == null || date > DateOnly.FromDateTime(DateTime.Now).Next())
            return;

        ActionTaken("click_mood_grid_day");
        logger.LogInformation("Clicked grid day {Date}", date);
        NavigationManager.NavigateTo($"/{date:yyyyMMdd}", false, true);
    }

    protected override void Dispose(bool disposing)
    {
        logger.LogDebug("Disposing");
        base.Dispose(disposing);

        KeyEventService.Exited();
        Snackbar.Clear();
    }
}
