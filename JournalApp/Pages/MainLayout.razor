@namespace JournalApp
@inherits LayoutComponentBase
@implements IDisposable
@inject ILogger<MainLayout> logger
@inject KeyEventService KeyEventService
@inject NavigationManager NavigationManager
@inject PreferenceService PreferenceService

<MudThemeProvider Theme="_theme" IsDarkMode="PreferenceService.IsDarkMode" DefaultScrollbar />

<MudPopoverProvider />

<MudDialogProvider MaxWidth="MaxWidth.Small"
                   FullWidth="true"
                   NoHeader="false"
                   CloseButton="false"
                   CloseOnEscapeKey="false"
                   Position="DialogPosition.Center" />

<MudSnackbarProvider />

<div class="page">
    @Body
</div>

@code {
    bool _hasInitiallyRendered;

    MudTheme _theme = new()
        {
            PaletteLight = new PaletteLight()
            {
                // https://material-foundation.github.io/material-theme-builder
                Primary = "#9389e8",
                Secondary = "#928ea6",
                Tertiary = "#b48399",
                Info = "#b48399",
                AppbarText = "#ffffffff",
                HoverOpacity = 0.1,
            },

            PaletteDark = new PaletteDark()
            {
                // https://material-foundation.github.io/material-theme-builder
                Primary = "#9389e8",
                Secondary = "#928ea6",
                Tertiary = "#b48399",
                Info = "#b48399",
                AppbarText = "#ffffffff",
                HoverOpacity = 0.1,

                TextPrimary = "#ffffffde",
                TextSecondary = "#ffffff99",
            },

            LayoutProperties = new()
            {
                DefaultBorderRadius = "2.0em",
            },

            Typography = new()
            {
                Button = new()
                {
                    TextTransform = "none",
                },

                Caption = new()
                {
                    LineHeight = 1,
                },
            },
        };

    protected override void OnInitialized()
    {
        logger.LogDebug("Initializing");
        base.OnInitialized();

        PreferenceService.ThemeChanged += OnThemeChanged;
        App.NewIntent += OnNewIntent;

        if (App.Window is not null) // Not available in tests.
            App.Window.Destroying += (_, _) => Dispose();

        // All pages have been reloaded so we should clear any leftover subscriptions.
        KeyEventService.ResetStack();

        // Start import.
        if (App.ActivatedFilePath != null)
        {
            logger.LogDebug($"Activated by file <{App.ActivatedFilePath}>");
            NavigationManager.NavigateTo($"/settings", false, true);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _hasInitiallyRendered = true;
        }
    }

    public void OnThemeChanged(object sender, bool isDarkMode)
    {
        if (_hasInitiallyRendered)
            StateHasChanged();
    }

    void OnNewIntent(object sender, EventArgs e)
    {
        logger.LogDebug("New intent");
        NavigationManager.NavigateTo($"/settings", true, true);
    }

    public void Dispose()
    {
        PreferenceService.ThemeChanged -= OnThemeChanged;
        App.NewIntent -= OnNewIntent;
    }
}
