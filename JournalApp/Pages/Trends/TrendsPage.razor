@namespace JournalApp
@page "/trends/{OpenToDateString}"
@using CommunityToolkit.Maui.Storage;
@inherits JaPage
@implements IDisposable
@inject ILogger<TrendsPage> logger
@inject IDbContextFactory<AppDbContext> DbFactory

<header class="page-header">
    <div class="page-toolbar">
        <MudIconButton Icon="@Icons.Material.Rounded.ArrowBack" aria-label="Go home" OnClick="Close" />

        <MudText Typo="Typo.h6">Trends</MudText>
    </div>

    <TrendsSwitcher @bind-SelectedDates="SelectedDates" @bind-SelectedDates:after="LoadDates" OpenToDate="OpenToDate" />
</header>

<main class="page-body">
    <div id="trends-category-list">
        @foreach (var (category, points) in AllPoints.OrderBy(x => x.Key.Group).ThenBy(x => x.Key.Index))
        {
            @if (category.Group == "Notes" && Preferences.Get("hide_notes", false))
            {
                continue;
            }

            <section class="trends-category">
                <MudText Typo="Typo.h6">@(TrendCategoryView.GetHeaderText(category))</MudText>

                <ErrorBoundary>
                    <ChildContent>
                        <TrendCategoryView Category="category" Dates="SelectedDates" PointsByDay="points" />
                    </ChildContent>

                    <ErrorContent>
                        <MudText Color="Color.Error">💥 Failed to load.</MudText>
                    </ErrorContent>
                </ErrorBoundary>
            </section>
        }
    </div>
</main>

@code {
    [Parameter]
    public string OpenToDateString { get; set; }

    public DateOnly OpenToDate { get; set; }

    public IReadOnlyList<DateOnly> SelectedDates { get; set; }

    Dictionary<DataPointCategory, IReadOnlyDictionary<int, IReadOnlyCollection<DataPoint>>> AllPoints = new();

    protected override void OnInitialized()
    {
        logger.LogDebug("Initializing");
        base.OnInitialized();

        KeyEventService.Entered(() => Close());

        OpenToDate = DateOnly.ParseExact(OpenToDateString, "yyyyMMdd");
        logger.LogInformation($"Opening to {OpenToDate}");
    }

    async Task LoadDates()
    {
        logger.LogInformation($"Loading dates <{SelectedDates[0]}..{SelectedDates[^1]}>");
        var sw = Stopwatch.StartNew();

        await using var db = await DbFactory.CreateDbContextAsync();

        // All the points we want to show.
        var query = db.Points
            .Where(p => !p.Deleted && !p.Category.Deleted && p.Category.Enabled && SelectedDates.Contains(p.Day.Date))
            .Include(p => p.Category)
            .Include(p => p.Day)
            .AsEnumerable()
            .OrderBy(p => p.Day.Date)
            .ThenBy(p => p.CreatedAt)
            .GroupBy(
                p => p.Category,
                p => p
            );

        // Group points by category then day number.
        AllPoints.Clear();
        foreach (var group in query)
        {
            var pointsByDayNumber = new Dictionary<int, IReadOnlyCollection<DataPoint>>();

            foreach (var date in SelectedDates)
            {
                pointsByDayNumber.Add(date.Day, group.Where(p => p.Day.Date == date).ToHashSet());
            }

            AllPoints.Add(group.Key, pointsByDayNumber);
        }

        logger.LogInformation($"Loaded dates in {sw.ElapsedMilliseconds}ms");
    }

    void Close()
    {
        logger.LogInformation("Going to index");
        NavigationManager.NavigateTo("/", false, true);
    }

    protected override void Dispose(bool disposing)
    {
        logger.LogDebug("Disposing");
        base.Dispose(disposing);

        KeyEventService.Exited();
    }
}
